/*

   Copyright 2006 The Fornax Project Team
 
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

 	http://www.apache.org/licenses/LICENSE-2.0
 	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	-------
	author Darius.Jockel@itemis.de
	
*/

/*
	Use this collection of extensions for names and naming in addition to the Names.ext of the JavaBasic Cartridge
*/	

import uml;

String asParameter (String name) :
	"p"+name.toFirstUpper();

String asParameter (uml::NamedElement elem) :
	"p"+elem.name.toFirstUpper();

String asInstanceVar (uml::NamedElement elem) :
	elem.name.toFirstLower();

// Liefert den Package-Namen einer Klasse
String packageName (Classifier cls) : 
	cls.package!=null ? packageName(cls.package) : "";
	
// Liefert das Package einer Klasse als Pfad
String packagePath (Classifier cls) : 
	packageName(cls).toPath();

String toPath (String s) : s.replaceAll("\\.", "/");

// Liefert den voll qualifizierten Namen einer Klasse
// Da diese Funktion potentiell oft für eine Klasse aufgerufen wird, wird sie
// hier mit dem Schlüsselwort 'cached' gekennzeichnet. Das Ergebnis wird je
// Parameterkombination zwischengespeichert.
cached String fqn (Classifier cls) : 
	packageName(cls).length>0 ? packageName(cls)+"."+cls.name : cls.name;

// Für "normale" Typen wird einfach der Name als qualifizierter Name geliefert
String fqn (Type pt) : pt.name; 
String fqn (DataType pt) : pt.name; 

String fqn (Property p) : p.isMultivalued() ? "java.util.Set<"+p.type.fqn()+">" : p.type.fqn();

// *** HILFSFUNKTIONEN ***
// mit private gekennzeichnete Extensions sind nicht außerhalb des Extension Files sichtbar
// Diese Funktion ermittelt rekursiv den qualifizierten Packagenamen eines Packages.
private cached String packageName (uml::Package pck) :
	(pck.nestingPackage!=null && !uml::Model.isInstance(pck.nestingPackage)) ? packageName(pck.nestingPackage)+"."+pck.name : pck.name;
	
boolean isJavaPrimitive (Type t) :
	{"int", "byte", "short", "boolean", "long", "float", "double"}.contains(t.name);

String javaPrimitiveWrapper (Type t) :
	switch (t.name) {
		case "int" : "Integer"
		default : t.name.toFirstUpper()
	};
	
String documentation (Element e) :
	!e.ownedComment.isEmpty ? e.ownedComment.get(0) : "";

boolean isUnnamed (NamedElement elem) : elem.name==null || elem.name=="";

Boolean isNameUnique (List[NamedElement] elements) :
	elements.forAll(p|!elements.exists(x|x.name==p.name && x!=p));