#set ($generatedFile = "${entity.packagePath}/${entity.entityName}.java")
// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: HibernateEntity.vsl in openuss/tools/andromda/templates.
//
#set ($domainObject = !$entity.compositeIdentifier)
#if ($stringUtils.isNotBlank($entity.packageName))
package $entity.packageName;
#end

/**
$entity.getDocumentation(" * ")
 */
public interface ${entity.entityName} 
#if($entity.generalization)
    extends ${entity.generalization.fullyQualifiedEntityName}
#if (!$entity.interfaceAbstractions.empty)
    , $entity.implementedInterfaceList
#end
#if($domainObject)
	, org.openuss.foundation.DomainObject
#end
#else
#if (!$entity.interfaceAbstractions.empty)
    extends $entity.implementedInterfaceList#if($domainObject), org.openuss.foundation.DomainObject#end
#else
	#if($domainObject)
		extends org.openuss.foundation.DomainObject
	#end
#end
#end
{

#if ($stringUtils.isNotBlank($entity.hibernateVersionProperty))
#if (!$entity.generalization || ($entity.generalization && !$entity.hibernateInheritanceSubclass))
#set ($versionProperty = $entity.hibernateVersionProperty)
#set ($versionPropertyCapitalized = $stringUtils.capitalize($entity.hibernateVersionProperty))
    public int get$versionPropertyCapitalized();

#end
#end
#if($entity.compositeIdentifier)
#set($primaryKeyType="${entity.fullyQualifiedEntityName}PK")
#set($primaryKeyName="$stringUtils.uncapitalize($entity.name)Pk")
	public $primaryKeyType get${entity.name}Pk();

    public void set${entity.name}Pk($primaryKeyType $primaryKeyName);
	
#end
#foreach ($attribute in $entity.attributes)
#if (!$entity.compositeIdentifier || ($entity.compositeIdentifier && !$attribute.identifier))		
#set ($typeName = $attribute.type.fullyQualifiedName)
#if ($attribute.containsEmbeddedObject)
#set ($typeName = $attribute.type.fullyQualifiedEntityName)
#end

	/**
$attribute.getDocumentation("     * ")
     */
    $attribute.visibility $typeName ${attribute.getterName}();

	$attribute.visibility void ${attribute.setterName}(${typeName} $attribute.name);
#end	
#end
## Generate the associations
#foreach ($associationEnd in $entity.associationEnds)
#set ($target = $associationEnd.otherEnd)
#if ($target.navigable || ($associationEnd.child && $entity.foreignHibernateGeneratorClass))

    /**
$target.getDocumentation("     * ")
     */
    public $target.getterSetterTypeName ${target.getterName}();

    public void ${target.setterName}($target.getterSetterTypeName ${target.name});

#end
#end
#foreach ($operation in $entity.businessOperations)
#set ($returnType = $operation.returnType)
#set ($signature = $operation.signature)
    /**
$operation.getDocumentation("     * ")
     */
#if ($operation.exceptionsPresent)
    $operation.visibility abstract $returnType.fullyQualifiedName $signature
        throws $operation.exceptionList;
#else
    $operation.visibility abstract $returnType.fullyQualifiedName $signature;
#end

#end

#if (!$entity.abstract)
    /**
     * Constructs new instances of {@link ${entity.fullyQualifiedName}}.
     */
    public static abstract class Factory
    {
	
		/**
		 * Singleton instance of the concrete factory
		 */
		private static ${entity.entityName}.Factory factory = null;
		
		/**
		 * Singleton method to obtain an instance of the concrete factory
		 */
		private static ${entity.entityName}.Factory getFactory() {
			if (factory == null) {
				factory = (${entity.entityName}.Factory) 
					org.openuss.api.utilities.FactoryFinder.find("${entity.fullyQualifiedName}.Factory");
			}
			return factory;
		}
	
		/**
		 * Abstract factory method for the concrete product.
		 */
		public abstract ${entity.entityName} create${entity.entityName}();
		
        /**
         * Constructs a new instance of {@link ${entity.fullyQualifiedName}}.
         */
        public static $entity.fullyQualifiedName newInstance()
        {
            return getFactory().create${entity.entityName}();
        }

#if ($entity.allRequiredConstructorParameters.size() > $entity.identifiers.size() && $entity.allRequiredConstructorParameters.size() < $entity.allProperties.size())
        /**
         * Constructs a new instance of {@link ${entity.fullyQualifiedName}}, taking all required and/or
         * read-only properties as arguments.
         */
        public static $entity.fullyQualifiedName newInstance(## no newline
#set ($comma = "")
#foreach ($property in $entity.allRequiredConstructorParameters)
#if ($entity.usingForeignIdentifier || !$property.identifier)
${comma}${property.getterSetterTypeName} ${property.name}## no newline
#set ($comma = ", ")
#end
#end
)
        {
            final ${entity.fullyQualifiedName} entity = getFactory().create${entity.entityName}();
#foreach ($property in $entity.allRequiredConstructorParameters)
#if ($entity.usingForeignIdentifier || !$property.identifier)
            entity.${property.setterName}(${property.name});
#end
#end
            return entity;
        }
#end
#set ($propertiesPresent = false)
#foreach ($property in $entity.allProperties)
#if ($entity.usingForeignIdentifier || !$property.identifier)
#set ($propertiesPresent = true)
#end
#end
#if ($propertiesPresent)

        /**
         * Constructs a new instance of {@link ${entity.fullyQualifiedName}}, taking all possible properties
         * (except the identifier(s))as arguments.
         */
        public static $entity.fullyQualifiedName newInstance(## no newline
#set ($comma = "")
#foreach ($property in $entity.allProperties)
#if ($entity.usingForeignIdentifier || !$property.identifier)
${comma}${property.getterSetterTypeName} ${property.name}## no newline
#set ($comma = ", ")
#end
#end
)
        {
            final ${entity.fullyQualifiedName} entity = getFactory().create${entity.entityName}();
#foreach ($property in $entity.allProperties)
#if ($entity.usingForeignIdentifier || !$property.identifier)
            entity.${property.setterName}(${property.name});
#end
#end
            return entity;
        }
#end
    }
    
#end

// Interface HibernateEntity.vsl merge-point
}