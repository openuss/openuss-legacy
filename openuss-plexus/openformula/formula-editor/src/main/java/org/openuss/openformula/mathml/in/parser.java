//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jan 22 01:38:26 CET 2004
//----------------------------------------------------
package org.openuss.openformula.mathml.in;

import org.openuss.openformula.mathml.in.java_cup.runtime.Symbol;


/** CUP v0.10k generated parser.
  * @version Thu Jan 22 01:38:26 CET 2004
  */
public class parser
    extends org.openuss.openformula.mathml.in.java_cup.runtime.lr_parser {
    /** Production table. */
    protected static final short[][] _production_table = 
            unpackFromStrings(
                    new String[] {

        "\000\050\000\002\002\004\000\002\003\004\000\002\003" + 
                    "\005\000\002\004\004\000\002\004\005\000\002\005\003" + 
                    "\000\002\005\004\000\002\006\003\000\002\006\003\000" + 
                    "\002\006\003\000\002\006\003\000\002\006\003\000\002" + 
                    "\007\005\000\002\007\005\000\002\007\005\000\002\007" + 
                    "\003\000\002\007\003\000\002\010\006\000\002\010\005" + 
                    "\000\002\010\006\000\002\010\010\000\002\010\003\000" + 
                    "\002\011\006\000\002\011\006\000\002\011\007\000\002" + 
                    "\011\011\000\002\011\012\000\002\011\012\000\002\011" + 
                    "\012\000\002\011\006\000\002\011\006\000\002\011\007" + 
                    "\000\002\012\005\000\002\013\004\000\002\013\003\000" + 
                    "\002\014\005\000\002\015\004\000\002\015\003\000\002" + 
                    "\016\005\000\002\017\003"
    });

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(
                                                             new String[] {

        "\000\162\000\004\004\005\001\002\000\004\002\164\001" + 
                                                             "\002\000\006\005\007\016\006\001\002\000\050\007\031" + 
                                                             "\011\027\013\042\015\016\017\043\020\012\022\013\024" + 
                                                             "\026\026\034\030\035\032\022\034\036\036\015\040\030" + 
                                                             "\042\020\044\033\053\014\056\017\057\023\001\002\000" + 
                                                             "\004\002\000\001\002\000\004\005\011\001\002\000\004" + 
                                                             "\002\uffff\001\002\000\004\016\006\001\002\000\004\016" + 
                                                             "\006\001\002\000\050\007\ufff2\011\ufff2\013\ufff2\015\ufff2" + 
                                                             "\017\ufff2\020\ufff2\022\ufff2\024\ufff2\026\ufff2\030\ufff2\032" + 
                                                             "\ufff2\034\ufff2\036\ufff2\040\ufff2\042\ufff2\044\ufff2\053\ufff2" + 
                                                             "\056\ufff2\057\ufff2\001\002\000\012\007\132\011\130\013" + 
                                                             "\127\016\006\001\002\000\050\007\ufff1\011\ufff1\013\ufff1" + 
                                                             "\015\ufff1\017\ufff1\020\ufff1\022\ufff1\024\ufff1\026\ufff1\030" + 
                                                             "\ufff1\032\ufff1\034\ufff1\036\ufff1\040\ufff1\042\ufff1\044\ufff1" + 
                                                             "\053\ufff1\056\ufff1\057\ufff1\001\002\000\050\007\uffda\011" + 
                                                             "\uffda\013\uffda\015\uffda\017\uffda\020\uffda\022\uffda\024\uffda" + 
                                                             "\026\uffda\030\uffda\032\uffda\034\uffda\036\uffda\040\uffda\042" + 
                                                             "\uffda\044\uffda\053\uffda\056\uffda\057\uffda\001\002\000\006" + 
                                                             "\007\116\016\006\001\002\000\050\007\031\011\027\013" + 
                                                             "\042\015\016\017\ufffc\020\012\022\013\024\026\026\034" + 
                                                             "\030\035\032\022\034\036\036\015\040\030\042\020\044" + 
                                                             "\033\053\014\056\017\057\023\001\002\000\004\016\006" + 
                                                             "\001\002\000\050\007\uffec\011\uffec\013\uffec\015\uffec\017" + 
                                                             "\uffec\020\uffec\022\uffec\024\uffec\026\uffec\030\uffec\032\uffec" + 
                                                             "\034\uffec\036\uffec\040\uffec\042\uffec\044\uffec\053\uffec\056" + 
                                                             "\uffec\057\uffec\001\002\000\050\007\ufff6\011\ufff6\013\ufff6" + 
                                                             "\015\ufff6\017\ufff6\020\ufff6\022\ufff6\024\ufff6\026\ufff6\030" + 
                                                             "\ufff6\032\ufff6\034\ufff6\036\ufff6\040\ufff6\042\ufff6\044\ufff6" + 
                                                             "\053\ufff6\056\ufff6\057\ufff6\001\002\000\050\007\ufff7\011" + 
                                                             "\ufff7\013\ufff7\015\ufff7\017\ufff7\020\ufff7\022\ufff7\024\ufff7" + 
                                                             "\026\ufff7\030\ufff7\032\ufff7\034\ufff7\036\ufff7\040\ufff7\042" + 
                                                             "\ufff7\044\ufff7\053\ufff7\056\ufff7\057\ufff7\001\002\000\004" + 
                                                             "\016\006\001\002\000\004\054\104\001\002\000\004\016" + 
                                                             "\006\001\002\000\004\055\077\001\002\000\050\007\ufff9" + 
                                                             "\011\ufff9\013\ufff9\015\ufff9\017\ufff9\020\ufff9\022\ufff9\024" + 
                                                             "\ufff9\026\ufff9\030\ufff9\032\ufff9\034\ufff9\036\ufff9\040\ufff9" + 
                                                             "\042\ufff9\044\ufff9\053\ufff9\056\ufff9\057\ufff9\001\002\000" + 
                                                             "\004\046\063\001\002\000\004\052\056\001\002\000\004" + 
                                                             "\016\006\001\002\000\004\016\006\001\002\000\050\007" + 
                                                             "\ufff8\011\ufff8\013\ufff8\015\ufff8\017\ufff8\020\ufff8\022\ufff8" + 
                                                             "\024\ufff8\026\ufff8\030\ufff8\032\ufff8\034\ufff8\036\ufff8\040" + 
                                                             "\ufff8\042\ufff8\044\ufff8\053\ufff8\056\ufff8\057\ufff8\001\002" + 
                                                             "\000\004\017\046\001\002\000\050\007\ufffa\011\ufffa\013" + 
                                                             "\ufffa\015\ufffa\017\ufffa\020\ufffa\022\ufffa\024\ufffa\026\ufffa" + 
                                                             "\030\ufffa\032\ufffa\034\ufffa\036\ufffa\040\ufffa\042\ufffa\044" + 
                                                             "\ufffa\053\ufffa\056\ufffa\057\ufffa\001\002\000\004\055\044" + 
                                                             "\001\002\000\034\005\ufffe\016\ufffe\021\ufffe\023\ufffe\025" + 
                                                             "\ufffe\027\ufffe\031\ufffe\033\ufffe\035\ufffe\037\ufffe\041\ufffe" + 
                                                             "\043\ufffe\051\ufffe\001\002\000\004\014\045\001\002\000" + 
                                                             "\050\007\ufff4\011\ufff4\013\ufff4\015\ufff4\017\ufff4\020\ufff4" + 
                                                             "\022\ufff4\024\ufff4\026\ufff4\030\ufff4\032\ufff4\034\ufff4\036" + 
                                                             "\ufff4\040\ufff4\042\ufff4\044\ufff4\053\ufff4\056\ufff4\057\ufff4" + 
                                                             "\001\002\000\034\005\ufffd\016\ufffd\021\ufffd\023\ufffd\025" + 
                                                             "\ufffd\027\ufffd\031\ufffd\033\ufffd\035\ufffd\037\ufffd\041\ufffd" + 
                                                             "\043\ufffd\051\ufffd\001\002\000\004\016\006\001\002\000" + 
                                                             "\004\016\006\001\002\000\004\035\052\001\002\000\050" + 
                                                             "\007\uffe9\011\uffe9\013\uffe9\015\uffe9\017\uffe9\020\uffe9\022" + 
                                                             "\uffe9\024\uffe9\026\uffe9\030\uffe9\032\uffe9\034\uffe9\036\uffe9" + 
                                                             "\040\uffe9\042\uffe9\044\uffe9\053\uffe9\056\uffe9\057\uffe9\001" + 
                                                             "\002\000\004\016\006\001\002\000\004\031\055\001\002" + 
                                                             "\000\050\007\uffeb\011\uffeb\013\uffeb\015\uffeb\017\uffeb\020" + 
                                                             "\uffeb\022\uffeb\024\uffeb\026\uffeb\030\uffeb\032\uffeb\034\uffeb" + 
                                                             "\036\uffeb\040\uffeb\042\uffeb\044\uffeb\053\uffeb\056\uffeb\057" + 
                                                             "\uffeb\001\002\000\004\052\057\001\002\000\004\006\060" + 
                                                             "\001\002\000\004\016\006\001\002\000\004\027\062\001" + 
                                                             "\002\000\050\007\uffed\011\uffed\013\uffed\015\uffed\017\uffed" + 
                                                             "\020\uffed\022\uffed\024\uffed\026\uffed\030\uffed\032\uffed\034" + 
                                                             "\uffed\036\uffed\040\uffed\042\uffed\044\uffed\053\uffed\056\uffed" + 
                                                             "\057\uffed\001\002\000\004\050\071\001\002\000\006\045" + 
                                                             "\uffdf\046\063\001\002\000\004\045\066\001\002\000\050" + 
                                                             "\007\uffe1\011\uffe1\013\uffe1\015\uffe1\017\uffe1\020\uffe1\022" + 
                                                             "\uffe1\024\uffe1\026\uffe1\030\uffe1\032\uffe1\034\uffe1\036\uffe1" + 
                                                             "\040\uffe1\042\uffe1\044\uffe1\053\uffe1\056\uffe1\057\uffe1\001" + 
                                                             "\002\000\004\045\uffe0\001\002\000\006\047\uffdc\050\071" + 
                                                             "\001\002\000\004\016\006\001\002\000\004\047\073\001" + 
                                                             "\002\000\006\045\uffde\046\uffde\001\002\000\004\051\075" + 
                                                             "\001\002\000\006\047\uffdb\050\uffdb\001\002\000\004\047" + 
                                                             "\uffdd\001\002\000\004\010\100\001\002\000\050\007\ufff5" + 
                                                             "\011\ufff5\013\ufff5\015\ufff5\017\ufff5\020\ufff5\022\ufff5\024" + 
                                                             "\ufff5\026\ufff5\030\ufff5\032\ufff5\034\ufff5\036\ufff5\040\ufff5" + 
                                                             "\042\ufff5\044\ufff5\053\ufff5\056\ufff5\057\ufff5\001\002\000" + 
                                                             "\004\016\006\001\002\000\004\041\103\001\002\000\050" + 
                                                             "\007\uffe3\011\uffe3\013\uffe3\015\uffe3\017\uffe3\020\uffe3\022" + 
                                                             "\uffe3\024\uffe3\026\uffe3\030\uffe3\032\uffe3\034\uffe3\036\uffe3" + 
                                                             "\040\uffe3\042\uffe3\044\uffe3\053\uffe3\056\uffe3\057\uffe3\001" + 
                                                             "\002\000\004\012\105\001\002\000\050\007\ufff3\011\ufff3" + 
                                                             "\013\ufff3\015\ufff3\017\ufff3\020\ufff3\022\ufff3\024\ufff3\026" + 
                                                             "\ufff3\030\ufff3\032\ufff3\034\ufff3\036\ufff3\040\ufff3\042\ufff3" + 
                                                             "\044\ufff3\053\ufff3\056\ufff3\057\ufff3\001\002\000\004\016" + 
                                                             "\006\001\002\000\004\025\110\001\002\000\050\007\uffee" + 
                                                             "\011\uffee\013\uffee\015\uffee\017\uffee\020\uffee\022\uffee\024" + 
                                                             "\uffee\026\uffee\030\uffee\032\uffee\034\uffee\036\uffee\040\uffee" + 
                                                             "\042\uffee\044\uffee\053\uffee\056\uffee\057\uffee\001\002\000" + 
                                                             "\004\016\006\001\002\000\004\033\113\001\002\000\050" + 
                                                             "\007\uffea\011\uffea\013\uffea\015\uffea\017\uffea\020\uffea\022" + 
                                                             "\uffea\024\uffea\026\uffea\030\uffea\032\uffea\034\uffea\036\uffea" + 
                                                             "\040\uffea\042\uffea\044\uffea\053\uffea\056\uffea\057\uffea\001" + 
                                                             "\002\000\004\017\ufffb\001\002\000\004\016\006\001\002" + 
                                                             "\000\004\055\117\001\002\000\004\010\120\001\002\000" + 
                                                             "\004\016\006\001\002\000\004\016\006\001\002\000\004" + 
                                                             "\043\123\001\002\000\050\007\uffe8\011\uffe8\013\uffe8\015" + 
                                                             "\uffe8\017\uffe8\020\uffe8\022\uffe8\024\uffe8\026\uffe8\030\uffe8" + 
                                                             "\032\uffe8\034\uffe8\036\uffe8\040\uffe8\042\uffe8\044\uffe8\053" + 
                                                             "\uffe8\056\uffe8\057\uffe8\001\002\000\004\016\006\001\002" + 
                                                             "\000\004\043\126\001\002\000\050\007\uffe2\011\uffe2\013" + 
                                                             "\uffe2\015\uffe2\017\uffe2\020\uffe2\022\uffe2\024\uffe2\026\uffe2" + 
                                                             "\030\uffe2\032\uffe2\034\uffe2\036\uffe2\040\uffe2\042\uffe2\044" + 
                                                             "\uffe2\053\uffe2\056\uffe2\057\uffe2\001\002\000\004\055\151" + 
                                                             "\001\002\000\004\054\143\001\002\000\004\016\006\001" + 
                                                             "\002\000\004\055\133\001\002\000\004\010\134\001\002" + 
                                                             "\000\004\007\135\001\002\000\004\055\136\001\002\000" + 
                                                             "\004\010\137\001\002\000\004\037\140\001\002\000\050" + 
                                                             "\007\uffe6\011\uffe6\013\uffe6\015\uffe6\017\uffe6\020\uffe6\022" + 
                                                             "\uffe6\024\uffe6\026\uffe6\030\uffe6\032\uffe6\034\uffe6\036\uffe6" + 
                                                             "\040\uffe6\042\uffe6\044\uffe6\053\uffe6\056\uffe6\057\uffe6\001" + 
                                                             "\002\000\004\037\142\001\002\000\050\007\uffe4\011\uffe4" + 
                                                             "\013\uffe4\015\uffe4\017\uffe4\020\uffe4\022\uffe4\024\uffe4\026" + 
                                                             "\uffe4\030\uffe4\032\uffe4\034\uffe4\036\uffe4\040\uffe4\042\uffe4" + 
                                                             "\044\uffe4\053\uffe4\056\uffe4\057\uffe4\001\002\000\004\012" + 
                                                             "\144\001\002\000\004\007\145\001\002\000\004\055\146" + 
                                                             "\001\002\000\004\010\147\001\002\000\004\037\150\001" + 
                                                             "\002\000\050\007\uffe5\011\uffe5\013\uffe5\015\uffe5\017\uffe5" + 
                                                             "\020\uffe5\022\uffe5\024\uffe5\026\uffe5\030\uffe5\032\uffe5\034" + 
                                                             "\uffe5\036\uffe5\040\uffe5\042\uffe5\044\uffe5\053\uffe5\056\uffe5" + 
                                                             "\057\uffe5\001\002\000\004\014\152\001\002\000\004\007" + 
                                                             "\153\001\002\000\004\055\154\001\002\000\004\010\155" + 
                                                             "\001\002\000\004\037\156\001\002\000\050\007\uffe7\011" + 
                                                             "\uffe7\013\uffe7\015\uffe7\017\uffe7\020\uffe7\022\uffe7\024\uffe7" + 
                                                             "\026\uffe7\030\uffe7\032\uffe7\034\uffe7\036\uffe7\040\uffe7\042" + 
                                                             "\uffe7\044\uffe7\053\uffe7\056\uffe7\057\uffe7\001\002\000\004" + 
                                                             "\023\160\001\002\000\050\007\uffef\011\uffef\013\uffef\015" + 
                                                             "\uffef\017\uffef\020\uffef\022\uffef\024\uffef\026\uffef\030\uffef" + 
                                                             "\032\uffef\034\uffef\036\uffef\040\uffef\042\uffef\044\uffef\053" + 
                                                             "\uffef\056\uffef\057\uffef\001\002\000\004\016\006\001\002" + 
                                                             "\000\004\021\163\001\002\000\050\007\ufff0\011\ufff0\013" + 
                                                             "\ufff0\015\ufff0\017\ufff0\020\ufff0\022\ufff0\024\ufff0\026\ufff0" + 
                                                             "\030\ufff0\032\ufff0\034\ufff0\036\ufff0\040\ufff0\042\ufff0\044" + 
                                                             "\ufff0\053\ufff0\056\ufff0\057\ufff0\001\002\000\004\002\001" + 
                                                             "\001\002"
    });

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(
                                                             new String[] {

        "\000\162\000\004\003\003\001\001\000\002\001\001\000" + 
                                                             "\004\004\007\001\001\000\020\005\037\006\020\007\040" + 
                                                             "\010\031\011\036\012\024\017\023\001\001\000\002\001" + 
                                                             "\001\000\002\001\001\000\002\001\001\000\004\004\160" + 
                                                             "\001\001\000\004\004\156\001\001\000\002\001\001\000" + 
                                                             "\004\004\130\001\001\000\002\001\001\000\002\001\001" + 
                                                             "\000\004\004\114\001\001\000\020\005\113\006\020\007" + 
                                                             "\040\010\031\011\036\012\024\017\023\001\001\000\004" + 
                                                             "\004\110\001\001\000\002\001\001\000\002\001\001\000" + 
                                                             "\002\001\001\000\004\004\105\001\001\000\002\001\001" + 
                                                             "\000\004\004\100\001\001\000\002\001\001\000\002\001" + 
                                                             "\001\000\006\013\064\014\063\001\001\000\002\001\001" + 
                                                             "\000\004\004\052\001\001\000\004\004\046\001\001\000" + 
                                                             "\002\001\001\000\002\001\001\000\002\001\001\000\002" + 
                                                             "\001\001\000\002\001\001\000\002\001\001\000\002\001" + 
                                                             "\001\000\002\001\001\000\004\004\047\001\001\000\004" + 
                                                             "\004\050\001\001\000\002\001\001\000\002\001\001\000" + 
                                                             "\004\004\053\001\001\000\002\001\001\000\002\001\001" + 
                                                             "\000\002\001\001\000\002\001\001\000\004\004\060\001" + 
                                                             "\001\000\002\001\001\000\002\001\001\000\006\015\071" + 
                                                             "\016\067\001\001\000\006\013\066\014\063\001\001\000" + 
                                                             "\002\001\001\000\002\001\001\000\002\001\001\000\006" + 
                                                             "\015\075\016\067\001\001\000\004\004\073\001\001\000" + 
                                                             "\002\001\001\000\002\001\001\000\002\001\001\000\002" + 
                                                             "\001\001\000\002\001\001\000\002\001\001\000\002\001" + 
                                                             "\001\000\004\004\101\001\001\000\002\001\001\000\002" + 
                                                             "\001\001\000\002\001\001\000\002\001\001\000\004\004" + 
                                                             "\106\001\001\000\002\001\001\000\002\001\001\000\004" + 
                                                             "\004\111\001\001\000\002\001\001\000\002\001\001\000" + 
                                                             "\002\001\001\000\004\004\123\001\001\000\002\001\001" + 
                                                             "\000\002\001\001\000\004\004\120\001\001\000\004\004" + 
                                                             "\121\001\001\000\002\001\001\000\002\001\001\000\004" + 
                                                             "\004\124\001\001\000\002\001\001\000\002\001\001\000" + 
                                                             "\002\001\001\000\002\001\001\000\004\004\140\001\001" + 
                                                             "\000\002\001\001\000\002\001\001\000\002\001\001\000" + 
                                                             "\002\001\001\000\002\001\001\000\002\001\001\000\002" + 
                                                             "\001\001\000\002\001\001\000\002\001\001\000\002\001" + 
                                                             "\001\000\002\001\001\000\002\001\001\000\002\001\001" + 
                                                             "\000\002\001\001\000\002\001\001\000\002\001\001\000" + 
                                                             "\002\001\001\000\002\001\001\000\002\001\001\000\002" + 
                                                             "\001\001\000\002\001\001\000\002\001\001\000\002\001" + 
                                                             "\001\000\004\004\161\001\001\000\002\001\001\000\002" + 
                                                             "\001\001\000\002\001\001"
    });

    /** Instance of action encapsulation class. */
    protected CUP$parser$actions action_obj;

    /** Default constructor. */
    public parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public parser(org.openuss.openformula.mathml.in.java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public org.openuss.openformula.mathml.in.java_cup.runtime.Symbol do_action(int act_num, 
                                                                                              org.openuss.openformula.mathml.in.java_cup.runtime.lr_parser parser, 
                                                                                              java.util.Stack stack, 
                                                                                              int top)
        throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }

    public void syntax_error(Symbol symbol) {
    }

    public void unrecovered_syntax_error(Symbol symbol)
                                  throws Exception {
        throw new RuntimeException("Fehler in Zeile " + symbol.left + 
                                   ", Spalte " + symbol.right);
    }

    public void report_error(String message, Object info) {
    }

    public void report_fatal_error(String message, Object info) {
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final org.openuss.openformula.mathml.in.java_cup.runtime.Symbol CUP$parser$do_action(int CUP$parser$act_num, 
                                                                                                               org.openuss.openformula.mathml.in.java_cup.runtime.lr_parser CUP$parser$parser, 
                                                                                                               java.util.Stack CUP$parser$stack, 
                                                                                                               int CUP$parser$top)
        throws java.lang.Exception {
        /* Symbol object for return from actions */
        org.openuss.openformula.mathml.in.java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // intern ::= CURSOR 
        {
            Object RESULT = null;
            RESULT = new InsertCursor();
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(
                                        13/*intern*/
            , 
                                        ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, 
                                        ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                        RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // matrixElement ::= MATRIXELEMENT_OPEN row MATRIXELEMENT_CLOSE 
        {
            Object RESULT = null;
            int elementleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int elementright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object element = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new MatrixElement((Row) element);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(
                                        12/*matrixElement*/
            , 
                                        ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, 
                                        ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                        RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // matrixElements ::= matrixElement 
        {
            Object RESULT = null;
            int thisoneleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
            int thisoneright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
            Object thisone = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
            RESULT = new MatrixElements((MatrixElement) thisone);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(
                                        11/*matrixElements*/
            , 
                                        ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, 
                                        ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                        RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // matrixElements ::= matrixElement matrixElements 
        {
            Object RESULT = null;
            int thisoneleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int thisoneright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object thisone = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            int nextleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
            int nextright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
            Object next = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
            RESULT = new MatrixElements((MatrixElement) thisone, 
                                        (MatrixElements) next);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(
                                        11/*matrixElements*/
            , 
                                        ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left, 
                                        ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                        RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // matrixLine ::= MATRIXROW_OPEN matrixElements MATRIXROW_CLOSE 
        {
            Object RESULT = null;
            int elementsleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int elementsright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object elements = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new MatrixLine((MatrixElements) elements);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(
                                        10/*matrixLine*/
            , 
                                        ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, 
                                        ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                        RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // matrixLines ::= matrixLine 
        {
            Object RESULT = null;
            int thisoneleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
            int thisoneright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
            Object thisone = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
            RESULT = new MatrixLines((MatrixLine) thisone);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(9/*matrixLines*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // matrixLines ::= matrixLine matrixLines 
        {
            Object RESULT = null;
            int thisoneleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int thisoneright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object thisone = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            int nextleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
            int nextright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
            Object next = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
            RESULT = new MatrixLines((MatrixLine) thisone, (MatrixLines) next);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(9/*matrixLines*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // tablesAndMatrices ::= TABLEORMATRIX_OPEN matrixLines TABLEORMATRIX_CLOSE 
        {
            Object RESULT = null;
            int matrixleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int matrixright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object matrix = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertMatrix((MatrixLines) matrix);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(8/*tablesAndMatrices*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // scriptAndLimitSchemata ::= UNDEROVERSCRIPT_OPEN row row row UNDEROVERSCRIPT_CLOSE 
        {
            Object RESULT = null;
            int mainleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
            int mainright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
            Object main = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
            int underleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int underright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object under = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int overleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int overright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object over = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertUnderOver((Row) main, (Row) under, (Row) over);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(7/*scriptAndLimitSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // scriptAndLimitSchemata ::= UNDERSCRIPT_OPEN row row UNDERSCRIPT_CLOSE 
        {
            Object RESULT = null;
            int mainleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int mainright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object main = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int underleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int underright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object under = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertUnderOver((Row) main, (Row) under, null);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(7/*scriptAndLimitSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // scriptAndLimitSchemata ::= OVERSCRIPT_OPEN row row OVERSCRIPT_CLOSE 
        {
            Object RESULT = null;
            int mainleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int mainright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object main = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int overleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int overright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object over = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertUnderOver((Row) main, null, (Row) over);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(7/*scriptAndLimitSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // scriptAndLimitSchemata ::= OVERSCRIPT_OPEN NUMBER_OPEN FLOATING_POINT_LITERAL NUMBER_CLOSE OPERATOR_OPEN UNICODECHAR OPERATOR_CLOSE OVERSCRIPT_CLOSE 
        {
            Object RESULT = null;
            int letterleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
            int letterright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
            Object letter = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
            int typeleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int typeright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object type = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            RESULT = new InsertIndicatedLetter((String) letter, (String) type);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(7/*scriptAndLimitSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // scriptAndLimitSchemata ::= OVERSCRIPT_OPEN OPERATOR_OPEN UNICODECHAR OPERATOR_CLOSE OPERATOR_OPEN UNICODECHAR OPERATOR_CLOSE OVERSCRIPT_CLOSE 
        {
            Object RESULT = null;
            int letterleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
            int letterright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
            Object letter = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
            int typeleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int typeright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object type = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            RESULT = new InsertIndicatedLetter((String) letter, (String) type);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(7/*scriptAndLimitSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // scriptAndLimitSchemata ::= OVERSCRIPT_OPEN IDENTIFIER_OPEN UNICODECHAR IDENTIFIER_CLOSE OPERATOR_OPEN UNICODECHAR OPERATOR_CLOSE OVERSCRIPT_CLOSE 
        {
            Object RESULT = null;
            int letterleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
            int letterright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
            Object letter = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
            int typeleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int typeright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object type = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            RESULT = new InsertIndicatedLetter((String) letter, (String) type);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(7/*scriptAndLimitSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // scriptAndLimitSchemata ::= UNDEROVERSCRIPT_OPEN OPERATOR_OPEN UNICODECHAR OPERATOR_CLOSE row row UNDEROVERSCRIPT_CLOSE 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
            int bottomleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int bottomright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object bottom = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int topleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int topright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object top = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertSummIntegralSign((String) a, (Row) bottom, 
                                                (Row) top);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(7/*scriptAndLimitSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // scriptAndLimitSchemata ::= SUBSUPERSCRIPT_OPEN row row row SUBSUPERSCRIPT_CLOSE 
        {
            Object RESULT = null;
            int mainleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
            int mainright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
            Object main = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
            int subleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int subright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object sub = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int supleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int supright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object sup = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertSubSuperscript((Row) main, (Row) sub, (Row) sup);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(7/*scriptAndLimitSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // scriptAndLimitSchemata ::= SUPERSCRIPT_OPEN row row SUPERSCRIPT_CLOSE 
        {
            Object RESULT = null;
            int mainleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int mainright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object main = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int supleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int supright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object sup = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertSubSuperscript((Row) main, (Row) sup, false);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(7/*scriptAndLimitSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // scriptAndLimitSchemata ::= SUBSCRIPT_OPEN row row SUBSCRIPT_CLOSE 
        {
            Object RESULT = null;
            int mainleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int mainright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object main = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int subleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int subright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object sub = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertSubSuperscript((Row) main, (Row) sub, true);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(7/*scriptAndLimitSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // generalLayoutSchemata ::= MBR 
        {
            Object RESULT = null;
            RESULT = new InsertCarriageReturn();
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(6/*generalLayoutSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // generalLayoutSchemata ::= FENCE_OPEN APARAMETER APARAMETER GT row FENCE_CLOSE 
        {
            Object RESULT = null;
            int openleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
            int openright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
            Object open = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
            int closeleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
            int closeright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
            Object close = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
            int mainleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int mainright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object main = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertFence((String) open, (String) close, (Row) main);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(6/*generalLayoutSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // generalLayoutSchemata ::= ROOT_OPEN row row ROOT_CLOSE 
        {
            Object RESULT = null;
            int mainleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int mainright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object main = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int baseleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int baseright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object base = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertSquareRoot((Row) main, (Row) base);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(6/*generalLayoutSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // generalLayoutSchemata ::= SQUAREROOT_OPEN row SQUAREROOT_CLOSE 
        {
            Object RESULT = null;
            int mainleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int mainright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object main = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertSquareRoot((Row) main);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(6/*generalLayoutSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // generalLayoutSchemata ::= FRACTION_OPEN row row FRACTION_CLOSE 
        {
            Object RESULT = null;
            int mainleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int mainright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object main = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int baseleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int baseright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object base = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertFraction((Row) main, (Row) base);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(6/*generalLayoutSchemata*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // tokenElements ::= SPACE_OPENCLOSE 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
            RESULT = new InsertString(" ", aleft, aright);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(5/*tokenElements*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // tokenElements ::= ENCLOSED_STRING 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
            RESULT = new InsertString((String) a, aleft, aright);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(5/*tokenElements*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // tokenElements ::= NUMBER_OPEN FLOATING_POINT_LITERAL NUMBER_CLOSE 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertString((String) a, aleft, aright);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(5/*tokenElements*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // tokenElements ::= IDENTIFIER_OPEN UNICODECHAR IDENTIFIER_CLOSE 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertCharSymbol((String) a, aleft, aright);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(5/*tokenElements*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // tokenElements ::= OPERATOR_OPEN UNICODECHAR OPERATOR_CLOSE 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new InsertCharSymbol((String) a, aleft, aright);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(5/*tokenElements*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // astatement ::= intern 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
            RESULT = new AStatement((Statement) a);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(4/*astatement*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // astatement ::= tablesAndMatrices 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
            RESULT = new AStatement((Statement) a);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(4/*astatement*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // astatement ::= scriptAndLimitSchemata 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
            RESULT = new AStatement((Statement) a);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(4/*astatement*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // astatement ::= generalLayoutSchemata 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
            RESULT = new AStatement((Statement) a);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(4/*astatement*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // astatement ::= tokenElements 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
            RESULT = new AStatement((Statement) a);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(4/*astatement*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // statements ::= astatement statements 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            int bleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
            int bright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
            Object b = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
            RESULT = new Statements((AStatement) a, (Statements) b);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(3/*statements*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // statements ::= astatement 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
            RESULT = new Statements((AStatement) a);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(3/*statements*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // row ::= ROW_OPEN statements ROW_CLOSE 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int bleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int bright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object b = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new Row((Symbol) a, (Statements) b);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(2/*row*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // row ::= ROW_OPEN ROW_CLOSE 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new Row((Symbol) a);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(2/*row*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // base ::= MATHHEADER_OPEN row MATHHEADER_CLOSE 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int bleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int bright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object b = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new MathHeader((Symbol) a, (InterpreterBasis) b);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(1/*base*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // base ::= MATHHEADER_OPEN MATHHEADER_CLOSE 
        {
            Object RESULT = null;
            int aleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int aright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object a = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = new MathHeader((Symbol) a);
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(1/*base*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }

        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= base EOF 
        {
            Object RESULT = null;
            int start_valleft = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int start_valright = ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            Object start_val = (Object) ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = start_val;
            CUP$parser$result = new org.openuss.openformula.mathml.in.java_cup.runtime.Symbol(0/*$START*/
            , 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left, 
                                                                                                             ((org.openuss.openformula.mathml.in.java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, 
                                                                                                             RESULT);
        }


        /* ACCEPT */
        CUP$parser$parser.done_parsing();

        return CUP$parser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                    "Invalid action number found in internal parse table");
        }
    }
}