/* Generated by Freestyle Learning Group */

package freestyleLearning.learningUnitViewAPI.elementsStructurePanel;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.elementsStructurePanel.dialogs.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.*;
import freestyleLearningGroup.independent.util.*;
import freestyleLearningGroup.independent.gui.*;

public class FSLLearningUnitViewElementStructureTree extends JTree {
    protected boolean viewIsActive;
    protected String activeLearningUnitViewElementId;
    protected String secondaryActiveLearningUnitViewElementId;
    protected FSLLearningUnitViewManager learningUnitViewManager;
    protected FSLLearningUnitViewElementsManager learningUnitViewElementsManager;
    private FSLLearningUnitViewElementsStructurePanelTreeNodeIconProvider treeNodeIconProvider;
    private String dragSourceElementId;
    private String dropAllowedTargetElementId;
    private String dropNotAllowedTargetElementId;
    private FSLLearningUnitViewMoveElementDialog learningUnitViewMoveElementDialog;
    private boolean editMode;
    private boolean doNotFireSelectionEvent;

    public void init(FSLLearningUnitViewManager learningUnitViewManager,
        FSLLearningUnitViewElementsManager learningUnitViewElementsManager,
        FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
            this.learningUnitViewManager = learningUnitViewManager;
            learningUnitViewManager.addLearningUnitViewListener(
                new FSLLearningUnitElementsStructureTree_LearningUnitViewAdapter());
            this.learningUnitViewElementsManager = learningUnitViewElementsManager;
            learningUnitEventGenerator.addLearningUnitListener(new FSLLearningUnitElementsStructureTree_LearningUnitAdapter());
            this.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke("F2"), "modify");
            this.getActionMap().put("modify", new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                f2Pressed();
            }            
            });
            buildIndependentUI();
            TreeMouseDragAndDropListener treeMouseDragAndDropListener = new TreeMouseDragAndDropListener();
            addMouseListener(treeMouseDragAndDropListener);
            addMouseMotionListener(treeMouseDragAndDropListener);
            addKeyListener(new FSLLearningUnitElementsStructureTree_KeyListener());
            setScrollsOnExpand(true);
            learningUnitViewMoveElementDialog = new FSLLearningUnitViewMoveElementDialog();
    }

    private void f2Pressed() {
//        FLGOptionPane.showMessageDialog("Sie haben F2 gedrückt. Glückwunsch!", "KeyTest", FLGOptionPane.INFORMATION_MESSAGE);
        if (!editMode) {
            learningUnitViewManager.getLearningUnitEventGenerator().requestEditMode(true);
        }
        FSLLearningUnitViewEvent f2ActionEvent = FSLLearningUnitViewEvent.createLearningUnitF2ActionEvent(learningUnitViewManager.getActiveLearningUnitViewElementId());
        learningUnitViewManager.fireLearningUnitViewEvent(f2ActionEvent);
    }

    public void setTreeNodeIconProvider(FSLLearningUnitViewElementsStructurePanelTreeNodeIconProvider treeNodeIconProvider) {
        this.treeNodeIconProvider = treeNodeIconProvider;
    }

    public void setLearningUnitViewElementsManager(FSLLearningUnitViewElementsManager learningUnitViewElementsManager) {
        this.learningUnitViewElementsManager = learningUnitViewElementsManager;
        activeLearningUnitViewElementId = null;
        secondaryActiveLearningUnitViewElementId = null;
        if (viewIsActive) buildDependentUI();
    }

    public void updateUI() {
        super.updateUI();
        int baseFontSize = ((Integer)UIManager.get("FSLLearningUnitViewElementsStructurePanel.BaseFontSize")).intValue();
        Font font = new Font("SansSerif", Font.PLAIN, baseFontSize);
        FontMetrics fontMetrics = getFontMetrics(font);
        setRowHeight(fontMetrics.getHeight());
        setFont(font);
    }

    public void buildIndependentUI() {
        setRootVisible(false);
        setCellRenderer(new FSLTreeCellRenderer());
        setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        setOpaque(false);
        Font font = new Font("SansSerif", Font.PLAIN, 16);
        FontMetrics fontMetrics = getFontMetrics(font);
        setRowHeight(fontMetrics.getHeight());
        setFont(font);
        addTreeSelectionListener(
            new TreeSelectionListener() {
                public void valueChanged(TreeSelectionEvent e) {
                    if (doNotFireSelectionEvent) {
                        doNotFireSelectionEvent = false;
                        return;
                    }
                    Vector selectedElementIds = new Vector();
                    TreePath[] treePaths = getSelectionPaths();
                    String[] elementIdArray = null;
                    if (treePaths != null) {
                        for (int i = 0; i < treePaths.length; i++) {
                            DefaultMutableTreeNode node = (DefaultMutableTreeNode)treePaths[i].getLastPathComponent();
                            if ((node.getUserObject() != null) && (node.getUserObject() instanceof String))
                                selectedElementIds.add(((String)node.getUserObject()));
                        }
                    }
                    if (selectedElementIds.size() > 0) {
                        elementIdArray = new String[selectedElementIds.size()];
                        for (int i = 0; i < elementIdArray.length; i++)
                            elementIdArray[i] = (String)selectedElementIds.get(i);
                        learningUnitViewManager.fireLearningUnitViewEvent(
                            FSLLearningUnitViewEvent.createElementsSelectedEvent(learningUnitViewManager.getLearningUnitViewManagerId(), 
                            elementIdArray));
                    }
                }
            });
    }

    public void buildDependentUI() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(new Integer(0));
        if (learningUnitViewElementsManager != null) {
            String[] topLevelElementIds = learningUnitViewElementsManager.getTopLevelLearningUnitViewElementsIds();
            for (int i = 0; i < topLevelElementIds.length; i++) {
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(topLevelElementIds[i]);
                root.add(node);
                addChildNodes(node, topLevelElementIds[i]);
            }
        }
        DefaultTreeModel treeModel = new DefaultTreeModel(root);
        setModel(treeModel);
        if (activeLearningUnitViewElementId != null) {
            setSelectedElement(activeLearningUnitViewElementId);
        }
    }
    
    public void sortElements(String selectedlearningUnitViewElementID, boolean ascending) {
        String parentId = learningUnitViewElementsManager.getParentIdOfLearningUnitViewElement(selectedlearningUnitViewElementID);
        String[] childrenIds = learningUnitViewElementsManager.getChildrenIdsOfLearningUnitViewElement(parentId);
        String[] elementTitles = new String[childrenIds.length];
        
        for (int i = 0; i < elementTitles.length; i++) {
            FSLLearningUnitViewElement element = learningUnitViewElementsManager.getLearningUnitViewElement(childrenIds[i], false);
            elementTitles[i] = element.getTitle();
        }
        
        if (ascending) {
        // ascending order
            for (int i = 0; i < elementTitles.length - 1; i++) {
                for (int j = 0; j < elementTitles.length - 1 - i; j++) {
                    if (elementTitles[j + 1].compareToIgnoreCase(elementTitles[j]) < 0) {
                        // switch titles
                        String swap = elementTitles[j];
                        elementTitles[j] = elementTitles[j + 1];                            
                        elementTitles[j + 1] = swap;
                        // copy switch to ids
                        swap = childrenIds[j];
                        childrenIds[j] = childrenIds[j + 1];                            
                        childrenIds[j + 1] = swap;
                        // switch element positions
                        switchLearningUnitViewElementPosition(childrenIds[j], childrenIds[j + 1]);
                    }
                }
            }
        }
        else {
        // descending order
            for (int i = elementTitles.length - 2; i >= 0; i--) {
                for (int j = elementTitles.length - 2 - i; j >= 0 ; j--) {
                    if (elementTitles[j + 1].compareToIgnoreCase(elementTitles[j]) > 0) {
                        // switch titles
                        String swap = elementTitles[j];
                        elementTitles[j] = elementTitles[j + 1];                            
                        elementTitles[j + 1] = swap;
                        // copy switch to ids
                        swap = childrenIds[j];
                        childrenIds[j] = childrenIds[j + 1];                            
                        childrenIds[j + 1] = swap;
                        // switch element positions
                        switchLearningUnitViewElementPosition(childrenIds[j], childrenIds[j + 1]);
                    }
                }
            }
        }
        buildDependentUI();            
    }

    protected void switchLearningUnitViewElementPosition(String sourceElementId, String targetElementId) {
        FSLLearningUnitViewElement sourceElement =
            learningUnitViewElementsManager.getLearningUnitViewElement(sourceElementId, false);
        FSLLearningUnitViewElement targetElement =
            learningUnitViewElementsManager.getLearningUnitViewElement(targetElementId, false);

        learningUnitViewElementsManager.removeLearningUnitViewElement(sourceElementId);

        sourceElement.setParentId(targetElement.getParentId());
        learningUnitViewElementsManager.insertLearningUnitViewElementBefore(sourceElement, targetElementId);

        String[] learningUnitViewElementsMoved =
                learningUnitViewElementsManager.getDescendantIdsOfLearningUnitViewElement(sourceElementId);
        Vector learningUnitViewElementsMovedVector = new Vector();
        for (int i = 0; i < learningUnitViewElementsMoved.length; i++)
            learningUnitViewElementsMovedVector.add(learningUnitViewElementsMoved[i]);
        learningUnitViewElementsMovedVector.insertElementAt(sourceElementId, 0);
        learningUnitViewElementsManager.setModified(true);
        learningUnitViewManager.fireLearningUnitViewEvent(FSLLearningUnitViewEvent.createElementsMovedEvent(learningUnitViewManager.getLearningUnitViewManagerId(),
            (String[]) learningUnitViewElementsMovedVector.toArray(
            new String[] { })));
    }
    
    
    protected void addChildNodes(DefaultMutableTreeNode parent, String elementId) {
        String[] childrenIds = learningUnitViewElementsManager.getChildrenIdsOfLearningUnitViewElement(elementId);
        for (int i = 0; i < childrenIds.length; i++) {
            DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(childrenIds[i]);
            parent.add(childNode);
            addChildNodes(childNode, childrenIds[i]);
        }
    }

    protected void setSelectedElement(String learningUnitViewElementId) {
        TreePath treePath = null;
        Enumeration allNodes = ((DefaultMutableTreeNode)getModel().getRoot()).breadthFirstEnumeration();
        while (allNodes.hasMoreElements()) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode)allNodes.nextElement();
            if (node.getUserObject() instanceof String) {
                if (((String)node.getUserObject()).equals(learningUnitViewElementId)) {
                    treePath = new TreePath(node.getPath());
                    if ((getSelectionPath() == null) || (getSelectionPath().getLastPathComponent() != node)) {
                        doNotFireSelectionEvent = true;
                    }
                }
            }
        }      
        if (treePath != null) {
            setSelectionPath(treePath);            
            scrollPathToVisible(getSelectionPath());
        }
    }
    
    protected void moveLearningUnitViewElement(String sourceElementId, String targetElementId) {
        if (learningUnitViewMoveElementDialog.showDialog(learningUnitViewElementsManager, targetElementId)) {
            FSLLearningUnitViewElement sourceElement =
                learningUnitViewElementsManager.getLearningUnitViewElement(sourceElementId, false);
            FSLLearningUnitViewElement targetElement =
                learningUnitViewElementsManager.getLearningUnitViewElement(targetElementId, false);
            learningUnitViewElementsManager.removeLearningUnitViewElement(sourceElementId);
            switch (learningUnitViewMoveElementDialog.getInsertCommand()) {
                case FSLLearningUnitViewMoveElementDialog.INSERT_BEFORE:
                    sourceElement.setParentId(targetElement.getParentId());
                    learningUnitViewElementsManager.insertLearningUnitViewElementBefore(sourceElement, targetElementId);
                    break;
                case FSLLearningUnitViewMoveElementDialog.INSERT_AFTER:
                    sourceElement.setParentId(targetElement.getParentId());
                    learningUnitViewElementsManager.insertLearningUnitViewElementAfter(sourceElement, targetElementId);
                    break;
                default:
                    sourceElement.setParentId(targetElementId);
                    learningUnitViewElementsManager.addLearningUnitViewElement(sourceElement,
                        learningUnitViewElementsManager.isOriginalElementsOnly());
                    break;
            }
            String[] learningUnitViewElementsMoved =
                learningUnitViewElementsManager.getDescendantIdsOfLearningUnitViewElement(sourceElementId);
            Vector learningUnitViewElementsMovedVector = new Vector();
            for (int i = 0; i < learningUnitViewElementsMoved.length; i++)
                learningUnitViewElementsMovedVector.add(learningUnitViewElementsMoved[i]);
            learningUnitViewElementsMovedVector.insertElementAt(sourceElementId, 0);
            learningUnitViewElementsManager.setModified(true);
            learningUnitViewManager.fireLearningUnitViewEvent(FSLLearningUnitViewEvent.createElementsMovedEvent(learningUnitViewManager.getLearningUnitViewManagerId(),
                (String[]) learningUnitViewElementsMovedVector.toArray(
                new String[] { })));
            buildDependentUI();
        }
    }

    class FSLTreeCellRenderer extends DefaultTreeCellRenderer {
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded,
            boolean leaf, int row, boolean hasFocus) {
                if (viewIsActive && value != null) {
                	if(value instanceof DefaultMutableTreeNode) {
                		if(((DefaultMutableTreeNode)value).getUserObject() != null) {
                			if (((DefaultMutableTreeNode)value).getUserObject() instanceof String  
                					&& learningUnitViewElementsManager != null 
                					&& learningUnitViewElementsManager.getLearningUnitViewElement((String)((DefaultMutableTreeNode)value).getUserObject(), false) != null) {
                				String elementId = (String)((DefaultMutableTreeNode)value).getUserObject();
                				if(elementId != null) {
	                				if (learningUnitViewElementsManager.isOriginalElementsOnly() ||
	                						learningUnitViewElementsManager.getLearningUnitViewUserElement(elementId) == null) {
	                					setTextNonSelectionColor(Color.black);
	                					setTextSelectionColor(Color.white);
	                					setBackgroundNonSelectionColor(null);
	                					setBackgroundSelectionColor(new Color(50, 50, 122));
	                				} else {
	                					if (learningUnitViewElementsManager.getLearningUnitViewOriginalElement(elementId) == null) {
	                						// a pure (!) user element
	                						setTextNonSelectionColor(new Color(0, 128, 0));
	                						setTextSelectionColor(new Color(255, 128, 255));
	                						setBackgroundNonSelectionColor(null);
	                						setBackgroundSelectionColor(new Color(50, 50, 122));
	                					} else {
	                						// an user element which overrides an original element
	                						setTextNonSelectionColor(Color.blue);
	                						setTextSelectionColor(new Color(255, 255, 0));
	                						setBackgroundNonSelectionColor(null);
	                						setBackgroundSelectionColor(new Color(50, 50, 122));
	                					}
	                				}
	                				
	                				if(secondaryActiveLearningUnitViewElementId != null) {
		                				if (elementId.equals(secondaryActiveLearningUnitViewElementId)) {
		                					setBackgroundNonSelectionColor(new Color(143, 142, 158));
		                					setTextNonSelectionColor(Color.white);
		                				}
	                				}
	                				
	                				if (elementId.equals(dropAllowedTargetElementId)) {
	                					setBackgroundNonSelectionColor(Color.yellow);
	                					setTextNonSelectionColor(Color.black);
	                				}
	                				if (elementId.equals(dropNotAllowedTargetElementId)) {
	                					setBackgroundNonSelectionColor(new Color(128, 0, 0));
	                					setTextNonSelectionColor(Color.white);
	                				}
                				
	                				super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
	                				
	                				setText(learningUnitViewElementsManager.getLearningUnitViewElement(elementId, false).getTitle());
				                    Icon treeNodeIcon = null;
				                    if (treeNodeIconProvider != null) {
				                        treeNodeIcon = treeNodeIconProvider.getElementsStructurePanelTreeNodeIcon(learningUnitViewElementsManager.getLearningUnitViewElement(elementId,
				                            false), leaf, selected, expanded);
				                    }
				                    if (treeNodeIcon != null) {
				                        if (tree.isEnabled()) {
				                            setIcon(treeNodeIcon);
				                        } else {
				                            setDisabledIcon(treeNodeIcon);
				                        }
				                    }
				                    
                				}
                			}
                		}
                	}
                } else {
                    super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
                }
                setOpaque(false);
                return this;
        }

        private Image loadImage(String imageFileName) {
            return FLGImageUtility.loadImageAndWait(getClass().getResource("images/" + imageFileName));
        }

        // the following method is required to get a transparent background
        public Color getBackground() {
            return null;
        }
    }


    class TreeMouseDragAndDropListener extends MouseAdapter implements MouseMotionListener {
        boolean dragging;

        public void mouseReleased(MouseEvent e) {
            if (dragging) {
                if (dropAllowedTargetElementId != null)
                    moveLearningUnitViewElement(dragSourceElementId, dropAllowedTargetElementId);
            }
            dragging = false;
            dragSourceElementId = null;
            dropAllowedTargetElementId = null;
            dropNotAllowedTargetElementId = null;
            repaint();
        }

        public void mousePressed(MouseEvent e) {
            if (editMode) {
                TreePath selPath = getPathForLocation(e.getX(), e.getY());
                if (selPath != null) {
                    String elementId = (String)((DefaultMutableTreeNode)selPath.getLastPathComponent()).getUserObject();
                    if (learningUnitViewElementsManager.isOriginalElementsOnly() ||
                        learningUnitViewElementsManager.getLearningUnitViewOriginalElement(elementId) == null) {
                            dragging = true;
                            dragSourceElementId = elementId;
                    }
                }
            }
        }

        public void mouseDragged(MouseEvent e) {
            if (dragging) {
                TreePath selPath = getPathForLocation(e.getX(), e.getY());
                String elementId = null;
                if (selPath != null)
                    elementId = (String)((DefaultMutableTreeNode)selPath.getLastPathComponent()).getUserObject();
                if (elementId != dragSourceElementId &&
                    !learningUnitViewElementsManager.isLearningUnitViewElementAncestor(dragSourceElementId, elementId)) {
                        dropAllowedTargetElementId = elementId;
                        dropNotAllowedTargetElementId = null;
                }
                else {
                    dropAllowedTargetElementId = null;
                    dropNotAllowedTargetElementId = elementId;
                }
                repaint();
            }
            Rectangle r = new Rectangle(e.getX(), e.getY(), 1, 1);
            scrollRectToVisible(r);
        }

        public void mouseMoved(MouseEvent e) {
            //            dragging = false;
        }
    }
    
    class FSLLearningUnitElementsStructureTree_KeyListener extends KeyAdapter {
        public void keyPressed(KeyEvent e) {
//            String keyString;
//            String keyStrokeString = KeyStroke.getAWTKeyStrokeForEvent(e).toString();
//            System.out.println("\nkeyStrokeString = " + keyStrokeString);
//            if (keyStrokeString.endsWith("-P")) {
//                keyString = keyStrokeString.substring(keyStrokeString.length() - 4);
//                if (keyString.startsWith(" ")) {
//                    keyString = keyString.substring(1,2);
//                    // selectElementForKeyStroke(keyString);
//                }
//            }
        }
    }

    class FSLLearningUnitElementsStructureTree_LearningUnitAdapter extends FSLLearningUnitVetoableAdapter {
        public void learningUnitUserViewChanged(FSLLearningUnitEvent event) {
            buildDependentUI();
        }

        public void learningUnitEditModeChanged(FSLLearningUnitEvent event) {
            editMode = event.isEditMode();
        }
    }

    class FSLLearningUnitElementsStructureTree_LearningUnitViewAdapter extends FSLLearningUnitViewVetoableAdapter {
        public void learningUnitViewActivated(FSLLearningUnitViewEvent event) {
            viewIsActive = true;
            buildDependentUI();
        }

        public void learningUnitViewDeactivated(FSLLearningUnitViewEvent event) {
            viewIsActive = true;
        }

        /**
         * @param FSLLearningUnitViewEvent event
         */
        public void learningUnitViewElementActivated(FSLLearningUnitViewEvent event) {
        	if (event.getLearningUnitViewManagerId().equals(learningUnitViewManager.getLearningUnitViewManagerId())) {
                activeLearningUnitViewElementId = event.getActiveLearningUnitViewElementId();
                secondaryActiveLearningUnitViewElementId = event.getSecondaryActiveLearningUnitViewElementId();
                setSelectedElement(activeLearningUnitViewElementId);
                    if (getSelectionPath() != null) {
                    fireTreeExpanded(getSelectionPath());
                }
            }
        }

        public void learningUnitViewElementsCreated(FSLLearningUnitViewEvent event) {
            if (event.getLearningUnitViewManagerId().equals(learningUnitViewManager.getLearningUnitViewManagerId())) {
                buildDependentUI();
            }
        }

        public void learningUnitViewElementsRemoved(FSLLearningUnitViewEvent event) {
            if (event.getLearningUnitViewManagerId().equals(learningUnitViewManager.getLearningUnitViewManagerId())) {
                buildDependentUI();
            }
        }

        public void learningUnitViewElementsModified(FSLLearningUnitViewEvent event) {
        	if (event.getEventType()==FSLLearningUnitViewEvent.VIEW_IMPORT) {
        		learningUnitViewManager.reloadLearningUnitViewData();
        	}
        	if (event.getLearningUnitViewManagerId().equals(learningUnitViewManager.getLearningUnitViewManagerId())) {
                buildDependentUI();
            }
        }
        
        public void learningUnitViewElementsUserVersionCreated(FSLLearningUnitViewEvent event) {
            if (event.getLearningUnitViewManagerId().equals(learningUnitViewManager.getLearningUnitViewManagerId())) {
                repaint();
            }
        }
    }
}
