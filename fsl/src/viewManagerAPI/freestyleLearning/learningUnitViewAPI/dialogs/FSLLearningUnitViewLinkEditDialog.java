/* Generated by Freestyle Learning Group */

package freestyleLearning.learningUnitViewAPI.dialogs;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.exceptions.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

public class FSLLearningUnitViewLinkEditDialog {
    public static final int FSL_LINK = 0;
    public static final int WEB_LINK = 1;
    public static final int OPENUSS_LINK = 2;
    private final int BORDER_WIDTH = 5;
    private FLGInternationalization internationalization;
    private FSLLearningUnitsActivator learningUnitsActivator;
    private FSLLearningUnitViewsActivator learningUnitViewsActivator;
    private JTabbedPane tabbedPane_linkSelection;
    private JPanel dialogContentComponent;
    private JPanel httpLinkEditInnerPanel;
    private JPanel openUssLinkEditInnerPanel;
    private JPanel fslLinkEditInnerPanel;
    private JPanel httpLinkEditPanel;
    private JPanel openUssLinkEditPanel;
    private JPanel openUssLinkUrlPanel;
    private JPanel openUssUserNamePanel;
    private JPanel openUssUserNameInnerPanel;
    private JPanel fslLinkPanel;
    private JComboBox comboBox_learningUnitSelection;
    private JComboBox comboBox_targetSelection;
    private JComboBox comboBox_viewSelection;
    private JButton button_loadLearningUnit;
    private JButton button_addLinkTarget;
    private JButton button_removeTarget;
    private JButton button_removeWebLink;
    private JButton button_removeOpenUssLink;
    private JButton button_setUserNameDefault;
    private JTextField httpLinkEditTextField;
    private JTextField openUssLinkEditTextField;
    private JTextField openUssUserNameTextField;
    private JPasswordField openUssUserPasswordTextField;
    private FSLLearningUnitViewLinkEditDialog_ElementsTree tree_learningUnitViewElements;
    private ActionListener comboBox_learningUnitSelection_listener;
    private ActionListener comboBox_viewSelection_listener;
    private ActionListener comboBox_linkTargetSelection_listener;
    private Vector linkTargets;
    private int currentLinkTargetIndex = -1;
    private int linkType = -1;
    private String selectedLearningUnitId;
    private String selectedLearningUnitViewManagerId;
    private String currentUserName;
    private String currentUserPassword;

    public FSLLearningUnitViewLinkEditDialog(FSLLearningUnitsActivator learningUnitsActivator,
        FSLLearningUnitViewsActivator learningUnitViewsActivator, String userName, String userPassword) {
            this.learningUnitsActivator = learningUnitsActivator;
            this.learningUnitViewsActivator = learningUnitViewsActivator;
            internationalization = new FLGInternationalization("freestyleLearning.learningUnitViewAPI.dialogs.internationalization",
                getClass().getClassLoader());
            currentUserName = userName;
            currentUserPassword = userPassword;
            buildIndependentUI();
    }

    public boolean showDialog(FSLLearningUnitViewElementLink learningUnitViewElementLink) {
        currentLinkTargetIndex = -1;
        buildDependentUI(learningUnitViewElementLink);
        tabbedPane_linkSelection.setSelectedIndex(FSL_LINK);
        linkType = FSL_LINK;
        httpLinkEditTextField.setText("http://");
        openUssLinkEditTextField.setText("http://");
        int returnValue = FLGOptionPane.showConfirmDialog(dialogContentComponent, internationalization.getString("dialog.editLink.title"),
            FLGOptionPane.OK_CANCEL_OPTION, FLGOptionPane.PLAIN_MESSAGE);
        if (returnValue == FLGOptionPane.OK_OPTION) {
            storeCurrentLinkTargetData();
        }
        return returnValue == FLGOptionPane.OK_OPTION;
    }

    public boolean showDialog(String linkId, int linkType) {
        currentLinkTargetIndex = -1;
        buildDependentUI(linkId, linkType);
        tabbedPane_linkSelection.setSelectedIndex(linkType);
        this.linkType = linkType;
        if (linkType == OPENUSS_LINK) {
            httpLinkEditTextField.setText("http://");
            setWebLinkComponentsEnabled(false);
        }
        else {
            openUssLinkEditTextField.setText("http://");
            setOpenUssLinkComponentsEnabled(false);
        }
        int returnValue = FLGOptionPane.showConfirmDialog(dialogContentComponent, internationalization.getString("dialog.editLink.title"),
            FLGOptionPane.OK_CANCEL_OPTION, FLGOptionPane.PLAIN_MESSAGE);
        if (returnValue == FLGOptionPane.OK_OPTION) {
            storeCurrentLinkTargetData();
        }
        return returnValue == FLGOptionPane.OK_OPTION;
    }

    private void setWebLinkComponentsEnabled(boolean enabled) {
        httpLinkEditTextField.setEnabled(enabled);
        button_removeWebLink.setEnabled(enabled);
    }

    private void setOpenUssLinkComponentsEnabled(boolean enabled) {
        openUssLinkEditTextField.setEnabled(enabled);
        openUssUserNameTextField.setEnabled(enabled);
        openUssUserPasswordTextField.setEnabled(enabled);
        button_removeOpenUssLink.setEnabled(enabled);
        button_setUserNameDefault.setEnabled(enabled);
    }

    public void setNewLinkTargets(FSLLearningUnitViewElementLink learningUnitViewElementLink) {
        if (learningUnitViewElementLink != null) {
            learningUnitViewElementLink.getLearningUnitViewElementLinkTargets().clear();
            for (int i = 0; i < linkTargets.size(); i++) {
                FSLLearningUnitViewLinkEditDialog_LinkTarget linkTarget =
                    (FSLLearningUnitViewLinkEditDialog_LinkTarget)linkTargets.get(i);
                learningUnitViewElementLink.addNewLearningUnitViewElementLinkTarget(linkTarget.learningUnitId,
                    linkTarget.learningUnitViewManagerId, linkTarget.learningUnitViewElementId);
            }
        }
    }

    private void buildIndependentUI() {
        // Main Content Panel
        dialogContentComponent = new JPanel(new BorderLayout());
        // Target Selection Panel
        JPanel targetSelectionPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JButton button_addLinkTarget = new JButton("+");
        JButton button_removeLinkTarget = new JButton("-");
        comboBox_targetSelection = new JComboBox();
        targetSelectionPanel.add(new JLabel(internationalization.getString("label.linkTargetNumber.text")));
        targetSelectionPanel.add(comboBox_targetSelection);
        targetSelectionPanel.add(button_addLinkTarget);
        targetSelectionPanel.add(button_removeLinkTarget);
        // HTTP-Link Edit Panel
        httpLinkEditInnerPanel = new JPanel(new FLGColumnLayout());
        httpLinkEditInnerPanel.setBorder(BorderFactory.createEmptyBorder(BORDER_WIDTH, BORDER_WIDTH,
            BORDER_WIDTH, BORDER_WIDTH));
        httpLinkEditTextField = new JTextField(20);
        httpLinkEditTextField.setText("http://");
        button_removeWebLink = new JButton(internationalization.getString("button.removeWebLink.text"));
        httpLinkEditInnerPanel.add(new JLabel(internationalization.getString("text.httpLink")), FLGColumnLayout.LEFTEND);
        httpLinkEditInnerPanel.add(httpLinkEditTextField, FLGColumnLayout.LEFT);
        httpLinkEditInnerPanel.add(button_removeWebLink, FLGColumnLayout.LEFTEND);
        // OpenUSS-Link Edit Panel
        openUssLinkEditInnerPanel = new JPanel(new FLGColumnLayout());
        openUssLinkEditInnerPanel.setBorder(BorderFactory.createEmptyBorder(BORDER_WIDTH, BORDER_WIDTH,
            BORDER_WIDTH, BORDER_WIDTH));
        openUssLinkEditTextField = new JTextField(20);
        openUssUserNameTextField = new JTextField(10);
        openUssUserPasswordTextField = new JPasswordField(10);
        button_removeOpenUssLink = new JButton(internationalization.getString("button.removeOpenUssLink.text"));
        button_setUserNameDefault = new JButton(internationalization.getString("button.setUserNameDefault.text"));
        button_setUserNameDefault.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    openUssUserNameTextField.setText(currentUserName);
                    openUssUserPasswordTextField.setText(currentUserPassword);
                }
            });
        openUssLinkUrlPanel = new JPanel(new FLGColumnLayout());
        openUssLinkUrlPanel.add(new JLabel(internationalization.getString("text.openUssLink")), FLGColumnLayout.LEFTEND);
        openUssLinkUrlPanel.add(openUssLinkEditTextField, FLGColumnLayout.LEFT);
        openUssLinkUrlPanel.add(button_removeOpenUssLink, FLGColumnLayout.LEFTEND);
        openUssUserNamePanel = new JPanel(new BorderLayout());
        openUssUserNamePanel.setBorder(BorderFactory.createTitledBorder(internationalization.getString("border.title.openUssUserName")));
        openUssUserNameInnerPanel = new JPanel(new FLGColumnLayout());
        openUssUserNameInnerPanel.setBorder(BorderFactory.createEmptyBorder(BORDER_WIDTH, BORDER_WIDTH,
            BORDER_WIDTH, BORDER_WIDTH));
        openUssUserNameInnerPanel.add(
            new JLabel(internationalization.getString("text.openUssUserName")), FLGColumnLayout.LEFT);
        openUssUserNameInnerPanel.add(openUssUserNameTextField, FLGColumnLayout.LEFT);
        openUssUserNameInnerPanel.add(button_setUserNameDefault, FLGColumnLayout.LEFTEND);
        openUssUserNameInnerPanel.add(
            new JLabel(internationalization.getString("text.openUssUserPassword")), FLGColumnLayout.LEFT);
        openUssUserNameInnerPanel.add(openUssUserPasswordTextField, FLGColumnLayout.LEFTEND);
        openUssUserNamePanel.add(openUssUserNameInnerPanel, BorderLayout.CENTER);
        openUssLinkEditInnerPanel.add(openUssLinkUrlPanel, FLGColumnLayout.LEFTEND);
        openUssLinkEditInnerPanel.add(openUssUserNamePanel, FLGColumnLayout.LEFTEND);
        // FSL-Element Link Edit Panel
        JPanel learningUnitSelectionPanel = new JPanel(new BorderLayout());
        fslLinkEditInnerPanel = new JPanel(new BorderLayout());
        fslLinkEditInnerPanel.setBorder(BorderFactory.createEmptyBorder(BORDER_WIDTH, BORDER_WIDTH,
            BORDER_WIDTH, BORDER_WIDTH));
        fslLinkEditInnerPanel.add(learningUnitSelectionPanel, BorderLayout.NORTH);
        comboBox_learningUnitSelection = new JComboBox();
        learningUnitSelectionPanel.add(comboBox_learningUnitSelection, BorderLayout.CENTER);
        button_loadLearningUnit = new JButton(internationalization.getString("button.loadLearningUnit.text"));
        learningUnitSelectionPanel.add(button_loadLearningUnit, BorderLayout.EAST);
        comboBox_viewSelection = new JComboBox();
        fslLinkEditInnerPanel.add(comboBox_viewSelection, BorderLayout.CENTER);
        tree_learningUnitViewElements = new FSLLearningUnitViewLinkEditDialog_ElementsTree();
        FLGScrollPane scrollPane = new FLGScrollPane(tree_learningUnitViewElements);
        scrollPane.setPreferredSize(new Dimension(300, 200));
        fslLinkEditInnerPanel.add(scrollPane, BorderLayout.SOUTH);
        httpLinkEditPanel = new JPanel(new BorderLayout());
        openUssLinkEditPanel = new JPanel(new BorderLayout());
        JPanel targetEditPanel = new JPanel(new BorderLayout());
        JPanel fslLinkEditPanel = new JPanel(new BorderLayout());
        httpLinkEditPanel.add(httpLinkEditInnerPanel, BorderLayout.CENTER);
        httpLinkEditPanel.setBorder(BorderFactory.createEmptyBorder(BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH));
        openUssLinkEditPanel.add(openUssLinkEditInnerPanel, BorderLayout.CENTER);
        openUssLinkEditPanel.setBorder(BorderFactory.createEmptyBorder(BORDER_WIDTH, BORDER_WIDTH,
            BORDER_WIDTH, BORDER_WIDTH));
        fslLinkEditPanel.setBorder(BorderFactory.createTitledBorder(internationalization.getString("text.fslLinkTarget")));
        fslLinkEditPanel.add(fslLinkEditInnerPanel, BorderLayout.CENTER);
        targetEditPanel.setBorder(BorderFactory.createTitledBorder(internationalization.getString("text.linkTarget")));
        targetEditPanel.add(fslLinkEditPanel, BorderLayout.NORTH);
        targetEditPanel.add(httpLinkEditPanel, BorderLayout.CENTER);
        fslLinkPanel = new JPanel(new BorderLayout());
        fslLinkPanel.setBorder(BorderFactory.createEmptyBorder(BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH));
        fslLinkPanel.add(targetSelectionPanel, BorderLayout.NORTH);
        fslLinkPanel.add(fslLinkEditPanel, BorderLayout.CENTER);
        // Put all Components into Tabbed Pane
        tabbedPane_linkSelection = new JTabbedPane();
        tabbedPane_linkSelection.addChangeListener(
            new ChangeListener() {
                public void stateChanged(ChangeEvent e) {
                    if (tabbedPane_linkSelection.getSelectedComponent() == fslLinkPanel) {
                        linkType = FSL_LINK;
                    }
                    else if (tabbedPane_linkSelection.getSelectedComponent() == httpLinkEditPanel) {
                        linkType = WEB_LINK;
                        // removeAllLinkTargets();
                    }
                    else if (tabbedPane_linkSelection.getSelectedComponent() == openUssLinkEditPanel) {
                        linkType = OPENUSS_LINK;
                        // removeAllLinkTargets();
                    }
                }
            });
        tabbedPane_linkSelection.addTab(internationalization.getString("tabbedPane.text.fslLink"), fslLinkPanel);
        tabbedPane_linkSelection.addTab(internationalization.getString("tabbedPane.text.webLink"), httpLinkEditPanel);
        // tabbedPane_linkSelection.addTab(internationalization.getString("tabbedPane.text.openUssLink"), openUssLinkEditPanel);
        dialogContentComponent.add(tabbedPane_linkSelection, BorderLayout.CENTER);
        comboBox_learningUnitSelection_listener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                learningUnitSelected(comboBox_learningUnitSelection.getSelectedIndex());
            }
        };
        comboBox_linkTargetSelection_listener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                linkTargetSelected(comboBox_targetSelection.getSelectedIndex());
            }
        };
        comboBox_viewSelection_listener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                viewSelected(comboBox_viewSelection.getSelectedIndex());
            }
        };
        button_loadLearningUnit.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    new Thread(
                        new Runnable() {
                            public void run() {
                                loadLearningUnit();
                            }
                        }).start();
                }
            });
        button_addLinkTarget.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    addLinkTarget();
                }
            });
        button_removeLinkTarget.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    removeLinkTarget(currentLinkTargetIndex);
                }
            });
        button_removeWebLink.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    tabbedPane_linkSelection.setSelectedIndex(FSL_LINK);
                    linkType = FSL_LINK;
                }
            });
        button_removeOpenUssLink.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    tabbedPane_linkSelection.setSelectedIndex(FSL_LINK);
                    linkType = FSL_LINK;
                }
            });
    }

    public int getLinkType() {
        return linkType;
    }

    private void buildDependentUI(FSLLearningUnitViewElementLink learningUnitViewElementLink) {
        linkTargets = new Vector();
        if (learningUnitViewElementLink != null) {
            for (int i = 0; i < learningUnitViewElementLink.getLearningUnitViewElementLinkTargets().size(); i++) {
                FSLLearningUnitViewElementLinkTarget linkTarget =
                    (FSLLearningUnitViewElementLinkTarget)learningUnitViewElementLink.getLearningUnitViewElementLinkTargets().get(i);
                linkTargets.add(
                    new FSLLearningUnitViewLinkEditDialog_LinkTarget(linkTarget.getTargetLearningUnitId(),
                    linkTarget.getTargetLearningUnitViewManagerId(), linkTarget.getTargetLearningUnitViewElementId()));
            }
        }
        buildComboBoxTargetSelection();
        buildLearningUnitSelectionArea();
        buildComboBoxViewSelection();
        buildTreeElementSelection();
    }

    private void buildDependentUI(String linkUrl, int linkType) {
        linkTargets = new Vector();
        buildComboBoxTargetSelection();
        buildLearningUnitSelectionArea();
        buildComboBoxViewSelection();
        buildTreeElementSelection();
        switch (linkType) {
            case OPENUSS_LINK: {
                    setOpenUssInputFields(linkUrl);
                    break;
                }
            case WEB_LINK: {
                    setHttpLinkInputFields(linkUrl);
                    break;
                }
        }
    }

    private void setHttpLinkInputFields(String linkUrl) {
        httpLinkEditTextField.setText(linkUrl);
    }

    private void setOpenUssInputFields(String linkUrl) {
        // parse URL for username and password
        int questionMarkIndex = linkUrl.lastIndexOf("?");
        String url = linkUrl.substring(0, questionMarkIndex);
        int andSignIndex = linkUrl.lastIndexOf("&");
        int openUssUserNameTextLength = internationalization.getString("openUSS.userName").length();
        int openUssPasswordTextLength = internationalization.getString("openUSS.password").length();
        if (questionMarkIndex > 0 && andSignIndex > 0) {
            String userName = linkUrl.substring(questionMarkIndex + openUssUserNameTextLength + 2, andSignIndex);
            String password = linkUrl.substring(andSignIndex + openUssPasswordTextLength + 2, linkUrl.length());
            // set input fields
            openUssLinkEditTextField.setText(url);
            openUssUserNameTextField.setText(userName);
            openUssUserPasswordTextField.setText(password);
            httpLinkEditTextField.setText("http://");
        }
        else {
            linkType = WEB_LINK;
            setHttpLinkInputFields(linkUrl);
        }
    }

    private void buildComboBoxTargetSelection() {
        comboBox_targetSelection.removeActionListener(comboBox_linkTargetSelection_listener);
        comboBox_targetSelection.removeAllItems();
        for (int i = 0; i < linkTargets.size(); i++) {
            comboBox_targetSelection.addItem("" + (i + 1));
        }
        if (linkTargets.size() > 0) currentLinkTargetIndex = 0;
        else
            currentLinkTargetIndex = -1;
        comboBox_targetSelection.addActionListener(comboBox_linkTargetSelection_listener);
    }

    private void buildLearningUnitSelectionArea() {
        comboBox_learningUnitSelection.removeActionListener(comboBox_learningUnitSelection_listener);
        comboBox_learningUnitSelection.removeAllItems();
        String[] learningUnitIds = learningUnitsActivator.getInstalledLearningUnitsIds();
        for (int i = 0; i < learningUnitIds.length; i++)
            comboBox_learningUnitSelection.addItem(learningUnitsActivator.getLearningUnitTitle(learningUnitIds[i]));
        if (currentLinkTargetIndex >= 0) {
            selectedLearningUnitId = ((FSLLearningUnitViewLinkEditDialog_LinkTarget)linkTargets.get(currentLinkTargetIndex)).learningUnitId;
            for (int i = 0; i < learningUnitIds.length; i++) {
                if (learningUnitIds[i].equals(selectedLearningUnitId)) {
                    comboBox_learningUnitSelection.setSelectedIndex(i);
                }
            }
        }
        else {
            selectedLearningUnitId = null;
        }
        comboBox_learningUnitSelection.addActionListener(comboBox_learningUnitSelection_listener);
        enableSelectionComponents(selectedLearningUnitId != null);
    }

    private void enableSelectionComponents(boolean enabled) {
        comboBox_learningUnitSelection.setEnabled(enabled);
        button_loadLearningUnit.setEnabled(enabled);
    }

    public String getHttpLinkUrl() {
        return httpLinkEditTextField.getText();
    }

    public String getOpenUssLinkUrl() {
        String userName = openUssUserNameTextField.getText();
        char[] passwordChars = openUssUserPasswordTextField.getPassword();
        // okok, mama says: don't put password into Strings!
        // but here we want do code: the password!
        StringBuffer passwordBuffer = new StringBuffer();
        passwordBuffer.append(passwordChars);
        String password = new String(passwordBuffer);
        try {
            String codedPassword = FLGCryptoUtilities.encrypt(passwordChars, password);
            System.out.println("password plain: " + password);
            System.out.println("password coded: " + codedPassword);
        }
        catch (Exception e) {
            System.out.println(e);
        }
        String openUssUserNameText = internationalization.getString("openUSS.userName");
        String openUssPasswordText = internationalization.getString("openUSS.password");
        return openUssLinkEditTextField.getText() + "?" + openUssUserNameText + "=" + userName + "&" +
            openUssPasswordText + "=" + password;
    }

    private void buildComboBoxViewSelection() {
        comboBox_viewSelection.removeActionListener(comboBox_viewSelection_listener);
        comboBox_viewSelection.removeAllItems();
        if (selectedLearningUnitIsLoaded()) {
            String[] viewManagersIds = learningUnitsActivator.getLearningUnitViewManagersIdsOfLearningUnit(selectedLearningUnitId);
            if (viewManagersIds != null) {
                for (int i = 0; i < viewManagersIds.length; i++) {
                    comboBox_viewSelection.addItem(learningUnitViewsActivator.getLearningUnitViewManager(viewManagersIds[i]).getLearningUnitViewManagerTitle());
                }
                comboBox_viewSelection.addItem("---");
                selectedLearningUnitViewManagerId = ((FSLLearningUnitViewLinkEditDialog_LinkTarget)
                    linkTargets.get(currentLinkTargetIndex)).learningUnitViewManagerId;
                for (int i = 0; i < viewManagersIds.length; i++) {
                    if (viewManagersIds[i].equals(selectedLearningUnitViewManagerId)) {
                        comboBox_viewSelection.setSelectedIndex(i);
                    }
                }
                if (selectedLearningUnitViewManagerId.equals("none")) {
                    comboBox_viewSelection.setSelectedIndex(viewManagersIds.length);
                }
            }
            else {
                selectedLearningUnitViewManagerId = null;
            }
        }
        else {
            selectedLearningUnitViewManagerId = null;
        }
        comboBox_viewSelection.addActionListener(comboBox_viewSelection_listener);
        comboBox_viewSelection.setEnabled(currentLinkTargetIndex >= 0);
    }

    private boolean selectedLearningUnitIsLoaded() {
        if (selectedLearningUnitId != null) {
            String[] managerIds = learningUnitsActivator.getLearningUnitViewManagersIdsOfLearningUnit(selectedLearningUnitId);
            if (managerIds == null) return false;
            FSLLearningUnitViewManager viewManager = learningUnitViewsActivator.getLearningUnitViewManager(managerIds[0]);
            if (viewManager == null) return false;
            if (viewManager.getLearningUnitViewElementsManager(selectedLearningUnitId) == null) {
                return false;
            }
            return true;            
        }
        return false;
    }

    private void buildTreeElementSelection() {
        if (selectedLearningUnitViewManagerId != null && !selectedLearningUnitViewManagerId.equals("none")) {
            FSLLearningUnitViewLinkEditDialog_LinkTarget target =
                (FSLLearningUnitViewLinkEditDialog_LinkTarget)linkTargets.get(currentLinkTargetIndex);
            FSLLearningUnitViewManager viewManager =
                learningUnitViewsActivator.getLearningUnitViewManager(selectedLearningUnitViewManagerId);
            tree_learningUnitViewElements.buildDependentUI(viewManager.getLearningUnitViewElementsManager(selectedLearningUnitId));
            tree_learningUnitViewElements.setSelectedElement(target.learningUnitViewElementId);
        }
        else {
            tree_learningUnitViewElements.buildDependentUI(null);
            tree_learningUnitViewElements.setSelectedElement(null);
        }
    }

    private void removeAllLinkTargets() {
        linkTargets.removeAllElements();
        buildComboBoxTargetSelection();
        buildLearningUnitSelectionArea();
        buildComboBoxViewSelection();
        buildTreeElementSelection();
        linkTargetSelected(-1);
    }

    private void removeLinkTarget(int linkTargetIndex) {
        int newCurrentLinkTargetIndex;
        currentLinkTargetIndex = -1;
        if (linkTargets.size() > 0) {
            linkTargets.removeElementAt(linkTargetIndex);
            if (linkTargets.size() == 0) {
                newCurrentLinkTargetIndex = -1;
            }
            else {
                newCurrentLinkTargetIndex = 0;
            }
            buildComboBoxTargetSelection();
            buildLearningUnitSelectionArea();
            buildComboBoxViewSelection();
            buildTreeElementSelection();
            linkTargetSelected(newCurrentLinkTargetIndex);
        }
    }

    private void addLinkTarget() {
        String learningUnitId = learningUnitsActivator.getActiveLearningUnitId();
        FSLLearningUnitViewLinkEditDialog_LinkTarget newTarget =
            new FSLLearningUnitViewLinkEditDialog_LinkTarget(learningUnitId, "none", "none");
        linkTargets.add(newTarget);
        comboBox_targetSelection.addItem("" + linkTargets.size());
        comboBox_targetSelection.setSelectedIndex(linkTargets.size() - 1);
    }

    private void loadLearningUnit() {
        try {
            learningUnitsActivator.loadLearningUnit(selectedLearningUnitId);
            buildComboBoxViewSelection();
            buildTreeElementSelection();
        }
        catch (FSLLearningUnitNotInstalledException e) {
            FLGOptionPane.showMessageDialog(e.getMessage(), internationalization.getString("title.error.loadingLearningUnit"),
                FLGOptionPane.ERROR_MESSAGE);
        }
    }

    private void storeCurrentLinkTargetData() {
        if (currentLinkTargetIndex >= 0) {
            FSLLearningUnitViewLinkEditDialog_LinkTarget target =
                (FSLLearningUnitViewLinkEditDialog_LinkTarget)linkTargets.get(currentLinkTargetIndex);
            target.learningUnitId = selectedLearningUnitId;
            if (selectedLearningUnitViewManagerId != null)
                target.learningUnitViewManagerId = selectedLearningUnitViewManagerId;
            else
                target.learningUnitViewManagerId = "none";
            if (tree_learningUnitViewElements.getSelectedElementId() != null)
                target.learningUnitViewElementId = tree_learningUnitViewElements.getSelectedElementId();
            else
                target.learningUnitViewElementId = "none";
        }
    }

    private void linkTargetSelected(int selectedLinkTargetIndex) {
        storeCurrentLinkTargetData();
        currentLinkTargetIndex = selectedLinkTargetIndex;
        buildLearningUnitSelectionArea();
        buildComboBoxViewSelection();
        buildTreeElementSelection();
    }

    private void learningUnitSelected(int selectedLearningUnitIndex) {
        selectedLearningUnitId = learningUnitsActivator.getInstalledLearningUnitsIds() [selectedLearningUnitIndex];
        FSLLearningUnitViewLinkEditDialog_LinkTarget target =
            (FSLLearningUnitViewLinkEditDialog_LinkTarget)linkTargets.get(currentLinkTargetIndex);
        target.learningUnitId = selectedLearningUnitId;
        buildComboBoxViewSelection();
        buildTreeElementSelection();
    }

    private void viewSelected(int selectedViewIndex) {
        if (selectedViewIndex >= 0) {
            String[] learningUnitViewManagersIds = learningUnitsActivator.getLearningUnitViewManagersIdsOfLearningUnit(selectedLearningUnitId);
            if (selectedViewIndex < learningUnitViewManagersIds.length) {
                selectedLearningUnitViewManagerId = learningUnitViewManagersIds[selectedViewIndex];
                FSLLearningUnitViewLinkEditDialog_LinkTarget target =
                    (FSLLearningUnitViewLinkEditDialog_LinkTarget)linkTargets.get(currentLinkTargetIndex);
                target.learningUnitViewManagerId = selectedLearningUnitViewManagerId;
            }
            else {
                selectedLearningUnitViewManagerId = "none";
            }
        }
        buildTreeElementSelection();
    }

    class FSLLearningUnitViewLinkEditDialog_ElementsTree extends JTree {
        private FSLLearningUnitViewElementsManager learningUnitViewElementsManager;

        public FSLLearningUnitViewLinkEditDialog_ElementsTree() {
            setRootVisible(false);
            setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
            setCellRenderer(new FSLTreeCellRenderer());
            buildDependentUI(null);
        }

        public void buildDependentUI(FSLLearningUnitViewElementsManager learningUnitViewElementsManager) {
            this.learningUnitViewElementsManager = learningUnitViewElementsManager;
            DefaultMutableTreeNode root = new DefaultMutableTreeNode(new Integer(0));
            if (learningUnitViewElementsManager != null) {
                String[] topLevelElementIds = learningUnitViewElementsManager.getTopLevelLearningUnitViewElementsIds();
                for (int i = 0; i < topLevelElementIds.length; i++) {
                    DefaultMutableTreeNode node = new DefaultMutableTreeNode(topLevelElementIds[i]);
                    root.add(node);
                    addChildNodes(learningUnitViewElementsManager, node, topLevelElementIds[i]);
                }
            }
            DefaultTreeModel treeModel = new DefaultTreeModel(root);
            setModel(treeModel);
        }

        private void addChildNodes(FSLLearningUnitViewElementsManager learningUnitViewElementsManager,
            DefaultMutableTreeNode parent, String elementId) {
                String[] childrenIds = learningUnitViewElementsManager.getChildrenIdsOfLearningUnitViewElement(elementId);
                for (int i = 0; i < childrenIds.length; i++) {
                    DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(childrenIds[i]);
                    parent.add(childNode);
                    addChildNodes(learningUnitViewElementsManager, childNode, childrenIds[i]);
                }
        }

        private void setSelectedElement(String learningUnitViewElementId) {
            if (learningUnitViewElementId != null) {
                Enumeration allNodes = ((DefaultMutableTreeNode)getModel().getRoot()).breadthFirstEnumeration();
                while (allNodes.hasMoreElements()) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode)allNodes.nextElement();
                    if (node.getUserObject() instanceof String) {
                        if (((String)node.getUserObject()).equals(learningUnitViewElementId)) {
                            setSelectionPath(new TreePath(node.getPath()));
                        }
                    }
                }
            }
            else {
                this.clearSelection();
            }
        }

        private String getSelectedElementId() {
            DefaultMutableTreeNode selectedNode = null;
            if (getSelectionPath() != null)
                selectedNode = (DefaultMutableTreeNode)getSelectionPath().getLastPathComponent();
            if (selectedNode != null && selectedNode.getUserObject() instanceof String) {
                return (String)selectedNode.getUserObject();
            }
            return null;
        }

        class FSLTreeCellRenderer extends DefaultTreeCellRenderer {
            public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded,
                boolean leaf, int row, boolean hasFocus) {
                    super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
                    if (((DefaultMutableTreeNode)value).getUserObject() instanceof String &&
                        learningUnitViewElementsManager != null &&
                        learningUnitViewElementsManager.getLearningUnitViewElement((String)((DefaultMutableTreeNode)value).getUserObject(), false) != null) {
                            String elementId = (String)((DefaultMutableTreeNode)value).getUserObject();
                            setText(learningUnitViewElementsManager.getLearningUnitViewElement(elementId, false).getTitle());
                    }
                    return this;
            }
        }
    }


    class FSLLearningUnitViewLinkEditDialog_LinkTarget {
        public FSLLearningUnitViewLinkEditDialog_LinkTarget(String learningUnitId, String learningUnitViewManagerId,
            String learningUnitViewElementId) {
                this.learningUnitId = learningUnitId;
                this.learningUnitViewManagerId = learningUnitViewManagerId;
                this.learningUnitViewElementId = learningUnitViewElementId;
        }

        public String learningUnitId;
        public String learningUnitViewManagerId;
        public String learningUnitViewElementId;
    }
}
