/* Generated by Freestyle Learning Group */

package freestyleLearning.learningUnitViewAPI;

import java.awt.*;
import java.io.*;
import java.net.*;
import javax.swing.*;

import freestyleLearning.learningUnitViewAPI.contextDependentInteractionPanel.FSLLearningUnitViewContextDependentInteractionPanel;
import freestyleLearning.learningUnitViewAPI.elementInteractionPanel.FSLLearningUnitViewElementInteractionPanel;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.FSLLearningUnitViewElementsContentsPanel;
import freestyleLearning.learningUnitViewAPI.elementsStructurePanel.FSLLearningUnitViewElementsStructurePanel;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEventGenerator;
import freestyleLearning.learningUnitViewAPI.statusPanel.FSLLearningUnitViewStatusPanel;
import freestyleLearningGroup.independent.util.FLGLongLastingOperationStatus;

/**
 * For every view exists one implementing class of this interface.
 * It declares all functionality that is required for a LearningUnitViewManager-Object
 * to work within the LearningUnitView-API.
 */
public interface FSLLearningUnitViewManager extends FSLLearningUnitViewEventGenerator {
    /**
     * will be called only once in a lifetime of a learning unit manager learningUnitViewManagerCodeDirectory: the directory
     * of the code of this manager (manager.jar and all additional files)
     */
    void init(FSLLearningUnitsActivator learningUnitsActivator, FSLLearningUnitViewsActivator learningUnitViewsActivator,
        FSLLearningUnitEventGenerator learningUnitEventGenerator, String learningUnitViewManagerId,
        String learningUnitViewManagerTitle, File learningUnitViewManagerCodeDirectory, boolean editMode,
        boolean originalElementsOnly, FLGLongLastingOperationStatus progressStatus);
    
    FSLLearningUnitViewElementsManager getLearningUnitViewElementsManager();
    
    FSLLearningUnitViewElementsManager getLearningUnitViewElementsManager(String learningUnitId);
    
    String getLearningUnitViewManagerId();
    
    String getLearningUnitViewManagerTitle();
    
    String getLearningUnitViewManagerTitle(String learningUnitViewManagerId);
    
    public FSLLearningUnitViewXMLDocument loadLearningUnitViewXMLDocument(File file);
  
    public FSLLearningUnitViewElementsManager createElementsManagerFromXMLDocuments(FSLLearningUnitViewXMLDocument originalDocument,
    		FSLLearningUnitViewXMLDocument userDocument, File learningUnitViewOriginalDataDirectory,
    		File learningUnitViewUserDataDirectory);
    
    double getLearningUnitViewProgressStatus();
    
    /** 
     * Returns true, if folder import is supprted by view manager. Default value is false. 
     * Value should be overwirtten by subclass if it supports folder import.
     * @return <code>boolean</code> folderImportSupported 
     */
    public boolean folderImportSupported();
    
    /**
     * Method for setting type for imported folder files in learning unit view element descriptor.
     * @param <code>java.util.List</code> importedFiles
     * @param <code>java.util.List</code> newElementdIds
     * @param <code>String</code> fileType
     */
    public void setElementSpecififcFileProperties(java.util.List importedFiles, java.util.List newElementdIds, String fileType);
    
    /**
     * Method for inserting own components for folder import.
     * Returns folder component. This method has to be overwritten from subclasses if they have their own components.
     * @return <code>boolean</code> component for folder import
     */
    public boolean getFolderImportComponent();
    
    public boolean getFolderComponent();
    
    /**
     * Carsten Fiedler, 21.08.2006
     * Returns FileFilter for supported files
     */
    public FileFilter getImportFileFilter(); 
    
    /**
     * Support for finding elements from search results
     * @param <code>contentFileName</code> may be content file (.html) or description file (.xml)
     * @return Learning Unit View Element corresponding to content file, <code>null</code> if searching not supported
     */
    FSLLearningUnitViewElement findLearningUnitViewElement(String contentFileName);
    
    String getLearningUnitTitle(String learningUnitId);
    
    // called only from outside
    boolean setActiveLearningUnitViewElementId(String activeLearningUnitViewElementId,
    String secondaryActiveLearningUnitViewElementId);
    
    String getActiveLearningUnitViewElementId();
    
    String findLearningUnitViewElementId(String searchResult);
    
    String getHtmlContentFileName(String learningUnitViewElementId);
    
    File getLearningUnitViewOriginalDataDirectory();
    
    File getLearningUnitViewUserDirectory();
    
    boolean supportsImportStructure();
    
    void importStructure(FSLLearningUnitViewElementsManager sourceElementsManager);
    
    boolean supportsAutomaticLink();
    
    FSLLearningUnitViewElementLink addLearningUnitViewElementLinkTarget(String linkId, FSLLearningUnitViewElementLinkTarget target, FSLLearningUnitViewElement learningUnitViewElement);

    FSLLearningUnitViewElementLink addLearningUnitViewElementLink(FSLLearningUnitViewElementLinkTarget target, FSLLearningUnitViewElement element);
    
    void updateUI();
    
    void introduceLearningUnitViewManager(FSLLearningUnitViewManager learningUnitViewManager);
    
    boolean isContextDependentLearningUnitViewManager();
    
    // The learning unit view subdirectory of the current learning unit
    void loadLearningUnitViewData(String learningUnitId, File learningUnitViewOriginalDataDirectory,
        File learningUnitViewUserDataDirectory);
    
    boolean saveLearningUnitViewData();
    
    boolean saveAsLearningUnitViewData(String targetLearningUnitId, String targetLearningUnitViewDataDirectoryName);
    
    boolean isModified();
    
    boolean getEditMode();
    
    boolean getUserRoleIsAuthor();
    
    FSLLearningUnitViewElementsContentsPanel getElementsContentsPanel();
    
    FSLLearningUnitViewElementsStructurePanel getElementsStructurePanel();
    
    //added by Gunnar Thies
    
    /* returns contextDependentInteractionPanel */
    
    FSLLearningUnitViewContextDependentInteractionPanel getContextDependentInteractionPanel();
    
    //Gunnar Thies finished.
    FSLLearningUnitViewElementInteractionPanel getElementInteractionPanel();
    
    FSLLearningUnitViewStatusPanel getStatusPanel();
    
    JPanel getAssistantPanel();
    
    FSLLearningUnitViewPrimaryActivationButton getPrimaryActivationButton();
    
    FSLLearningUnitViewSecondaryActivationButton getSecondaryActivationButton();
    
    FSLLearningUnitViewContextDependentActivationButton getContextDependentActivationButton();
    
    FSLLearningUnitViewElement activateContextDependentElement(String learningUnitViewManagerId,
    String learningUnitViewElementId, boolean originalElementsOnly);
    
    JPanel getSettingsPanel();
    
    String getSettingsPanelTitle();
    
    URL getMainHelpPageUrl();
    
    URL getContextSensitiveHelpPageUrl();
    
    String getElementsTitleById(String learningUnitViewElementId);
    
    boolean getPrintAllPossibility();
    
    /**
     * called when the user selects this learning unit view
     * or a hyperlink is beeing followed into another view
     * it will be called before getElementContentPanel, etc. is called
     */
    void activate(boolean followingHyperlink);
    
    /**
     * called when the user leaves this learning unit view
     * for example, when he selects another learning unit view
     */
    void deactivate();
    
    /**
     * called when learning unit data files changed externally
     * and should be reloaded
     */
    void reloadLearningUnitViewData();
    
    String[] getLearningUnitViewElementIdsToSearchString(String searchString);
    
    void followLearningUnitViewElementLink(String learningUnitViewElementLinkId, String learningUnitViewElementId);
    
    Component getPrintableComponent();
    
    Component getPrintableComponent(String elementId);
    
    /**
     * called when content is to be printed
     * if this method return null, FSL uses a default printing implementation
     */
    java.awt.print.Printable getDocumentRenderer();
    
    void setCurrentUserData(String userName, String userPassword);
    
    String editLearningUnitViewElementLink(String learningUnitViewElementLinkId, String learningUnitViewElementId);
    
    public FSLLearningUnitEventGenerator getLearningUnitEventGenerator();
}
