/* Generated by Freestyle Learning Group */

package freestyleLearning.learningUnitViewAPI.elementsContentsPanel;

import java.awt.Image;
import javax.swing.*;
import javax.swing.event.*;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

abstract public class FSLAbstractLearningUnitViewElementContentPanel extends JPanel {
    protected FSLLearningUnitViewElementsManager learningUnitViewElementsManager;
    protected FSLLearningUnitViewElementContentEditToolBar editToolBar;
    protected FSLLearningUnitViewElementContentLeftEditToolBar leftEditToolBar;
    protected String learningUnitViewElementId;
    protected FSLLearningUnitViewManager learningUnitViewManager;
    protected boolean editMode;
    protected boolean active;
    protected boolean activeLearningUnitViewElementPanel;
    protected String activeLearningUnitTitle;
    
    public void init(FSLLearningUnitViewManager learningUnitViewManager,
        FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
//System.out.println("\nFSLAbstractLearningUnitViewElementContentPanel.init()");
            this.editMode = editMode;
            this.learningUnitViewManager = learningUnitViewManager;
//System.out.println("step 2");
            learningUnitViewManager.addLearningUnitViewListener(
                new FSLLearningUnitViewElementContentPanel_LearningUnitViewAdapter());
//System.out.println("step 3");
            learningUnitEventGenerator.addLearningUnitListener(
                new FSLLearningUnitViewElementContentPanel_LearningUnitAdapter());
//System.out.println("step 4");
            editToolBar = new FSLLearningUnitViewElementContentEditToolBar();
            editToolBar.setVisible(editMode);
//System.out.println("step 5");
            leftEditToolBar = new FSLLearningUnitViewElementContentLeftEditToolBar();
            leftEditToolBar.setVisible(editMode);
//System.out.println("step 6");
            buildIndependentUI();
//System.out.println("step 7");
            editToolBar.init(getEditToolBarComponents());
            leftEditToolBar.init(getLeftEditToolBarComponents());
//System.out.println("done.");
    }
    
    public void setLearningUnitViewElementsManager(FSLLearningUnitViewElementsManager learningUnitViewElementsManager) {
        this.learningUnitViewElementsManager = learningUnitViewElementsManager;
        learningUnitViewElementId = null;
        if (active) buildDependentUI(false);
    }
    
    public void setLearningUnitViewElementId(String learningUnitViewElementId, boolean reloadIfAlreadyLoaded) {
        this.learningUnitViewElementId = learningUnitViewElementId;
        if (active) buildDependentUI(reloadIfAlreadyLoaded);
    }
    
    public void setLearningUnitViewElementId(String learningUnitViewElementId) {
        setLearningUnitViewElementId(learningUnitViewElementId, true);
    }
    
    FSLLearningUnitViewElementContentEditToolBar getEditToolBar() {
        return this.editToolBar;
    }
    
    FSLLearningUnitViewElementContentLeftEditToolBar getLeftEditToolBar() {
        return this.leftEditToolBar;
    }
    
    protected void setActiveLearningUnitViewElementPanel(boolean active) {
        boolean previouslyActive = activeLearningUnitViewElementPanel;
        this.activeLearningUnitViewElementPanel = active;
        if (active && !previouslyActive) buildDependentUI(false);
    }
    
    protected Image loadImage(String imageFileName) {
        return FLGImageUtility.loadImageAndWait(getClass().getResource(imageFileName));
    }
    
    protected java.awt.Component getPrintableComponent() {
        return this;
    }
    
    abstract protected void buildIndependentUI();
    
    abstract protected void buildDependentUI(boolean reloadIfAlreadyLoaded);
    
    abstract protected JComponent[] getEditToolBarComponents();
    
    // Not abstract since most Learning Unit Views do not have
    // a left edit toolbar; must be overwritten for usage.
    protected JComponent[] getLeftEditToolBarComponents() {
        return null;
    }
    
    abstract protected boolean isModifiedByUserInput();
    
    abstract protected void saveUserChanges();
    
    public class FSLLearningUnitViewElementContentPanel_HyperlinkAdapter implements HyperlinkListener {
        public void hyperlinkUpdate(HyperlinkEvent e) {
            if (e.getEventType() == HyperlinkEvent.EventType.ENTERED) {
                String linkTargetLabel = "---";
                String url = e.getURL().toString();
                String learningUnitViewElementLinkId = url.substring(url.lastIndexOf("/") + 1);
                // FSL-Link?
                if (learningUnitViewElementLinkId.startsWith("l")) {
                    FSLLearningUnitViewElement learningUnitViewElement = learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
                    FSLLearningUnitViewElementLink learningUnitViewElementLink = learningUnitViewElement.getLearningUnitViewElementLink(learningUnitViewElementLinkId);
                    java.util.List linkTargets = null;
                    if (learningUnitViewElementLink != null)
                        linkTargets = learningUnitViewElementLink.getLearningUnitViewElementLinkTargets();
                    if (linkTargets != null && linkTargets.size() > 0) {
                        int linkTargetIndex = 0;
                        FSLLearningUnitViewElementLinkTarget linkTarget =
                        (FSLLearningUnitViewElementLinkTarget)linkTargets.get(0);
                        String managerId = learningUnitViewManager.getLearningUnitViewManagerTitle(linkTarget.getTargetLearningUnitViewManagerId());
                        String learningUnitTitle = learningUnitTitle =
                        learningUnitViewManager.getLearningUnitTitle(linkTarget.getTargetLearningUnitId());
                        linkTargetLabel = learningUnitTitle + " - " + managerId;
                    }
                }
                // HTTP-Link
                else {
                    linkTargetLabel = url;
                }
                FSLLearningUnitViewEvent event = FSLLearningUnitViewEvent.createHyperlinkViewEvent(linkTargetLabel,
                FSLLearningUnitViewEvent.HYPERLINK_ENTERED);
                learningUnitViewManager.fireLearningUnitViewEvent(event);
            }
            if (e.getEventType() == HyperlinkEvent.EventType.EXITED) {
                FSLLearningUnitViewEvent event = FSLLearningUnitViewEvent.createHyperlinkViewEvent(null,
                FSLLearningUnitViewEvent.HYPERLINK_EXITED);
                learningUnitViewManager.fireLearningUnitViewEvent(event);
            }
            if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                String url = e.getURL().toString();
                if (url.startsWith("http")) {
                    // web link: open web Browser
                    FLGPlatformSpecifics.startExternalApplication(url);
                }
                else {
                    // follow FSL-Link
                    String linkId = url.substring(url.lastIndexOf("/") + 1);
                    learningUnitViewManager.followLearningUnitViewElementLink(linkId, learningUnitViewElementId);
                    // to display link element, quit full screen mode
                    FSLLearningUnitViewEvent event = FSLLearningUnitViewEvent.createFullScreenModeChangedEvent(learningUnitViewManager.getLearningUnitViewManagerId(),
                    learningUnitViewElementId, false, false);
                    learningUnitViewManager.fireLearningUnitViewEvent(event);
                }
            }
        }
    }
    
    
    class FSLLearningUnitViewElementContentPanel_LearningUnitAdapter extends FSLLearningUnitVetoableAdapter {
        public void learningUnitActivated(FSLLearningUnitEvent event) {
            activeLearningUnitTitle = event.getLearningUnitTitle();
        }
        
        public void learningUnitUserViewChanged(FSLLearningUnitEvent event) {
            if (active) buildDependentUI(true);
        }
        
        public void learningUnitEditModeChanged(FSLLearningUnitEvent event) {
            editMode = event.isEditMode();
            editToolBar.setVisible(editMode);
            leftEditToolBar.setVisible(editMode);
            if (active) buildDependentUI(false);
        }
    }
    
    
    class FSLLearningUnitViewElementContentPanel_LearningUnitViewAdapter extends FSLLearningUnitViewVetoableAdapter {
        public void learningUnitViewActivated(FSLLearningUnitViewEvent event) {
            active = true;
            buildDependentUI(false);
        }
        
        public void learningUnitViewDeactivated(FSLLearningUnitViewEvent event) {
            active = false;
        }
        
        public void learningUnitViewElementsRemoved(FSLLearningUnitViewEvent event) {
            for (int i = 0; i < event.getLearningUnitViewElementIds().length; i++) {
                String elementId = event.getLearningUnitViewElementIds() [i];
                if (elementId.equals(learningUnitViewElementId)) {
                    learningUnitViewElementId = null;
                    buildDependentUI(true);
                }
            }
        }
        
        public void learningUnitViewElementLinksRemoved(FSLLearningUnitViewEvent event) {
            if (event.getLearningUnitViewManagerId().equals(learningUnitViewManager.getLearningUnitViewManagerId())) {
                if (learningUnitViewElementId != null &&
                event.getLearningUnitViewElementId().equals(learningUnitViewElementId)) {
                    buildDependentUI(true);
                }
            }
        }
    }
}
