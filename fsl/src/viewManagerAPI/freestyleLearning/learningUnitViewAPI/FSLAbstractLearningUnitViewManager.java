/* Generated by Freestyle Learning Group */

package freestyleLearning.learningUnitViewAPI;

import freestyleLearning.homeCore.learningUnitsManager.*;
import freestyleLearning.learningUnitViewAPI.contextDependentInteractionPanel.*;
import freestyleLearning.learningUnitViewAPI.dialogs.*;
import freestyleLearning.learningUnitViewAPI.elementInteractionPanel.*;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.*;
import freestyleLearning.learningUnitViewAPI.elementsStructurePanel.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.*;
import freestyleLearning.learningUnitViewAPI.statusPanel.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

import java.io.*;
import java.awt.BorderLayout;
import java.net.URL;
import java.util.*;
import javax.swing.*;
import javax.xml.bind.Dispatcher;

/**
 * This class is an abstract implementation of the FSLLearningUnitViewManager-Interface.
 * It can be used as a superclass for user-defined LearningUnitView-Managers.
 * See method description for further information about the implemented code.
 * @author Freestyle Learning Group
 */
abstract public class FSLAbstractLearningUnitViewManager implements FSLLearningUnitViewManager {
    private FSLAbstractLearningUnitViewManager_LearningUnitViewAdapter learningUnitViewAdapter;
    private FSLLearningUnitViewLinkEditDialog learningUnitViewLinkEditDialog;
    private String lastLoadedLearningUnitId;
    private Vector learningUnitViewListeners;
    private String activeLearningUnitViewElementId;
    private String secondaryActiveLearningUnitViewElementId;
    private FLGInternationalization internationalization;
    protected String LEARNING_UNIT_VIEW_DATA_FILENAME = "contents.xml";
    protected FSLLearningUnitViewsActivator learningUnitViewsActivator;
    protected String selectedLearningUnitViewElementId;
    protected String learningUnitViewManagerId;
    protected String learningUnitViewManagerTitle;
    protected File learningUnitViewManagerCodeDirectory;
    protected boolean active;
    protected boolean editMode;
    protected boolean originalElementsOnly;
    protected Hashtable learningUnitViewElementsManagerCache;
    protected FSLLearningUnitViewElementsManager learningUnitViewElementsManager;
    protected FSLLearningUnitViewElementsManager lastLoadedLearningUnitViewElementsManager;
    protected boolean cachingEnabled = true;
    protected FSLLearningUnitEventGenerator learningUnitEventGenerator;
    protected FSLLearningUnitViewContextDependentInteractionPanel contextDependentInteractionPanel;
    protected FSLLearningUnitViewElementsStructurePanel elementsStructurePanel;
    protected FSLLearningUnitViewElementsContentsPanel elementsContentsPanel;
    protected FSLLearningUnitViewElementInteractionPanel elementInteractionPanel;
    protected FSLLearningUnitViewStatusPanel statusPanel;
    protected FSLLearningUnitsActivator learningUnitsActivator;
    protected File currentLearningUnitViewOriginalDataDirectory;
    protected File currentLearningUnitViewUserDataDirectory;
    protected String currentLearningUnitId;
    protected String currentLearningUnitTitle;
    protected String userName;
    protected String userPassword;
    protected boolean userRoleIsAuthor;
    protected boolean folderImportSupported = false;

    /**
     * Invoked only once after instantiating this class for initializing.
     * Listeners for LearningUnitEvents and LearningUnitViewEvent are being genetated and registered.
     * @param <code>learningUnitsActivator</code>				- implementation of a FSLLearningUnitsActivator
     * @param <code>learningUnitViewsActivator</code>			- implementation of a FSLLearningUnitViewsActivator
     * @param <code>learningUnitEventGenerator</code>			- implementation of a FSLLearningUnitEventGenerator
     * @param <code>learningUnitViewManagerId</code>			- ID to be set for this FSLLearningUnitViewManager
     * @param <code>learningUnitViewManagerTitle</code>			- Title to be set for this FSLLearningUnitViewManager
     * @param <code>learningUnitViewManagerCodeDirectory</code>	- Directory for manager classes and any additional
     * 															  files (not data-directory!)
     * @param <code>editMode</code>								- EditMode status
     * @param <code>originalElementsOnly</code>					- <code>true</code> for user in author role
     * @param <code>progressStatus</code>						- reference for updating progress dialog
     */
    public void init(FSLLearningUnitsActivator learningUnitsActivator, FSLLearningUnitViewsActivator learningUnitViewsActivator, 
    	FSLLearningUnitEventGenerator learningUnitEventGenerator, String learningUnitViewManagerId, 
    		String learningUnitViewManagerTitle, File learningUnitViewManagerCodeDirectory,
    			boolean editMode, boolean originalElementsOnly, FLGLongLastingOperationStatus progressStatus) {
            // set Event-Generators and register Listeners
    	this.learningUnitsActivator = learningUnitsActivator;
        this.learningUnitViewsActivator = learningUnitViewsActivator;
        this.learningUnitEventGenerator = learningUnitEventGenerator;
        learningUnitEventGenerator.addLearningUnitListener(new FSLAbstractLearningUnitViewManager_LearningUnitAdapter());
        // set view-specific data
        this.learningUnitViewManagerId = learningUnitViewManagerId;
        this.learningUnitViewManagerTitle = learningUnitViewManagerTitle;
        this.learningUnitViewManagerCodeDirectory = learningUnitViewManagerCodeDirectory;
        // set status properties
        this.editMode = editMode;
        this.originalElementsOnly = originalElementsOnly;
        // init tour creator capture button
        this.selectedLearningUnitViewElementId = null;
        ((FSLLearningUnitsManager)learningUnitsActivator).getTourCreatorCaptureButton().setEnabled(false);
        // prepare this View Manager to become a LearningUnitViewEvent-Generator
        learningUnitViewListeners = new Vector();
        learningUnitViewAdapter = new FSLAbstractLearningUnitViewManager_LearningUnitViewAdapter();
        addLearningUnitViewListener(learningUnitViewAdapter);
        // initialize
        learningUnitViewElementsManagerCache = new Hashtable();
        internationalization = new FLGInternationalization("freestyleLearning.learningUnitViewAPI.internationalization",
        		getClass().getClassLoader());
    }

    /** 
     * Returns true, if folder import is supprted by view manager. Default value is false. 
     * Value should be overwirtten by subclass if it supports folder import.
     * @return <code>boolean</code> folderImportSupported 
     */
    public boolean folderImportSupported() {
    	return folderImportSupported;
    }
    
    /**
     * @return <code>boolean</code> true if view manager does not use own component
     */
    public boolean getFolderImportComponent() {
    	return true;
    }
    
    /**
     * @return <code>boolean</code> true if default folder component is used
     */
    public boolean getFolderComponent() {
    	return true;
    }
    
    /**
     * Method for setting type for imported folder files in learning unit view element descriptor.
     * @param <code>java.util.List</code> importedFiles
     * @param <code>java.util.List</code> newElementdIds
     * @param <code>String</code> fileType
     */
    public void setElementSpecififcFileProperties(java.util.List importedFiles, java.util.List newElementdIds, String fileType) {}
    
    /**
     * Returns FileFilter for supported files.
     * @return <code>FileFilter</code> file filter for supported files
     */
    public FileFilter getImportFileFilter() {
    	return null;
    }

    /**
     *  Invoked when user changes the LearningUnitView or a link to another view is followed
     *  @param <code>boolean</code> followingHyperlink
     */
    public void activate(boolean followingHyperlink) {
        active = true;
       ((FSLLearningUnitsManager)learningUnitsActivator).getTourCreatorCaptureButton().setEnabled(selectedLearningUnitViewElementId != null);
        fireLearningUnitViewEvent(FSLLearningUnitViewEvent.createViewActivatedEvent(learningUnitViewManagerId,
            followingHyperlink));
    }

    /** Invoked when user changes the LearningUnitView or a link to another view is followed */
    public void deactivate() {
        this.active = false;
        fireLearningUnitViewEvent(FSLLearningUnitViewEvent.createViewDeactivatedEvent(learningUnitViewManagerId));
        activeLearningUnitViewElementId = null;
    }

    /** Returns the Id for this LearningUnitViewManager */
    public String getLearningUnitViewManagerId() {
        return learningUnitViewManagerId;
    }

    /** Returns Title for this LearningUnitViewManager */
    public String getLearningUnitViewManagerTitle() {
        return learningUnitViewManagerTitle;
    }
    
    /** 
     * Returns path to HTML document file.
     * Invoked by Default HTML print routine.
     * To be overwritten in specific view managers if default HTML print routine 
     * should be available.
     * @param <code>String</code> learningUnitViewElementId
     * @return <code>String</code> html content file name
     */
    public String getHtmlContentFileName(String learningUnitViewElementId) {
        return null;
    }

    /**
     * Returns panel that contains ContextDependentInteractionPanel
     * @return contextDependentInteractionPanel
     */
    public FSLLearningUnitViewContextDependentInteractionPanel getContextDependentInteractionPanel() {
        return contextDependentInteractionPanel;
    }

    /** Returns Title for any LearningUnitViewManager with given LearningUnitViewManagerId */
    public String getLearningUnitViewManagerTitle(String learningUnitViewManagerId) {
        if (learningUnitViewsActivator.getLearningUnitViewManager(learningUnitViewManagerId) != null) {
            return learningUnitViewsActivator.getLearningUnitViewManager(learningUnitViewManagerId).getLearningUnitViewManagerTitle();
        }
        else
            return internationalization.getString("message.managerUnknown.text");
    }

    /** Returns Title for any LearningUnit with given LearningUnitId */
    public String getLearningUnitTitle(String learningUnitId) {
        if (learningUnitsActivator.getLearningUnitTitle(learningUnitId) != null) {
            return learningUnitsActivator.getLearningUnitTitle(learningUnitId);
        }
        else
            return internationalization.getString("message.unitUnknown.text");
    }

    /**
     * Support for finding elements from search results. Must be overwritten by each Learning Unit View Manager.
     * If not, this default implementation returns null and no search results can be displayed.
     * @param <code>contentFileName</code> may be content file (.html) or description file (.xml)
     * @return Hashtable with Learning Unit View Element properties corresponding to content file, <code>null</code> if
     * searching not supported
     */
    public FSLLearningUnitViewElement findLearningUnitViewElement(String contentFileName) {
        return null;
    }

    /**
     * Invoked to decide if this LearningUnitViewManager is a context-dependent Manager.
     * Context-dependent managers are being activated from the ElementInteractionPanel and contain
     * data referring to the ViewElement where it has been activated from. The data hold by the
     * ElementsManager of a context-dependent Manager has to be re-constructed from the data of
     * the activating Manager. Default implementation is a non-context-dependent LearningUnitViewManager. For
     * context-dependent Managers this method has to be overwritten. <p>
     * @return <code>true</code> if this instance is to work as a Context-Dependent LearningUnitViewManager
     */
    public boolean isContextDependentLearningUnitViewManager() {
        return false;
    }

    /** Returns panel that contains ElementsContentPanels */
    public FSLLearningUnitViewElementsContentsPanel getElementsContentsPanel() {
        return elementsContentsPanel;
    }

    /** Returns the StructurePanel which displays the LearningUnitViewElement Tree */
    public FSLLearningUnitViewElementsStructurePanel getElementsStructurePanel() {
        return elementsStructurePanel;
    }

    public FSLLearningUnitEventGenerator getLearningUnitEventGenerator() {
        return learningUnitEventGenerator;
    }

    /** Returns the panel for interaction with the selected LearningUnitViewElement */
    public FSLLearningUnitViewElementInteractionPanel getElementInteractionPanel() {
        return elementInteractionPanel;
    }

    /** Returns the panel that displays status information about the selected LearningUnitViewElement */
    public FSLLearningUnitViewStatusPanel getStatusPanel() {
        return statusPanel;
    }

    /** Returns the panel where the assistant can place pictures and videos for user interaction */
    public JPanel getAssistantPanel() {
        return new FLGEffectPanel(FSLAbstractLearningUnitViewManager.class.getClassLoader().getResource("freestyleLearning/learningUnitViewAPI/images/defaultAssistant.gif"), false);
    }

    /** Invokes the UI update on panels displayed */
    public void updateUI() {
        if (elementsContentsPanel != null) elementsContentsPanel.updateUI();
        if (elementsStructurePanel != null) elementsStructurePanel.updateUI();
        if (elementInteractionPanel != null) elementInteractionPanel.updateUI();
        if (statusPanel != null) statusPanel.updateUI();
    }

    /**
     * Invoked when the <code>freestyleLearning.homeCore.learningUnitsManager.FSLLearningViewsManager</code>
     * decides to read the LearningUnitView content from XML-file. Author and User Data are being
     * read and stored in the ElementsManager. If enabled, caching is supported. <p>
     * @param 	<code>learningUnitId</code>							- ID for LearningUnitManager
     * @param 	<code>learningUnitViewOriginalDataDirectory</code>	- Directory for Author Data
     * @param 	<code>learningUnitViewUserDataDirectory</code>		- Directory for User Data
     */
    public void loadLearningUnitViewData(String learningUnitId, File learningUnitViewOriginalDataDirectory,
        File learningUnitViewUserDataDirectory) {
            currentLearningUnitId = learningUnitId;
            currentLearningUnitViewOriginalDataDirectory = learningUnitViewOriginalDataDirectory;
            currentLearningUnitViewUserDataDirectory = learningUnitViewUserDataDirectory;
            FSLLearningUnitViewElementsManager learningUnitViewElementsManagerToLoad = null;
            // if caching enabled, use ID to get manager instance
            if (cachingEnabled) {
                learningUnitViewElementsManagerToLoad =
                    (FSLLearningUnitViewElementsManager)learningUnitViewElementsManagerCache.get(learningUnitId);
            }
            // manager not present yet, so create it with XML-data content
            if (learningUnitViewElementsManagerToLoad == null) {
                FSLLearningUnitViewXMLDocument originalData =
                    loadLearningUnitViewXMLDocument(
                    new File(learningUnitViewOriginalDataDirectory, LEARNING_UNIT_VIEW_DATA_FILENAME));
                FSLLearningUnitViewXMLDocument userData =
                    loadLearningUnitViewXMLDocument(
                    new File(learningUnitViewUserDataDirectory, LEARNING_UNIT_VIEW_DATA_FILENAME));
                learningUnitViewElementsManagerToLoad =
                    createElementsManagerFromXMLDocuments(originalData, userData, learningUnitViewOriginalDataDirectory,
                    learningUnitViewUserDataDirectory);
//                if (cachingEnabled)
                    learningUnitViewElementsManagerCache.put(learningUnitId, learningUnitViewElementsManagerToLoad);
                lastLoadedLearningUnitViewElementsManager = learningUnitViewElementsManagerToLoad;
            }
    }

    /**
     * Invoked to force re-loading of data contained in descriptor file.
     * useful if external changes have been made to descriptor file.
     */
    public void reloadLearningUnitViewData() {
        boolean cachingWasEnabled = cachingEnabled;
        cachingEnabled = false;
        loadLearningUnitViewData(currentLearningUnitId, currentLearningUnitViewOriginalDataDirectory, currentLearningUnitViewUserDataDirectory);
        setLearningUnitViewElementsManager((FSLLearningUnitViewElementsManager)learningUnitViewElementsManagerCache.get(currentLearningUnitId));
        cachingEnabled = cachingWasEnabled;
    }


    /**
     * Invoked to save LearningUnitViewElement-Data to XML-file.
     * Every LearningUnitViewElement from the ElementsManager is written as a separate
     * <code>viewElement</code>-entry to the XML content file. If the XML-structure does not directly match
     * the desired element-structure, this method has to be overwritten. <p>
     * @return - <code>true</code> if saving could be safely performed
     */
    public boolean saveLearningUnitViewData() {
        boolean savingOK = true;
        elementsContentsPanel.saveUserChanges();
        FSLLearningUnitViewXMLDocument document;
        // save original (author) data
        if (learningUnitViewElementsManager.isOriginalElementsModified()) {
            document = createXMLDocumentFromElementsManager(learningUnitViewElementsManager, true);
            savingOK = saveLearningUnitViewXMLDocument(document,
                new File(learningUnitViewElementsManager.getLearningUnitViewOriginalDataDirectory(),
                LEARNING_UNIT_VIEW_DATA_FILENAME));
            if (savingOK) {
                learningUnitViewElementsManager.setOriginalElementsModified(false);
                removeUnnecessaryExternalElementFiles(true);
            }
            else return false;
        }
        // save user data
        if (learningUnitViewElementsManager.isUserElementsModified()) {
            document = createXMLDocumentFromElementsManager(learningUnitViewElementsManager, false);
            savingOK = saveLearningUnitViewXMLDocument(document,
                new File(learningUnitViewElementsManager.getLearningUnitViewUserDataDirectory(),
                LEARNING_UNIT_VIEW_DATA_FILENAME));
            if (savingOK) {
                learningUnitViewElementsManager.setUserElementsModified(false);
                removeUnnecessaryExternalElementFiles(false);
            }
            else return false;
        }
        // everything done, return ok
        return savingOK;
    }

    /**
     * Invoked to save current LearningUnitView Data to a new data directory. <p>
     * @param	<code>targetLearningUnitId</code>                     - new ID for LearningUnit
     * @param	<code>targetLearningUnitViewDataDirectoryName</code>  - new directory name for LearningUnit
     * @return	<code>true</code> if saving was successfull
     */
    public boolean saveAsLearningUnitViewData(String targetLearningUnitId, String targetLearningUnitViewDataDirectoryName) {
        if (cachingEnabled) {
            learningUnitViewElementsManagerCache.remove(currentLearningUnitId);
            learningUnitViewElementsManagerCache.put(targetLearningUnitId, learningUnitViewElementsManager);
        }
        learningUnitViewElementsManager.setLearningUnitViewDataDirectoryName(targetLearningUnitViewDataDirectoryName);
        currentLearningUnitId = targetLearningUnitId;
        return saveLearningUnitViewData();
    }

    /**
     * Enable/Disable caching for LearningUnitView Managers <p>
     * @param <code>enabled</code> - <code>true</code> to enable caching
     */
    public void setCachingEnabled(boolean enabled) {
        this.cachingEnabled = enabled;
    }

    /**
     * Invoked by FSLLearningUnitViewsManager to determine if current data in memory differs from XML-content <p>
     * @return <code>true</code> if data has been modified
     */
    public boolean isModified() {
        return learningUnitViewElementsManager.isOriginalElementsModified() ||
            learningUnitViewElementsManager.isUserElementsModified() || elementsContentsPanel.isModified();
    }

    /**
     * Invoked by Objects that implement the FSLLearningUnitViewListener-Interface to register as a listener for
     * LearningUnitViewEvents. <p>
     * @param <code>listener</code> - instance that wants to register as a listener for LearningUnitViewEvents
     */
    public void addLearningUnitViewListener(FSLLearningUnitViewListener listener) {
        learningUnitViewListeners.add(listener);
    }

    /**
     * Invoked by Objects that implement the FSLLearningUnitViewListener-Interface to un-register as a listener for
     * LearningUnitViewEvents. <p>
     * @param <code>listener</code> - instance that wants to be deleted from the list of LearningUnitViewEvents
     */
    public void removeLearningUnitViewListener(FSLLearningUnitViewListener listener) {
        learningUnitViewListeners.remove(listener);
    }

    /**
     * Invoked to send a LearningUnitViewEvent to registered listeners <p>
     * @param <code>event</code> - event object to send to listeners
     */
    public void fireLearningUnitViewEvent(FSLLearningUnitViewEvent event) {
        for (int i = 0; i < learningUnitViewListeners.size(); i++) {
            FSLLearningUnitViewListener learningUnitViewListener =
                (FSLLearningUnitViewListener)learningUnitViewListeners.get(i);
            switch (event.getEventType()) {
                case FSLLearningUnitViewEvent.LEARNING_UNIT_F2_ACTION:
                    learningUnitViewListener.performF2SpecificAction(event); 
                    break;
                case FSLLearningUnitViewEvent.ELEMENTS_SELECTED:
                    learningUnitViewListener.learningUnitViewElementsSelected(event);
                    break;
                case FSLLearningUnitViewEvent.ELEMENT_ACTIVATED:
                    learningUnitViewListener.learningUnitViewElementActivated(event);
                    break;
            	case FSLLearningUnitViewEvent.VIEW_IMPORT:
            		learningUnitViewListener.learningUnitViewElementsModified(event);
            		break;
                case FSLLearningUnitViewEvent.ELEMENTS_CREATED:
                    learningUnitViewListener.learningUnitViewElementsCreated(event);
                    break;
                case FSLLearningUnitViewEvent.ELEMENTS_MODIFIED:
                    learningUnitViewListener.learningUnitViewElementsModified(event);
                    break;
                case FSLLearningUnitViewEvent.ELEMENTS_MOVED:
                    learningUnitViewListener.learningUnitViewElementsMoved(event);
                    break;
                case FSLLearningUnitViewEvent.ELEMENTS_REMOVED:
                    learningUnitViewListener.learningUnitViewElementsRemoved(event);
                    break;
                case FSLLearningUnitViewEvent.ELEMENTS_USER_VERSION_CREATED:
                    learningUnitViewListener.learningUnitViewElementsUserVersionCreated(event);
                    break;
                case FSLLearningUnitViewEvent.ELEMENT_LINKS_REMOVED:
                    learningUnitViewListener.learningUnitViewElementLinksRemoved(event);
                    break;
                case FSLLearningUnitViewEvent.VIEW_ACTIVATED:
                    learningUnitViewListener.learningUnitViewActivated(event);
                    break;
                case FSLLearningUnitViewEvent.VIEW_DEACTIVATED:
                    learningUnitViewListener.learningUnitViewDeactivated(event);
                    break;
                case FSLLearningUnitViewEvent.VIEW_SPECIFIC_EVENT_OCCURRED:
                     learningUnitViewListener.learningUnitViewSpecificEventOccurred(event);
                    break;
                case FSLLearningUnitViewEvent.FULL_SCREEN_SELECTED:
                    learningUnitViewListener.learningUnitViewFullScreenModeSelected(event);
                    break;
                case FSLLearningUnitViewEvent.SCALE_MODE_CHANGED:
                    learningUnitViewListener.learningUnitViewScaleModeChanged(event);
                    break;
                case FSLLearningUnitViewEvent.HYPERLINK_ACTIVATED:
                    learningUnitViewListener.learningUnitViewHyperlinkActivated(event);
                    break;
                case FSLLearningUnitViewEvent.HYPERLINK_ENTERED:
                    learningUnitViewListener.learningUnitViewHyperlinkEntered(event);
                    break;
                case FSLLearningUnitViewEvent.HYPERLINK_EXITED:
                    learningUnitViewListener.learningUnitViewHyperlinkExited(event);
                    break;
                case FSLLearningUnitViewVetoableEvent.ELEMENT_ACTIVATING:
                    if (learningUnitViewListener instanceof FSLLearningUnitViewVetoableListener) {
                        FSLLearningUnitViewVetoableEvent vetoableEvent = (FSLLearningUnitViewVetoableEvent)event;
                        ((FSLLearningUnitViewVetoableListener)learningUnitViewListener).learningUnitViewElementActivating(vetoableEvent);
                        if (vetoableEvent.isVeto()) return;
                    }
                    break;
                case FSLLearningUnitViewVetoableEvent.ELEMENTS_REMOVING:
                    if (learningUnitViewListener instanceof FSLLearningUnitViewVetoableListener) {
                        FSLLearningUnitViewVetoableEvent vetoableEvent = (FSLLearningUnitViewVetoableEvent)event;
                        ((FSLLearningUnitViewVetoableListener)learningUnitViewListener).learningUnitViewElementsRemoving(vetoableEvent);
                        if (vetoableEvent.isVeto()) return;
                    }
                    break;
                case FSLLearningUnitViewVetoableEvent.VIEW_SPECIFIC_EVENT_OCCURRING:
                    if (learningUnitViewListener instanceof FSLLearningUnitViewVetoableListener) {
                        FSLLearningUnitViewVetoableEvent vetoableEvent = (FSLLearningUnitViewVetoableEvent)event;
                        ((FSLLearningUnitViewVetoableListener)learningUnitViewListener).learningUnitViewSpecificEventOccurring(vetoableEvent);
                        if (vetoableEvent.isVeto()) return;
                    }
                    break;
                case FSLLearningUnitViewVetoableEvent.VIEW_DEACTIVATING:
                    if (learningUnitViewListener instanceof FSLLearningUnitViewVetoableListener) {
                        FSLLearningUnitViewVetoableEvent vetoableEvent = (FSLLearningUnitViewVetoableEvent)event;
                        ((FSLLearningUnitViewVetoableListener)learningUnitViewListener).learningUnitViewDeactivating(vetoableEvent);
                        if (vetoableEvent.isVeto()) return;
                    }
                    break;
            }
        }
    }

    /**
     * Invoked to get a reference to the current ElementsManager. <p>
     * @return Reference to LearningUnitViewElementsManager
     */
    public FSLLearningUnitViewElementsManager getLearningUnitViewElementsManager() {
        return lastLoadedLearningUnitViewElementsManager;
    }

    /**
     * Invoked to get a reference to the ElementsManager of a certain LearningUnit. <p>
     * @param <code>learningUnitId</code> - ID of LearningUnit
     * @return Reference to LearningUnitViewElementsManager
     */
    public FSLLearningUnitViewElementsManager getLearningUnitViewElementsManager(String learningUnitId) {
        if (learningUnitId.equals(this.currentLearningUnitId))
            return learningUnitViewElementsManager;
        else if (cachingEnabled)
            return (FSLLearningUnitViewElementsManager)learningUnitViewElementsManagerCache.get(learningUnitId);
        else
            return null;
    }

    /**
     * Invoked when the Print-Function has been selected. Returns the active component that is to be fit and printed to paper.
     * Default function is to delegate request for printable component to FSLElementsContentsPanel of
     * current LearningUnitView. <p>
     * @return Component to print
     */
    public java.awt.Component getPrintableComponent() {
        return elementsContentsPanel.getPrintableComponent();
    }

    /**
     * Invoked when the Print-Function has been selected. Returns a component labeled by an ElementId that is to be fit and
     * printed to paper. This method can be used to print a selected set of elements at a time. Default function is to
     * delegate request for printable component to FSLElementsContentsPanel of current LearningUnitView. <p>
     * @param <code>elementId</code> - ID of LearningUnitViewElement to print
     * @return Component to print
     */
    public java.awt.Component getPrintableComponent(String elementId) {
        return elementsContentsPanel.getPrintableComponent(elementId);
    }
    
    /**
     * Invoked when the Print-Function has been selected. 
     * Returns a document renderer suitable for printing the view element content
     * To be overwritten if a View Manager should not use default FSL printing implementation.
     * @return Renderer for printing element content
     */
    public java.awt.print.Printable getDocumentRenderer() {
        return null;
    }

    /**
     * Invoked when a primary (and secondary) LearningUnitViewElement is to be activated.
     * First, a VetoableEvent is fired, and if no veto has been set, the final Event for activation is fired. <p>
     * @param <code>activeLearningUnitViewElementId</code> - ID for primary active LearningUnitViewElement
     * @param <code>secondaryActiveLearningUnitViewElementId</code> - ID for secondary active LearningUnitViewElement
     * @return <code>true</code> if ElementActivatedEvent has been fired
     */
    public boolean setActiveLearningUnitViewElementId(String activeLearningUnitViewElementId,
        String secondaryActiveLearningUnitViewElementId) {
            boolean activated = false;
            FSLLearningUnitViewVetoableEvent vetoableEvent =
                FSLLearningUnitViewVetoableEvent.createElementActivatingEvent(getLearningUnitViewManagerId(),
                activeLearningUnitViewElementId, secondaryActiveLearningUnitViewElementId, false);
            fireLearningUnitViewEvent(vetoableEvent);
            if (!vetoableEvent.isVeto()) {
                FSLLearningUnitViewEvent event = FSLLearningUnitViewEvent.createElementActivatedEvent(getLearningUnitViewManagerId(),
                    activeLearningUnitViewElementId, secondaryActiveLearningUnitViewElementId, false);
                fireLearningUnitViewEvent(event);
                activated = true;
            }
            return activated;
    }

    /** Returns ID for current active LearningUnitViewElement. */
    public String getActiveLearningUnitViewElementId() {
        return activeLearningUnitViewElementId;
    }

    /** Finds element ID for a given content/descriptor file Must be overwritten if view manager supports FSL search function */
    public String findLearningUnitViewElementId(String searchResult) {
        return null;
    }

    /**
     * Returns button instance to be displayed in the Primary Activation Area in the MainFrame Window.
     * If return value is null, this instance is not regarded as a Primary View.
     * For this instance to be handled as a Primary View, this method has to be overwritten. <p>
     * @return Button instance to be displayed in Primary Activation Area
     */
    public FSLLearningUnitViewPrimaryActivationButton getPrimaryActivationButton() {
        return null;
    }

    /**
     * Returns button instance to be displayed in the Secondary Activation Area in the MainFrame Window.
     * If return value is null, this instance is not regarded as a Secondary View.
     * For this instance to be handled as a Secondary View, this method has to be overwritten. <p>
     * @return Button instance to be displayed in Secondary Activation Area
     */
    public FSLLearningUnitViewSecondaryActivationButton getSecondaryActivationButton() {
        return null;
    }

    /**
     * Returns button instance to be displayed as a Context-Dependent Activation Button in the ElementInteractionPanel.
     * For this instance to be handled as a Context-Dependent View, this method has to be overwritten. <p>
     * @return Button instance to be displayed in the ElementInteractionPanel for context-dependent activation
     */
    public FSLLearningUnitViewContextDependentActivationButton getContextDependentActivationButton() {
        return null;
    }

    /**
     * Invoked to activate a Context-Dependent LearningUnitViewElement.
     * To be overwritten by ViewManagers which provide a Context-Dependent activation button. <p>
     * @param <code>learningUnitViewManagerId</code> - ID of Manager from where the Context-Dependent
     * Element has been activated
     * @param <code>learningUnitViewElementId</code> - ID of Element from where the Context-Dependent
     * Element has been activated
     * @param <code>originalElementsOnly</code> - <code>true</code> if user is currently in author role
     */
    public FSLLearningUnitViewElement activateContextDependentElement(String learningUnitViewManagerId,
        String learningUnitViewElementId, boolean originalElementsOnly) {
            return null;
    }

    /** This Method is not implemented yet. */
    public JPanel getSettingsPanel() {
        return null;
    }

    /** This Method is not implemented yet. */
    public String getSettingsPanelTitle() {
        return null;
    }
    
    /**
     * Use this method to control role-sensitive features within view manager components
     * @return <code>true</code> if current user is logged in as Author
     */
    public boolean getUserRoleIsAuthor() {
        return userRoleIsAuthor;
    }

    /**
     * This Method returns an java.net.URL to the mainHelpPage packed with a specific ViewManager .jar-package.
     * Must be overwritten by subclasses of this abstract manager if online help should be available.
     * @return <code>URL</code> to main help page
     */
    public URL getMainHelpPageUrl() {
        return null;
    }

    public URL getContextSensitiveHelpPageUrl() {
        return null;
    }
    
    public void activateGuidedTourButton(boolean activate) {
    	((FSLLearningUnitsManager)learningUnitsActivator).getTourCreatorCaptureButton().setEnabled(activate);
    }
    
    public String getElementsTitleById(String learningUnitViewElementId) {
        return null;
    }
    
    public boolean getPrintAllPossibility() {
        return false;
    }

    /** This Method is not implemented yet. */
    public String[] getLearningUnitViewElementIdsToSearchString(String searchString) {
        return null;
    }

    /**
     * Set current User Data in LearningUnitViewManager. Used for direct access to OpenUSS contents. <p>
     * @param <code>userName</code> - Current User Name
     * @param <code>userPassword</code> - Current User Password
     */
    public void setCurrentUserData(String userName, String userPassword) {
        this.userName = userName.toLowerCase();
        this.userPassword = userPassword;
    }

    /**
     * Invoked when in Edit-Mode the Link-Edit Button has been pressed. A Link Edit Dialog is shown for editing <ul>
     * <li>FSL-Links <li>Web-Links <li>Links to OpenUSS-Platform </ul>
     * If in the selected text area a link already exists, is will be pre-selected in dialog.
     * In case a link has been created or modified, the Link-ID will be returned and written
     * into corresponding html-file of current LearningUnitViewElement. <p>
     * @param <code>learningUnitViewElementLinkId</code> - Link ID, may be null for new links
     * @param <code>learningUnitViewElementId</code> - ID for target LearningUnitViewElements, may be null for non-FSL-links
     * @return ID for created or modified link
     */
    public String editLearningUnitViewElementLink(String learningUnitViewElementLinkId, String learningUnitViewElementId) {
        learningUnitViewLinkEditDialog = new FSLLearningUnitViewLinkEditDialog(learningUnitsActivator,
            learningUnitViewsActivator, userName, userPassword);
        String newLearningUnitViewElementLinkId = learningUnitViewElementLinkId;
        boolean linkHasBeenCreated = false;
        if (learningUnitViewElementId != null) {
            FSLLearningUnitViewElement learningUnitViewElement =
                learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
            FSLLearningUnitViewElementLink learningUnitViewElementLink;
            if (learningUnitViewElementLinkId == null) {
                // no links yet, create a new one
                learningUnitViewElementLink = learningUnitViewElement.addNewLearningUnitViewElementLink();
                learningUnitViewElementLinkId = learningUnitViewElementLink.getId();
                linkHasBeenCreated = true;
            }
            else {
                // links present, get link for id (null for WebLinks)
                learningUnitViewElementLink = learningUnitViewElement.getLearningUnitViewElementLink(learningUnitViewElementLinkId);
            }
            // display Dialogs
            if (learningUnitViewElementLink == null) {
                // Web/OpenUSS-Link, show Dialog with Web- or OpenUSS-Tab pre-selected
                if (learningUnitViewElementLinkId.startsWith("http://" +
                    internationalization.getString("openUSS.domainName"))) {
                        // OpenUSS-Link, show Dialog with OpenUSS-Link pre-selected
                        if (learningUnitViewLinkEditDialog.showDialog(learningUnitViewElementLinkId,
                            FSLLearningUnitViewLinkEditDialog.OPENUSS_LINK)) {
                                // ok pressed, return new link Id (may be FSL-, Web- or OpenUSS-Link!)
                                newLearningUnitViewElementLinkId =
                                    getNewLearningUnitViewElementLinkId(learningUnitViewElementLinkId,
                                    learningUnitViewElementId);
                                if (learningUnitViewLinkEditDialog.getLinkType() == FSLLearningUnitViewLinkEditDialog.WEB_LINK ||
                                    learningUnitViewLinkEditDialog.getLinkType() ==
                                    FSLLearningUnitViewLinkEditDialog.OPENUSS_LINK) {
                                        learningUnitViewElement.getLearningUnitViewElementLinks().remove(learningUnitViewElementLink);
                                }
                        }
                        else if (linkHasBeenCreated) {
                            learningUnitViewElement.getLearningUnitViewElementLinks().remove(learningUnitViewElementLink);
                        }
                }
                else {
                    // Web-Link, show Dialog with Web-Link preselected
                    if (learningUnitViewLinkEditDialog.showDialog(learningUnitViewElementLinkId,
                        FSLLearningUnitViewLinkEditDialog.WEB_LINK)) {
                            // ok pressed, return new link Id (may be FSL-, Web- or OpenUSS-Link!)
                            newLearningUnitViewElementLinkId =
                                getNewLearningUnitViewElementLinkId(learningUnitViewElementLinkId, learningUnitViewElementId);
                            if (learningUnitViewLinkEditDialog.getLinkType() == FSLLearningUnitViewLinkEditDialog.WEB_LINK ||
                                learningUnitViewLinkEditDialog.getLinkType() ==
                                FSLLearningUnitViewLinkEditDialog.OPENUSS_LINK) {
                                    learningUnitViewElement.getLearningUnitViewElementLinks().remove(learningUnitViewElementLink);
                            }
                    }
                    else if (linkHasBeenCreated) {
                        learningUnitViewElement.getLearningUnitViewElementLinks().remove(learningUnitViewElementLink);
                    }
                }
            }
            else {
                // FSL-Link, show Dialog with FSL-Link pre-selected
                if (learningUnitViewLinkEditDialog.showDialog(learningUnitViewElementLink)) {
                    // ok pressed, return new link Id (may be FSL- or WebLink!)
                    newLearningUnitViewElementLinkId = getNewLearningUnitViewElementLinkId(learningUnitViewElementLinkId,
                        learningUnitViewElementId);
                    if (learningUnitViewLinkEditDialog.getLinkType() == FSLLearningUnitViewLinkEditDialog.WEB_LINK) {
                        learningUnitViewElement.getLearningUnitViewElementLinks().remove(learningUnitViewElementLink);
                    }
                }
                else if (linkHasBeenCreated) {
                    learningUnitViewElement.getLearningUnitViewElementLinks().remove(learningUnitViewElementLink);
                }
            }
        }
        return newLearningUnitViewElementLinkId;
    }

    private String getNewLearningUnitViewElementLinkId(String learningUnitViewElementLinkId,
        String learningUnitViewElementId) {
            String newLearningUnitViewElementLinkId = null;
            FSLLearningUnitViewElement learningUnitViewElement = null;
            FSLLearningUnitViewElementLink learningUnitViewElementLink = null;
            learningUnitViewElementsManager.setModified(true);
            if (learningUnitViewLinkEditDialog.getLinkType() == FSLLearningUnitViewLinkEditDialog.FSL_LINK) {
                learningUnitViewElement = learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, true);
                learningUnitViewElementLink = learningUnitViewElement.getLearningUnitViewElementLink(learningUnitViewElementLinkId);
                if (learningUnitViewElementLink != null) {
                    learningUnitViewLinkEditDialog.setNewLinkTargets(learningUnitViewElementLink);
                    if (!learningUnitViewElementLink.getLearningUnitViewElementLinkTargets().isEmpty()) {
                        newLearningUnitViewElementLinkId = learningUnitViewElementLink.getId();
                    }
                    else {
                        learningUnitViewElement.getLearningUnitViewElementLinks().remove(learningUnitViewElementLink);
                        newLearningUnitViewElementLinkId = null;
                    }
                }
            }
            else if (learningUnitViewLinkEditDialog.getLinkType() == FSLLearningUnitViewLinkEditDialog.WEB_LINK) {
                if (learningUnitViewLinkEditDialog.getHttpLinkUrl().startsWith("http://")) {
                    newLearningUnitViewElementLinkId = learningUnitViewLinkEditDialog.getHttpLinkUrl();
                }
                else
                    newLearningUnitViewElementLinkId = null;
            }
            else if (learningUnitViewLinkEditDialog.getLinkType() == FSLLearningUnitViewLinkEditDialog.OPENUSS_LINK) {
                if (learningUnitViewLinkEditDialog.getOpenUssLinkUrl().startsWith("http://" +
                    internationalization.getString("openUSS.domainName"))) {
                        newLearningUnitViewElementLinkId = learningUnitViewLinkEditDialog.getOpenUssLinkUrl();
                }
                else
                    newLearningUnitViewElementLinkId = null;
            }
            return newLearningUnitViewElementLinkId;
    }

    public void followLearningUnitViewElementLink(String linkId, String elementId) {
        final String learningUnitViewElementLinkId = linkId;
        final String learningUnitViewElementId = elementId;
        new Thread(new Runnable() {
            public void run() { 
                FSLLearningUnitViewElement learningUnitViewElement = learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
                FSLLearningUnitViewElementLink learningUnitViewElementLink = learningUnitViewElement.getLearningUnitViewElementLink(learningUnitViewElementLinkId);
                java.util.List linkTargets = null;
                if (learningUnitViewElementLink != null) {
                    linkTargets = learningUnitViewElementLink.getLearningUnitViewElementLinkTargets();
                }
                if (linkTargets != null && linkTargets.size() > 0) {
                    int linkTargetIndex = -1;
                    if (linkTargets.size() == 1) linkTargetIndex = 0;
                    else {
                        Vector comboBoxEntries = new Vector();
                        for (int i = 0; i < linkTargets.size(); i++) {
                            String comboBoxEntry = "";
                            FSLLearningUnitViewElementLinkTarget linkTarget = (FSLLearningUnitViewElementLinkTarget)linkTargets.get(i);
                            String learningUnitId = linkTarget.getTargetLearningUnitId();
                            String managerId = linkTarget.getTargetLearningUnitViewManagerId();
                            String elementId = linkTarget.getTargetLearningUnitViewElementId();
                            FSLLearningUnitViewManager manager = null;
                            if (!learningUnitId.equals(currentLearningUnitId)) {
                                comboBoxEntry = learningUnitsActivator.getLearningUnitTitle(learningUnitId) + ":";
                            }
                            if (managerId != null) {
                                manager = learningUnitViewsActivator.getLearningUnitViewManager(managerId);
                                if (!managerId.equals(learningUnitViewManagerId)) {
                                    if (manager != null) {
                                        comboBoxEntry += manager.getLearningUnitViewManagerTitle() + ":";
                                    }
                                    else {
                                        comboBoxEntry += "?:";
                                    }
                                }
                            }
                            else {
                                comboBoxEntry += "?:";
                            }
                            if (elementId != null) {
                                if (manager != null && manager.getLearningUnitViewElementsManager(learningUnitId) != null &&
                                    manager.getLearningUnitViewElementsManager(learningUnitId).getLearningUnitViewElement(elementId, false)
                                    != null) {
                                        comboBoxEntry += manager.getLearningUnitViewElementsManager(learningUnitId).getLearningUnitViewElement(elementId, false).getTitle();
                                }
                                else {
                                    comboBoxEntry += "?";
                                }
                            }
                            comboBoxEntries.add(comboBoxEntry);
                        }
                        JPanel dialogPanel = new JPanel(new BorderLayout());
                        dialogPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
                        JComboBox comboBox = new JComboBox(comboBoxEntries);
                        dialogPanel.add(comboBox);
                        // set the preferred size
                        int width = Math.max(200, comboBox.getPreferredSize().width + dialogPanel.getInsets().left +
                            dialogPanel.getInsets().right);
                        int height = comboBox.getPreferredSize().height + dialogPanel.getInsets().top + dialogPanel.getInsets().bottom;
                        dialogPanel.setPreferredSize(new java.awt.Dimension(width, height));
                        int returnValue = FLGOptionPane.showConfirmDialog(dialogPanel, internationalization.getString("dialog.followViewLink.title"),
                            FLGOptionPane.OK_CANCEL_OPTION, FLGOptionPane.PLAIN_MESSAGE);
                        if (returnValue == FLGOptionPane.OK_OPTION) {
                            linkTargetIndex = comboBox.getSelectedIndex();
                        }
                    }
                    if (linkTargetIndex != -1) {
                        FSLLearningUnitViewElementLinkTarget target =
                            (FSLLearningUnitViewElementLinkTarget)linkTargets.get(linkTargetIndex);
                        final String targetLearningUnitId = target.getTargetLearningUnitId();
                        if (learningUnitsActivator.setActiveLearningUnit(targetLearningUnitId)) {
                            if (!target.getTargetLearningUnitViewManagerId().equals("none")) {
                                FSLLearningUnitViewManager targetLearningUnitViewManager =
                                    learningUnitViewsActivator.getLearningUnitViewManager(target.getTargetLearningUnitViewManagerId());
                                String targetLearningUnitViewElementId = target.getTargetLearningUnitViewElementId();
                                String targetSecondaryActiveLearningUnitViewElementId = null;
                                if (targetLearningUnitViewManager == FSLAbstractLearningUnitViewManager.this) {
                                    targetSecondaryActiveLearningUnitViewElementId = secondaryActiveLearningUnitViewElementId;
                                }
                                learningUnitViewsActivator.setActiveLearningUnitViewManager(targetLearningUnitViewManager, true);
                                targetLearningUnitViewManager.setActiveLearningUnitViewElementId(targetLearningUnitViewElementId, targetSecondaryActiveLearningUnitViewElementId);
                            }
                            else {
                                // to do: Show the intro screen of the learning unit
                            }
                        }
                    }
                }
            }
        }).start();
    }

    public void introduceLearningUnitViewManager(FSLLearningUnitViewManager learningUnitViewManager) {
        learningUnitViewManager.addLearningUnitViewListener(learningUnitViewAdapter);
    }

    // this method must be overidden when the xml document does not directly
    // contain the element structure
    public FSLLearningUnitViewElementsManager
        createElementsManagerFromXMLDocuments(FSLLearningUnitViewXMLDocument originalDocument,
        FSLLearningUnitViewXMLDocument userDocument, File learningUnitViewOriginalDataDirectory,
        File learningUnitViewUserDataDirectory) {
            FSLLearningUnitViewElementsManager elementsManager = new FSLLearningUnitViewElementsManager();
            elementsManager.init(this, learningUnitViewManagerId, learningUnitViewOriginalDataDirectory,
                learningUnitViewUserDataDirectory, originalElementsOnly);
            List originalElements = originalDocument.getLearningUnitViewElements();
            List userElements = userDocument.getLearningUnitViewElements();
            for (int i = 0; i < originalElements.size(); i++)
                elementsManager.addLearningUnitViewElement((FSLLearningUnitViewElement)originalElements.get(i), true);
            for (int i = 0; i < userElements.size(); i++)
                elementsManager.addLearningUnitViewElement((FSLLearningUnitViewElement)userElements.get(i), false);
            return elementsManager;
    }

    protected FSLLearningUnitViewXMLDocument createXMLDocumentFromElementsManager(FSLLearningUnitViewElementsManager
        elementsManager, boolean originalData) {
            FSLLearningUnitViewXMLDocument xmlDocument = createLearningUnitViewXMLDocument();
            if (originalData)
                xmlDocument.getLearningUnitViewElements().addAll(elementsManager.getLearningUnitViewOriginalElements());
            else
                xmlDocument.getLearningUnitViewElements().addAll(elementsManager.getLearningUnitViewUserElements());
            return xmlDocument;
    }


    abstract protected FSLLearningUnitViewXMLDocument createLearningUnitViewXMLDocument();

    abstract protected Dispatcher createDispatcher();

    protected void removeUnnecessaryExternalElementFiles(boolean originalElements) {
        File directoryToClean;
        List learningUnitViewElements;
        
        if (originalElements) {
            directoryToClean = learningUnitViewElementsManager.getLearningUnitViewOriginalDataDirectory();
            learningUnitViewElements = learningUnitViewElementsManager.getLearningUnitViewOriginalElements();
        } else {
            directoryToClean = learningUnitViewElementsManager.getLearningUnitViewUserDataDirectory();
            learningUnitViewElements = learningUnitViewElementsManager.getLearningUnitViewUserElements();
        }
        
        List absoluteFilesToKeep = new ArrayList();
        absoluteFilesToKeep.add(new File(directoryToClean, LEARNING_UNIT_VIEW_DATA_FILENAME));
        // absoluteFilesToKeep.add(new File(directoryToClean, LEARNING_UNIT_VIEW_DATA_FILENAME + "~"));
        
        for (int i = 0; i < learningUnitViewElements.size(); i++) {
            FSLLearningUnitViewElement learningUnitViewElement = (FSLLearningUnitViewElement)learningUnitViewElements.get(i);
            String[] relativePathsToKeep = learningUnitViewElement.getLearningUnitViewElementExternalFilesRelativePaths(learningUnitViewElementsManager);
            if (relativePathsToKeep != null) {
                for (int j = 0; j < relativePathsToKeep.length; j++) {
                    absoluteFilesToKeep.add(new File(directoryToClean, relativePathsToKeep[j]));
                }
            }
        }
        
        FLGFileUtility.cleanDirectory(directoryToClean, (File[]) absoluteFilesToKeep.toArray(new File[]{}));
    }

    public FSLLearningUnitViewXMLDocument loadLearningUnitViewXMLDocument(File file) {
        Dispatcher dispatcher = createDispatcher();
        FSLLearningUnitViewXMLDocument document = null;
        FileInputStream fileInputStream = null;
        if (file.exists()) {
            try {
                fileInputStream = new FileInputStream(file);
                document = (FSLLearningUnitViewXMLDocument)dispatcher.unmarshal(fileInputStream);
                document.validate();
                fileInputStream.close();
            }
            catch (Exception e) {
                e.printStackTrace(System.out);
            }
        }
        else {
            document = createLearningUnitViewXMLDocument();
        }
        return document;
    }

    private boolean saveLearningUnitViewXMLDocument(FSLLearningUnitViewXMLDocument learningUnitViewXMLDocument, File file) {
        File backUpFile = new File(file.getAbsolutePath() + "~");
        try {
            if (!file.exists()) {
                File directory = file.getParentFile();
                if (!directory.exists()) directory.mkdirs();
            }
            else {
                FLGFileUtility.copyFile(file, backUpFile);
            }
            FileOutputStream fileOutputStream = new FileOutputStream(file);
            learningUnitViewXMLDocument.validate();
            learningUnitViewXMLDocument.marshal(fileOutputStream);
            fileOutputStream.close();
            return true;
        }
        catch (Exception e) {
            e.printStackTrace(System.out);
            String message = internationalization.getString("dialog.message.errorSaving") + "\n" + file.getPath() + "\n\n" +
                internationalization.getString("dialog.message.checkFileProperties");
            FLGOptionPane.showMessageDialog(message, internationalization.getString("dialog.title.errorSaving"),
                FLGOptionPane.ERROR_MESSAGE);
            FLGFileUtility.copyFile(backUpFile, file);
            return false;
        }
    }

    private void setLearningUnitViewElementsManager(FSLLearningUnitViewElementsManager learningUnitViewElementsManager) {
        // try because loading view manager may have failed
        try {
            this.learningUnitViewElementsManager = learningUnitViewElementsManager;
            activeLearningUnitViewElementId = null;
            elementsStructurePanel.setLearningUnitViewElementsManager(learningUnitViewElementsManager);
            elementsContentsPanel.setLearningUnitViewElementsManager(learningUnitViewElementsManager);
            elementInteractionPanel.setLearningUnitViewElementsManager(learningUnitViewElementsManager);
            statusPanel.setLearningUnitViewElementsManager(learningUnitViewElementsManager);
        }
        catch(Exception e) {
            System.out.println("\n*** FSLAbstractLearningUnitViewManager.setLearningUnitViewElementsManager(): " +
                "\n*** Exception setting Elements Manager: " + e.getMessage());
        }
    }

    public boolean getEditMode() {
        return editMode;
    }    

    public File getLearningUnitViewOriginalDataDirectory() {
        return currentLearningUnitViewOriginalDataDirectory;
    }    

    public File getLearningUnitViewUserDirectory() {
        return currentLearningUnitViewUserDataDirectory;
    }
    
    // to be overwritten if import structure is not to be supported
    public boolean supportsImportStructure() {
        return true;
    }
    
    public void importStructure(FSLLearningUnitViewElementsManager sourceElementsManager) {
        JPanel messagePanel = new JPanel(new FLGColumnLayout());
        messagePanel.setOpaque(false);
        messagePanel.add(new JLabel(internationalization.getString("dialog.confirmImport.message1")), FLGColumnLayout.LEFTEND);
        messagePanel.add(new JLabel(getLearningUnitViewManagerTitle()), FLGColumnLayout.CENTEREND);
        messagePanel.add(new JLabel(internationalization.getString("dialog.confirmImport.message2")), FLGColumnLayout.LEFTEND);
        messagePanel.add(new JLabel(internationalization.getString("dialog.confirmImport.message3")), FLGColumnLayout.LEFTEND);
        if (FLGOptionPane.showConfirmDialog(messagePanel, internationalization.getString("dialog.confirmImport.title"),
        FLGOptionPane.YES_NO_OPTION, FLGOptionPane.QUESTION_MESSAGE) == FLGOptionPane.YES_OPTION) {
            // remove all existing elements:
            learningUnitViewElementsManager.removeAllElements();
            
            // create new structure
            String[] sourceElementIds = sourceElementsManager.getAllLearningUnitViewElementIds();
            for (int i = 0; i < sourceElementIds.length; i++) {
                FSLLearningUnitViewElement sourceElement = sourceElementsManager.getLearningUnitViewElement(sourceElementIds[i], false);
                FSLLearningUnitViewElement newElement = elementsStructurePanel.createLearningUnitViewElement(
                sourceElement.getId(),
                sourceElement.getParentId(),
                sourceElement.getTitle(),
                sourceElement.getFolder());
                newElement.setModified(true);
                learningUnitViewElementsManager.setModified(true);
                learningUnitViewElementsManager.addLearningUnitViewElement(
                		newElement, learningUnitViewElementsManager.isOriginalElementsOnly());                    
            }
        }
    }
    
    public boolean supportsAutomaticLink() {
        return false;
    }
    
    public FSLLearningUnitViewElementLink addLearningUnitViewElementLink(FSLLearningUnitViewElementLinkTarget target, FSLLearningUnitViewElement learningUnitViewElement) {
        return null;
    }
    
    public FSLLearningUnitViewElementLink addLearningUnitViewElementLinkTarget(String linkId, FSLLearningUnitViewElementLinkTarget target, FSLLearningUnitViewElement learningUnitViewElement) {
        return null;
    }

    public double getLearningUnitViewProgressStatus() {
        return -1;
    }    

    class FSLAbstractLearningUnitViewManager_LearningUnitAdapter extends FSLLearningUnitVetoableAdapter {
        public void learningUnitActivated(FSLLearningUnitEvent event) {
            currentLearningUnitId = event.getLearningUnitId();
            currentLearningUnitTitle = event.getLearningUnitTitle();
            if (currentLearningUnitId == null) {
                learningUnitViewElementsManager = null;
                lastLoadedLearningUnitViewElementsManager = null;
                activeLearningUnitViewElementId = null;
                deactivate();
            }
            else {
                if (cachingEnabled) {
                    learningUnitViewElementsManager = (FSLLearningUnitViewElementsManager)learningUnitViewElementsManagerCache.get(currentLearningUnitId);
                }
                else {
                    learningUnitViewElementsManager = lastLoadedLearningUnitViewElementsManager;
                }
                setLearningUnitViewElementsManager(learningUnitViewElementsManager);
            }
            selectedLearningUnitViewElementId = null;
            ((FSLLearningUnitsManager)learningUnitsActivator).getTourCreatorCaptureButton().setEnabled(false);
        }
        
        public void learningUnitInvalidated(FSLLearningUnitEvent event) {
            if (cachingEnabled) {
                learningUnitViewElementsManagerCache.remove(currentLearningUnitId);
                setLearningUnitViewElementsManager(null);
                activeLearningUnitViewElementId = null;
            }
        }

        public void learningUnitUserViewChanged(FSLLearningUnitEvent event) {
            originalElementsOnly = event.isOriginalElementsOnly();
            elementsContentsPanel.saveUserChanges();
            if (cachingEnabled) {
                Enumeration elementsManagers = learningUnitViewElementsManagerCache.elements();
                while (elementsManagers.hasMoreElements()) {
                    FSLLearningUnitViewElementsManager elementManager =
                        (FSLLearningUnitViewElementsManager)elementsManagers.nextElement();
                    elementManager.setOriginalElementsOnly(originalElementsOnly);
                }
            }
            else {
                if (learningUnitViewElementsManager != null) {
                    learningUnitViewElementsManager.setOriginalElementsOnly(originalElementsOnly);
                }
            }
            // update the content
            if (learningUnitViewElementsManager != null) {
                if (activeLearningUnitViewElementId != null &&
                    learningUnitViewElementsManager.getLearningUnitViewElement(activeLearningUnitViewElementId, false)
                    == null) {
                        activeLearningUnitViewElementId = null;
                }
                if (secondaryActiveLearningUnitViewElementId != null &&
                    learningUnitViewElementsManager.getLearningUnitViewElement(secondaryActiveLearningUnitViewElementId, false)
                    == null) {
                        secondaryActiveLearningUnitViewElementId = null;
                }
                if (activeLearningUnitViewElementId == null && !learningUnitViewElementsManager.isEmpty())
                    activeLearningUnitViewElementId = learningUnitViewElementsManager.getTopLevelLearningUnitViewElementsIds() [0];
                fireLearningUnitViewEvent(FSLLearningUnitViewEvent.createElementActivatedEvent(getLearningUnitViewManagerId(),
                    activeLearningUnitViewElementId, secondaryActiveLearningUnitViewElementId, false));
            }
        }

        public void learningUnitEditModeChanged(FSLLearningUnitEvent event) {
            editMode = event.isEditMode();
            if(!editMode) {
            	if(getActiveLearningUnitViewElementId() != null) {
            		((FSLLearningUnitsManager)learningUnitsActivator).getTourCreatorCaptureButton().setEnabled(true);
            	}
            } else {
            	((FSLLearningUnitsManager)learningUnitsActivator).getTourCreatorCaptureButton().setEnabled(false);
            }
        }

        public void learningUnitsUserDirectoryChanged(FSLLearningUnitEvent event) {
            learningUnitViewElementsManagerCache = new Hashtable();
            setLearningUnitViewElementsManager(null);
            lastLoadedLearningUnitViewElementsManager = null;
            currentLearningUnitId = null;
        }
    }

    class FSLAbstractLearningUnitViewManager_LearningUnitViewAdapter extends FSLLearningUnitViewVetoableAdapter {
        public void learningUnitViewElementActivated(FSLLearningUnitViewEvent event) {
            if (event.getLearningUnitViewManagerId().equals(getLearningUnitViewManagerId())) {
                secondaryActiveLearningUnitViewElementId = event.getSecondaryActiveLearningUnitViewElementId();
                activeLearningUnitViewElementId = event.getActiveLearningUnitViewElementId();
            }
        }

        public void learningUnitViewElementsSelected(FSLLearningUnitViewEvent event) {
            selectedLearningUnitViewElementId = event.getLearningUnitViewElementId();
            ((FSLLearningUnitsManager)learningUnitsActivator).getTourCreatorCaptureButton().setEnabled(selectedLearningUnitViewElementId != null);
        }
        
        public void learningUnitViewElementsRemoved(FSLLearningUnitViewEvent event) {
            Vector allElements;
            Vector modifiedElementIds = new Vector();
            if (learningUnitViewElementsManager != null) {
                if (learningUnitViewElementsManager.isOriginalElementsOnly())
                    allElements = learningUnitViewElementsManager.getLearningUnitViewOriginalElements();
                else
                    allElements = learningUnitViewElementsManager.getLearningUnitViewUserElements();
                for (int elementIndex = 0; elementIndex < allElements.size(); elementIndex++) {
                    FSLLearningUnitViewElement element = (FSLLearningUnitViewElement)allElements.get(elementIndex);
                    List links = element.getLearningUnitViewElementLinks();
                    if (!links.isEmpty()) {
                        Vector removedLinkIds = new Vector();
                        for (int linkIndex = 0; linkIndex < links.size(); linkIndex++) {
                            FSLLearningUnitViewElementLink link = (FSLLearningUnitViewElementLink)links.get(linkIndex);
                            List targets = link.getLearningUnitViewElementLinkTargets();
                            if (targets.size() > 0) {
                                Vector newTargets = new Vector();
                                for (int targetIndex = 0; targetIndex < targets.size(); targetIndex++) {
                                    FSLLearningUnitViewElementLinkTarget target =
                                        (FSLLearningUnitViewElementLinkTarget)targets.get(targetIndex);
                                    if (!target.getTargetLearningUnitId().equals(currentLearningUnitId)) {
                                        // do not check targets to other learning units
                                        newTargets.add(target);
                                    }
                                    else {
                                        // this is a target to the current learning unit
                                        FSLLearningUnitViewManager targetManager =
                                            learningUnitViewsActivator.getLearningUnitViewManager(target.getTargetLearningUnitViewManagerId());
                                        if (targetManager != null && targetManager.getLearningUnitViewElementsManager().getLearningUnitViewElement(target.getTargetLearningUnitViewElementId(),
                                            false) != null) {
                                                newTargets.add(target);
                                        }
                                    }
                                }
                                if (newTargets.size() == 0) {
                                    links.remove(link);
                                    learningUnitViewElementsManager.setModified(true);
                                    removedLinkIds.add(link.getId());
                                }
                                else if (newTargets.size() < targets.size()) {
                                    targets.clear();
                                    for (int i = 0; i < newTargets.size(); i++)
                                        targets.add(newTargets.get(i));
                                }
                            }
                        }
                        if (removedLinkIds.size() > 0) {
                            modifiedElementIds.add(element.getId());
                            String[] removedLinkIdsArray = (String[]) removedLinkIds.toArray(
                                new String[] { });
                            fireLearningUnitViewEvent(FSLLearningUnitViewEvent.createElementLinksRemovedEvent(getLearningUnitViewManagerId(), element.getId(),
                                removedLinkIdsArray));
                        }
                    } // if
                } // for
                if (modifiedElementIds.size() > 0) {
                    fireLearningUnitViewEvent(FSLLearningUnitViewEvent.createElementsModifiedEvent(getLearningUnitViewManagerId(),
                        (String[]) modifiedElementIds.toArray(
                        new String[] { })));
                }
            }
        }
    }
}
