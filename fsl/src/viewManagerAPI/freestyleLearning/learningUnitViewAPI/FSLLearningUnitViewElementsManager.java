/* Generated by Freestyle Learning Group */

package freestyleLearning.learningUnitViewAPI;

import java.io.*;
import java.util.*;

import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.*;
import freestyleLearningGroup.independent.util.*;

// manages the elements of one learning unit. There may be multiple instances for one view at a
// time - each of which is only for one learning unit
// (this may happen when the learningUnitManager uses a cache)
public class FSLLearningUnitViewElementsManager {
    private Hashtable learningUnitViewOriginalElementsById;
    private Hashtable learningUnitViewUserElementsById;
    // additional Vector, because the ordering of the childs could be relevant
    private Vector learningUnitViewOriginalElements;
    private Vector learningUnitViewUserElements;
    // elements changed since last save?
    private boolean userElementsModified = false;
    private boolean originalElementsModified = false;
    private boolean originalElementsOnly;
    private File learningUnitViewOriginalDataDirectory;
    private File learningUnitViewUserDataDirectory;
    private long highestElementIdValue;
    private FSLLearningUnitViewEventGenerator learningUnitViewEventGenerator;
    private String learningUnitViewManagerId;
    private Vector dirtyElementFileIds;

    public static void copyLearningUnitViewElement(FSLLearningUnitViewElement source, FSLLearningUnitViewElement destination) {
        destination.setFolder(source.getFolder());
        destination.setId(source.getId());
        destination.setModified(source.isModified());
        destination.setParentId(source.getParentId());
        destination.setTitle(source.getTitle());
        destination.setType(source.getType());
        if (source.getLastModificationDate()!=null) { destination.setLastModificationDate(String.valueOf(new Date().getTime())); }
        for (int i = 0; i < source.getLearningUnitViewElementLinks().size(); i++) {
            FSLLearningUnitViewElementLink sourceLink =
                (FSLLearningUnitViewElementLink)source.getLearningUnitViewElementLinks().get(i);
            FSLLearningUnitViewElementLink destinationLink = destination.addNewLearningUnitViewElementLink();
            copyLearningUnitViewElementLink(sourceLink, destinationLink);
        }
    }

    public static FSLLearningUnitViewElementLink addLearningUnitViewElementLink(
        FSLLearningUnitViewElementLink learningUnitViewElementLink, FSLLearningUnitViewElement learningUnitViewElement) {
            if (learningUnitViewElement.getLearningUnitViewElementLinks().isEmpty()) {
                learningUnitViewElementLink.setId("l1");
            }
            else {
                int maxLearningUnitViewElementLinkIdValue = 0;
                for (int i = 0; i < learningUnitViewElement.getLearningUnitViewElementLinks().size(); i++) {
                    String learningUnitViewElementLinkId =
                        ((FSLLearningUnitViewElementLink)learningUnitViewElement.getLearningUnitViewElementLinks().get(i)).getId();
                    int learningUnitViewElementLinkIdValue = Integer.parseInt(learningUnitViewElementLinkId.substring(1));
                    maxLearningUnitViewElementLinkIdValue =
                        Math.max(maxLearningUnitViewElementLinkIdValue, learningUnitViewElementLinkIdValue);
                }
                learningUnitViewElementLink.setId("l" + (maxLearningUnitViewElementLinkIdValue + 1));
            }
            learningUnitViewElement.getLearningUnitViewElementLinks().add(learningUnitViewElementLink);
            return learningUnitViewElementLink;
    }

    public static FSLLearningUnitViewElementLinkTarget addLearningUnitViewElementLinkTarget(
        FSLLearningUnitViewElementLink learningUnitViewElementLink,
        FSLLearningUnitViewElementLinkTarget learningUnitViewElementLinkTarget, String learningUnitId,
        String learningUnitViewManagerId, String learningUnitViewElementId) {
            learningUnitViewElementLinkTarget.setTargetLearningUnitId(learningUnitId);
            learningUnitViewElementLinkTarget.setTargetLearningUnitViewManagerId(learningUnitViewManagerId);
            learningUnitViewElementLinkTarget.setTargetLearningUnitViewElementId(learningUnitViewElementId);
            learningUnitViewElementLink.getLearningUnitViewElementLinkTargets().add(learningUnitViewElementLinkTarget);
            return learningUnitViewElementLinkTarget;
    }

    private static void copyLearningUnitViewElementLink(FSLLearningUnitViewElementLink source,
        FSLLearningUnitViewElementLink destination) {
            destination.setId(source.getId());
            for (int i = 0; i < source.getLearningUnitViewElementLinkTargets().size(); i++) {
                FSLLearningUnitViewElementLinkTarget sourceLinkTarget =
                    (FSLLearningUnitViewElementLinkTarget)source.getLearningUnitViewElementLinkTargets().get(i);
                destination.addNewLearningUnitViewElementLinkTarget(sourceLinkTarget.getTargetLearningUnitId(),
                    sourceLinkTarget.getTargetLearningUnitViewManagerId(),
                    sourceLinkTarget.getTargetLearningUnitViewElementId());
            }
    }

    public void init(FSLLearningUnitViewEventGenerator learningUnitViewEventGenerator, String learningUnitViewManagerId,
        File learningUnitViewOriginalDataDirectory, File learningUnitViewUserDataDirectory, boolean originalElementsOnly) {
            this.learningUnitViewEventGenerator = learningUnitViewEventGenerator;
            this.learningUnitViewManagerId = learningUnitViewManagerId;
            learningUnitViewOriginalElementsById = new Hashtable();
            learningUnitViewUserElementsById = new Hashtable();
            learningUnitViewOriginalElements = new Vector();
            learningUnitViewUserElements = new Vector();
            this.learningUnitViewOriginalDataDirectory = learningUnitViewOriginalDataDirectory;
            this.learningUnitViewUserDataDirectory = learningUnitViewUserDataDirectory;
            this.originalElementsOnly = originalElementsOnly;
            this.dirtyElementFileIds = new Vector();
    }

    public void setLearningUnitViewDataDirectoryName(String directoryName) {
        this.learningUnitViewOriginalDataDirectory = new File(learningUnitViewOriginalDataDirectory.getParent(), directoryName);
        this.learningUnitViewUserDataDirectory = new File(learningUnitViewUserDataDirectory.getParent(), directoryName);
    }

    public File getLearningUnitViewOriginalDataDirectory() {
        return learningUnitViewOriginalDataDirectory;
    }

    public File getLearningUnitViewUserDataDirectory() {
        return learningUnitViewUserDataDirectory;
    }

    public File getLearningUnitViewDataDirectory() {
        if (originalElementsOnly) return getLearningUnitViewOriginalDataDirectory();
        else
            return getLearningUnitViewUserDataDirectory();
    }

    public File createNewFileForElementsExternalData(String fileNamePrefix, String fileNameSuffix,
        String learningUnitViewElementId) {
            // check whether an original element is about to be overwritten by the learner
            if (!isOriginalElementsOnly() && getLearningUnitViewOriginalElement(learningUnitViewElementId) != null &&
                getLearningUnitViewUserElement(learningUnitViewElementId) == null) {
                    addLearnerVersionOfLearningUnitViewElement(getLearningUnitViewOriginalElement(learningUnitViewElementId));
            }
            if (originalElementsOnly)
                return FLGFileUtility.createNewFile("author_" + fileNamePrefix, fileNameSuffix,
                    getLearningUnitViewOriginalDataDirectory());
            else
                return FLGFileUtility.createNewFile("learner_" + fileNamePrefix, fileNameSuffix,
                    getLearningUnitViewUserDataDirectory());
    }

    public File createNewDirectoryForElementsExternalData(String directoryPrefix, String directorySuffix,
        String learningUnitViewElementId) {
            // check whether an original element is about to be overwritten by the learner
            if (!isOriginalElementsOnly() && getLearningUnitViewOriginalElement(learningUnitViewElementId) != null &&
                getLearningUnitViewUserElement(learningUnitViewElementId) == null) {
                    addLearnerVersionOfLearningUnitViewElement(getLearningUnitViewOriginalElement(learningUnitViewElementId));
            }
            if (originalElementsOnly)
                return FLGFileUtility.createNewDirectory("author_" + directoryPrefix, directorySuffix,
                    getLearningUnitViewOriginalDataDirectory());
            else
                return FLGFileUtility.createNewDirectory("learner_" + directoryPrefix, directorySuffix,
                    getLearningUnitViewUserDataDirectory());
    }

    public void setOriginalElementsOnly(boolean originalElementsOnly) {
        this.originalElementsOnly = originalElementsOnly;
    }

    public boolean isOriginalElementsOnly() {
        return originalElementsOnly;
    }

    public boolean isEmpty() {
        if (originalElementsOnly) return learningUnitViewOriginalElements.isEmpty();
        else
            return (learningUnitViewOriginalElements.isEmpty() && learningUnitViewUserElements.isEmpty());
    }

    public Vector getLearningUnitViewOriginalElements() {
        return learningUnitViewOriginalElements;
    }

    public Vector getLearningUnitViewUserElements() {
        return learningUnitViewUserElements;
    }
    
    public FSLLearningUnitViewElement getLearningUnitViewElement(String learningUnitViewElementId, boolean write) {
        if (write) {
            if (!isOriginalElementsOnly() && getLearningUnitViewUserElement(learningUnitViewElementId) == null) {
                addLearnerVersionOfLearningUnitViewElement(getLearningUnitViewOriginalElement(learningUnitViewElementId));
            }
        }
        FSLLearningUnitViewElement learningUnitViewElement = null;
        FSLLearningUnitViewElement learningUnitViewOriginalElement = getLearningUnitViewOriginalElement(learningUnitViewElementId);
        FSLLearningUnitViewElement learningUnitViewUserElement = getLearningUnitViewUserElement(learningUnitViewElementId);
        if (originalElementsOnly) {
            learningUnitViewElement = learningUnitViewOriginalElement;
        }
        else {
            if (learningUnitViewUserElement != null)
                learningUnitViewElement = learningUnitViewUserElement;
            else
                learningUnitViewElement = learningUnitViewOriginalElement;
        }
        return learningUnitViewElement;
    }

    public FSLLearningUnitViewElement getLearningUnitViewOriginalElement(String learningUnitViewElementId) {
        FSLLearningUnitViewElement learningUnitViewElement = null;
        if (learningUnitViewElementId != null) {
            learningUnitViewElement = (FSLLearningUnitViewElement)learningUnitViewOriginalElementsById.get(learningUnitViewElementId);
        }
        return learningUnitViewElement;
    }

    public FSLLearningUnitViewElement getLearningUnitViewUserElement(String learningUnitViewElementId) {
        FSLLearningUnitViewElement learningUnitViewElement = null;
        if (learningUnitViewElementId != null) {
            learningUnitViewElement = (FSLLearningUnitViewElement)learningUnitViewUserElementsById.get(learningUnitViewElementId);
        }
        return learningUnitViewElement;
    }

    public String[] getTopLevelLearningUnitViewElementsIds() {
        Vector elementIds = new Vector();
        for (int i = 0; i < learningUnitViewOriginalElements.size(); i++) {
            FSLLearningUnitViewElement element = (FSLLearningUnitViewElement)learningUnitViewOriginalElements.get(i);
            if (element.getParentId().equals("none")) elementIds.add(element.getId());
        }
        if (!originalElementsOnly) {
            for (int i = 0; i < learningUnitViewUserElements.size(); i++) {
                FSLLearningUnitViewElement element = (FSLLearningUnitViewElement)learningUnitViewUserElements.get(i);
                if (element.getParentId().equals("none"))
                    if (!elementIds.contains(element.getId())) elementIds.add(element.getId());
            }
        }
        return (String[]) elementIds.toArray(
            new String[] { });
    }

    public String[] getAllLearningUnitViewElementIds() {
        Vector elementIds = new Vector();
        String[] topLevelElementIds = this.getTopLevelLearningUnitViewElementsIds();
        for (int i = 0; i < topLevelElementIds.length; i++) {
            elementIds.add(topLevelElementIds[i]);
            String[] childrenElements = this.getDescendantIdsOfLearningUnitViewElement(topLevelElementIds[i]);
            for (int j = 0; j < childrenElements.length; j++) {
                elementIds.add(childrenElements[j]);
            }
        }
        return (String[]) elementIds.toArray(
            new String[] { });
    }
    
    /** Carsten Fiedler, 24.01.2005 **/
    public String[] getAllLearningUnitElementsByDepthFirstSearch() {
    	Vector elementIds = new Vector();
    	elementIds = getElementIdsInDepthFirstOrder();
    	return (String[]) elementIds.toArray(new String[] { });
    }
    
    public String getNextElementIdInDepthFirstOrder(String learningUnitViewElementId) {
        if (learningUnitViewElementId == null) return null;
        Vector elementIdsInDepthFirstOrder = getElementIdsInDepthFirstOrder();
        int index = elementIdsInDepthFirstOrder.indexOf(learningUnitViewElementId);
        if (index < elementIdsInDepthFirstOrder.size() - 1)
            return (String)elementIdsInDepthFirstOrder.get(index + 1);
        else
            return null;
    }
    
    public String[] getChildrenIdsOfLearningUnitViewElement(String learningUnitViewElementId) {
        Vector childrenIds = new Vector();
        for (int i = 0; i < learningUnitViewOriginalElements.size(); i++) {
            FSLLearningUnitViewElement element = (FSLLearningUnitViewElement)learningUnitViewOriginalElements.get(i);
            if (element.getParentId().equals(learningUnitViewElementId))
                childrenIds.add(element.getId());
        }
        if (!originalElementsOnly) {
            for (int i = 0; i < learningUnitViewUserElements.size(); i++) {
                FSLLearningUnitViewElement element = (FSLLearningUnitViewElement)learningUnitViewUserElements.get(i);
                if (element.getParentId().equals(learningUnitViewElementId))
                    if (!childrenIds.contains(element.getId())) childrenIds.add(element.getId());
            }
        }
        return (String[]) childrenIds.toArray(
            new String[] { });
    }

    public String[] getDescendantIdsOfLearningUnitViewElement(String learningUnitViewElementId) {
        Vector descendantIds = new Vector();
        String[] childrenIds = getChildrenIdsOfLearningUnitViewElement(learningUnitViewElementId);
        addArrayElementsToVector(childrenIds, descendantIds);
        for (int i = 0; i < childrenIds.length; i++) {
            addArrayElementsToVector(getDescendantIdsOfLearningUnitViewElement(childrenIds[i]), descendantIds);
        }
        return (String[]) descendantIds.toArray(
            new String[] { });
    }

    public String getParentIdOfLearningUnitViewElement(String learningUnitViewElementId) {
        FSLLearningUnitViewElement learningUnitViewElement = getLearningUnitViewElement(learningUnitViewElementId, false);
        return learningUnitViewElement.getParentId();
    }

    public String getPreviousSiblingId(String learningUnitViewElementId) {
        FSLLearningUnitViewElement learningUnitViewElement = getLearningUnitViewElement(learningUnitViewElementId, false);
        String[] siblingsIds;
        if (learningUnitViewElement.getParentId().equals("none"))
            siblingsIds = getTopLevelLearningUnitViewElementsIds();
        else
            siblingsIds = getChildrenIdsOfLearningUnitViewElement(learningUnitViewElement.getParentId());
        int index = getIndexOfElementIdInArray(learningUnitViewElementId, siblingsIds);
        if (index > 0) return siblingsIds[index - 1];
        else
            return null;
    }

    public String getNextSiblingId(String learningUnitViewElementId) {
        FSLLearningUnitViewElement learningUnitViewElement = getLearningUnitViewElement(learningUnitViewElementId, false);
        String[] siblingsIds;
        if (learningUnitViewElement.getParentId().equals("none"))
            siblingsIds = getTopLevelLearningUnitViewElementsIds();
        else
            siblingsIds = getChildrenIdsOfLearningUnitViewElement(learningUnitViewElement.getParentId());
        int index = getIndexOfElementIdInArray(learningUnitViewElementId, siblingsIds);
        if (index < siblingsIds.length - 1) return siblingsIds[index + 1];
        else
            return null;
    }

    public String getPreviousElementIdInDepthFirstOrder(String learningUnitViewElementId) {
        if (learningUnitViewElementId == null) return null;
        Vector elementIdsInDepthFirstOrder = getElementIdsInDepthFirstOrder();
        int index = elementIdsInDepthFirstOrder.indexOf(learningUnitViewElementId);
        if (index > 0) return (String)elementIdsInDepthFirstOrder.get(index - 1);
        else
            return null;
    }

    public int size() {
        return getElementIdsInDepthFirstOrder().size();
    }

    public int getElementPositionInDepthFirstOrder(String learningUnitViewElementId) {
        return getElementIdsInDepthFirstOrder().indexOf(learningUnitViewElementId);
    }

    public void addLearningUnitViewElement(FSLLearningUnitViewElement learningUnitViewElement, boolean original) {
        try {
            if (original) {
                learningUnitViewOriginalElementsById.put(learningUnitViewElement.getId(), learningUnitViewElement);
                learningUnitViewOriginalElements.add(learningUnitViewElement);
            }
            else {
                learningUnitViewUserElementsById.put(learningUnitViewElement.getId(), learningUnitViewElement);
                learningUnitViewUserElements.add(learningUnitViewElement);
            }
        }
        catch (NullPointerException e) { }
        try {
            long elementIdValue = Long.parseLong(learningUnitViewElement.getId().substring(1));
            highestElementIdValue = Math.max(elementIdValue, highestElementIdValue);
        }
        catch (Exception e) { }
    }

    // an author (originalElementsOnly=true) removes original elements
    // a learner (originalElementsOnly=false) removes user elements
    public void removeLearningUnitViewElement(String learningUnitViewElementId) {
        FSLLearningUnitViewElement learningUnitViewOriginalElement =
            getLearningUnitViewOriginalElement(learningUnitViewElementId);
        FSLLearningUnitViewElement learningUnitViewUserElement = getLearningUnitViewUserElement(learningUnitViewElementId);
        if (originalElementsOnly && learningUnitViewOriginalElement != null) {
            learningUnitViewOriginalElementsById.remove(learningUnitViewElementId);
            learningUnitViewOriginalElements.remove(learningUnitViewOriginalElement);
        }
        if (!originalElementsOnly && learningUnitViewUserElement != null) {
            learningUnitViewUserElementsById.remove(learningUnitViewElementId);
            learningUnitViewUserElements.remove(learningUnitViewUserElement);
        }
    }

    public void insertLearningUnitViewElementBefore(FSLLearningUnitViewElement element, String referenceElementId) {
        FSLLearningUnitViewElement referenceElement = getLearningUnitViewElement(referenceElementId, false);
        if (originalElementsOnly) {
            learningUnitViewOriginalElements.insertElementAt(element,
                learningUnitViewOriginalElements.indexOf(referenceElement));
            learningUnitViewOriginalElementsById.put(element.getId(), element);
        }
        else {
            // it is not allowed to insert an user element before an original element. Thats why the reference element
            // must be an pure(!) user element (so that no original element exists with the same id)
            learningUnitViewUserElements.insertElementAt(element, learningUnitViewUserElements.indexOf(referenceElement));
            learningUnitViewUserElementsById.put(element.getId(), element);
        }
        long elementIdValue = Long.parseLong(element.getId().substring(1));
        highestElementIdValue = Math.max(elementIdValue, highestElementIdValue);
    }

    public void insertLearningUnitViewElementAfter(FSLLearningUnitViewElement element, String referenceElementId) {
        FSLLearningUnitViewElement referenceElement = getLearningUnitViewElement(referenceElementId, false);
        if (originalElementsOnly) {
            learningUnitViewOriginalElements.insertElementAt(element,
                learningUnitViewOriginalElements.indexOf(referenceElement) + 1);
            learningUnitViewOriginalElementsById.put(element.getId(), element);
        }
        else {
            if (getLearningUnitViewUserElement(referenceElementId) == null)
                learningUnitViewUserElements.insertElementAt(element, 0);
            else
                learningUnitViewUserElements.insertElementAt(element,
                    learningUnitViewUserElements.indexOf(referenceElement) + 1);
            learningUnitViewUserElementsById.put(element.getId(), element);
        }
        try {
            long elementIdValue = Long.parseLong(element.getId().substring(1));
            highestElementIdValue = Math.max(elementIdValue, highestElementIdValue);
        }
        catch (Exception e) { }
    }

    public String createLearningUnitViewElementId() {
        return "e" + (++highestElementIdValue);
    }

    public void setOriginalElementsModified(boolean modified) {
        originalElementsModified = modified;
        if (!modified) {
            for (int i = 0; i < learningUnitViewOriginalElements.size(); i++) {
                ((FSLLearningUnitViewElement)learningUnitViewOriginalElements.get(i)).setModified(false);
            }
            this.dirtyElementFileIds = new Vector();
        }
    }

    public void setUserElementsModified(boolean modified) {
        userElementsModified = modified;
        if (!modified) {
            for (int i = 0; i < learningUnitViewUserElements.size(); i++) {
                ((FSLLearningUnitViewElement)learningUnitViewUserElements.get(i)).setModified(false);
            }
            this.dirtyElementFileIds = new Vector();
        }
    }

    public void setModified(boolean modified) {
        if (originalElementsOnly) setOriginalElementsModified(modified);
        else
            setUserElementsModified(modified);
    }

    public String getRelativeFileNameVersionForWriting(String relativeFileName,
        FSLLearningUnitViewElement learningUnitViewElement, String fileNamePrefix, String fileNameSuffix) {
            String fileId = createFileId(relativeFileName, learningUnitViewElement.getId());
            if (this.dirtyElementFileIds.contains(fileId)) return relativeFileName;
            else {
                String newRelativeFileName;
                if (originalElementsOnly)
                    newRelativeFileName = FLGFileUtility.createNewRelativeFileName("author_" + fileNamePrefix, fileNameSuffix,
                        getLearningUnitViewOriginalDataDirectory());
                else
                    newRelativeFileName = FLGFileUtility.createNewRelativeFileName("learner_" + fileNamePrefix, fileNameSuffix,
                        getLearningUnitViewUserDataDirectory());
                dirtyElementFileIds.add(createFileId(newRelativeFileName, learningUnitViewElement.getId()));
                return newRelativeFileName;
            }
    }
    
    public void removeAllElements() {
        String[] elementIds = getAllLearningUnitViewElementIds();
        for (int i = 0; i < elementIds.length; i++) {
            removeLearningUnitViewElement(elementIds[i]);
        }
    }

    private String createFileId(String fileName, String elementId) {
        String fileId = "";
        if (originalElementsOnly) fileId += "o";
        else
            fileId += "l";
        fileId += elementId + fileName;
        return fileId;
    }

    public File resolveRelativeFileName(String relativeFileName, FSLLearningUnitViewElement learningUnitViewElement) {
        if (isLearningUnitViewElementOriginal(learningUnitViewElement))
            return new File(getLearningUnitViewOriginalDataDirectory(), relativeFileName);
        else
            return new File(getLearningUnitViewUserDataDirectory(), relativeFileName);
    }

    public boolean isLearningUnitViewElementAncestor(String possibleAncestorId, String elementId) {
        boolean isAncestor = false;
        if (possibleAncestorId != null && elementId != null) {
            FSLLearningUnitViewElement element = getLearningUnitViewElement(elementId, false);
            while (!isAncestor && !element.getParentId().equals("none")) {
                element = getLearningUnitViewElement(element.getParentId(), false);
                isAncestor = element.getId().equals(possibleAncestorId);
            }
        }
        return isAncestor;
    }

    public boolean learningUnitViewElementsIdsAreEqual(String learningUnitViewElementAId, String learningUnitViewElementBId) {
        if (learningUnitViewElementAId == learningUnitViewElementBId) return true;
        if (learningUnitViewElementAId == null) return false;
        if (learningUnitViewElementBId == null) return false;
        return learningUnitViewElementAId.equals(learningUnitViewElementBId);
    }

    public boolean isUserElementsModified() {
        return userElementsModified;
    }

    public boolean isOriginalElementsModified() {
        return originalElementsModified;
    }

    private boolean isLearningUnitViewElementOriginal(FSLLearningUnitViewElement learningUnitViewElement) {
        for (int i = 0; i < learningUnitViewOriginalElements.size(); i++) {
            if (learningUnitViewOriginalElements.get(i) == learningUnitViewElement)
                return true;
        }
        return false;
    }

    private void addLearnerVersionOfLearningUnitViewElement(FSLLearningUnitViewElement learningUnitViewElement) {
        FSLLearningUnitViewElement userVersionOfLearningUnitViewElement = learningUnitViewElement.deepCopy();
        String[] externalFilesRelativePaths = learningUnitViewElement.getLearningUnitViewElementExternalFilesRelativePaths(this);
        if (externalFilesRelativePaths != null) {
            for (int i = 0; i < externalFilesRelativePaths.length; i++) {
                File sourceFile = new File(getLearningUnitViewOriginalDataDirectory(), externalFilesRelativePaths[i]);
                File destinationFile = new File(getLearningUnitViewUserDataDirectory(), externalFilesRelativePaths[i]);
                FLGFileUtility.copyFile(sourceFile, destinationFile);
            }
        }
        addLearningUnitViewElement(userVersionOfLearningUnitViewElement, false);
        FSLLearningUnitViewEvent event = FSLLearningUnitViewEvent.createElementsUserVersionCreatedEvent(learningUnitViewManagerId,
            new String[] { learningUnitViewElement.getId() });
        learningUnitViewEventGenerator.fireLearningUnitViewEvent(event);
    }

    private Vector getElementIdsInDepthFirstOrder() {
        Vector elementIds = new Vector();
        String[] topLevelElementIds = getTopLevelLearningUnitViewElementsIds();
        for (int i = 0; i < topLevelElementIds.length; i++) {
            elementIds.add(topLevelElementIds[i]);
            elementIds.addAll(getDescendantElementIdsInDepthFirstOrder(topLevelElementIds[i]));
        }
        return elementIds;
    }

    private Vector getDescendantElementIdsInDepthFirstOrder(String learningUnitViewElementId) {
        Vector elementIds = new Vector();
        String[] childrenIds = getChildrenIdsOfLearningUnitViewElement(learningUnitViewElementId);
        for (int i = 0; i < childrenIds.length; i++) {
            elementIds.add(childrenIds[i]);
            elementIds.addAll(getDescendantElementIdsInDepthFirstOrder(childrenIds[i]));
        }
        return elementIds;
    }

    private Vector addArrayElementsToVector(Object[] array, Vector vector) {
        for (int i = 0; i < array.length; i++) vector.add(array[i]);
        return vector;
    }

    private int getIndexOfElementIdInArray(String elementId, String[] elementArray) {
        int index = -1;
        for (int i = 0; i < elementArray.length; i++) {
            if (elementArray[i].equals(elementId)) {
                index = i;
                break;
            }
        }
        return index;
    }
}
