/* Generated by Freestyle Learning Group */

package freestyleLearning.setupCore.installAnywhere;

import java.io.*;
import javax.swing.*;
import javax.xml.bind.*;

import com.zerog.ia.api.pub.*;

import freestyleLearning.homeCore.learningUnitsManager.data.xmlBinding.*;
import freestyleLearning.homeCore.learningUnitsManager.data.xmlBindingSubclasses.*;
import freestyleLearning.homeCore.learningUnitsManager.data.xmlBindingSubclasses.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

/** 
 * This class manages to copy learning units from CD/DVD to the installation directory during setup
 * @author Mirko Wahn - Freestyle Learning Group
 */
public class FSLLearningUnitCopyAction extends CustomCodeAction {
    private FLGInternationalization internationalization;
    private String luString = "LearningUnits";
    private String luInstallDirName = "learningUnits";
    private String descriptorString = "learningUnitsDescriptor.xml";
    private String setupString = "Setup";
    private FLGImageProgressDialog progressDialog;
    private File descriptorFile;
    private FSLLearningUnitsDescriptor descriptor;
    private File learningUnitSourceDirectory;
    private File learningUnitTargetDirectory;
    private File installLearningUnitsDirectory;
    private File learningUnitsSourceDirectory;
    private String label;

    public FSLLearningUnitCopyAction() {
        internationalization = new FLGInternationalization("freestyleLearning.setupCore.installAnywhere.internationalization",
            getClass().getClassLoader());
    }

    /**
     * This is the method that is called at install-time.  The InstallerProxy
     * instance provides methods to access information in the installer, set status, and control flow.
     */
    public void install(InstallerProxy ip) throws InstallException {
        try {
            boolean learningUnitsFound = false;
            String userInstallDir = ip.substitute("$USER_INSTALL_DIR$");
            String executingFrom = ip.substitute("$EXTRACTOR_EXECUTABLE$");
            String fileSeparator = ip.substitute("$prop.file.separator$");
            String installDriveRoot;
            int setupDirIndex = executingFrom.indexOf(fileSeparator + setupString);
            if (setupDirIndex >= 0) {
                installDriveRoot = executingFrom.substring(0, setupDirIndex + 1);
            }
            else {
                installDriveRoot = executingFrom.substring(0, executingFrom.indexOf(fileSeparator) + 1);
            }
            learningUnitsSourceDirectory = new File(installDriveRoot + luString);
            boolean selectionAlive = true;
            if (learningUnitsSourceDirectory.exists()) {
                try {
                    descriptorFile = new File(learningUnitsSourceDirectory.getAbsolutePath() +
                        fileSeparator + descriptorString);
                    descriptor = loadLearningUnitsDescriptor(descriptorFile);
                    learningUnitsFound = true;
                    selectionAlive = false;
                }
                catch (Exception e) {
                    // invalid file
                    System.out.println("***error loading descriptor***\n\t" + e);
                    JOptionPane.showMessageDialog(null, "Error Loading Descriptor File:\n" + e,
                        "Error loading Descriptor File!", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            while (selectionAlive) {
                String title_luNotFound = internationalization.getString("message.title.luDirNotFound");
                String label_luNotFound = internationalization.getString("message.label.luDirNotFound");
                if ((FLGOptionPane.showConfirmDialog(label_luNotFound, title_luNotFound, FLGOptionPane.YES_NO_OPTION,
                    FLGOptionPane.QUESTION_MESSAGE)) == FLGOptionPane.YES_OPTION) {
                        FLGMediaFileChooser fileChooser = new FLGMediaFileChooser(FLGMediaFileChooser.XML);
                        if (fileChooser.showDialog(new File(installDriveRoot))) {
                            if (fileChooser.getSelectedFile() != null) {
                                File descriptorFile = fileChooser.getSelectedFile();
                                try {
                                    descriptor = loadLearningUnitsDescriptor(descriptorFile);
                                    learningUnitsSourceDirectory = descriptorFile.getParentFile();
                                    learningUnitsFound = true;
                                    selectionAlive = false;
                                }
                                catch (Exception e) {
                                    // invalid file
                                    System.out.println("***error loading descriptor***\n\t" + e);
                                    JOptionPane.showMessageDialog(null, "Error Loading Descriptor File:\n" + e,
                                        "Error loading Descriptor File!", JOptionPane.INFORMATION_MESSAGE);
                                }
                            }
                        }
                        else
                            selectionAlive = false;
                }
                else
                    selectionAlive = false;
            }
            if (learningUnitsFound) {
                // create Learning Units descriptor entries
                // and copy Units to installation directory
                installLearningUnitsDirectory = new File(userInstallDir + fileSeparator + luInstallDirName);
                int noFiles = (int)FLGFileUtility.fileCount(learningUnitsSourceDirectory);
                int size = (int)FLGFileUtility.size(learningUnitsSourceDirectory) / 1024;
                label = "kB";
                if (size > 1024) {
                    size = size / 1024;
                    label = "MB";
                }
                boolean doCopy = true;
                if (size > 1) {
                    if ((FLGOptionPane.showConfirmDialog(internationalization.getString("message.label.copying") + " " + size +
                        label + "\n\n" + internationalization.getString("message.label.doContinue"),
                        internationalization.getString("message.title.copyUnits"),
                        FLGOptionPane.YES_NO_OPTION, FLGOptionPane.QUESTION_MESSAGE)) != FLGOptionPane.YES_OPTION) {
                            doCopy = false;
                    }
                }
                if (!doCopy) return;
                // copy welcome screen
                try {
                    File welcomeScreenDirectory = new File(learningUnitsSourceDirectory.getAbsolutePath() +
                        fileSeparator + "welcomeScreen");
                    installLearningUnitsDirectory = new File(userInstallDir + fileSeparator + luInstallDirName);
                    File welcomeScreenTargetDirectory = new File(installLearningUnitsDirectory +
                        fileSeparator + "welcomeScreen");
                    welcomeScreenTargetDirectory.mkdirs();                    
                    FLGFileUtility.copyFileStructure(welcomeScreenDirectory, welcomeScreenTargetDirectory, true);
                }
                catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error copying welcome screen:\n" + e.getMessage(),
                        "Error", JOptionPane.INFORMATION_MESSAGE);
                }
                // Modify existing LearningUnitsDescriptor
                java.util.List learningUnitDescriptors = descriptor.getLearningUnitsDescriptors();
                File installedUnitsDescriptorFile = new
                    File(userInstallDir + fileSeparator + luInstallDirName + fileSeparator + "learningUnitsDescriptor.xml");
                FSLLearningUnitsDescriptor installedUnitsDescriptor;
                try {
                    installedUnitsDescriptor = loadLearningUnitsDescriptor(installedUnitsDescriptorFile);
                }
                catch (Exception e) {
                    e.printStackTrace();
                    FLGOptionPane.showMessageDialog("Exception while loading LU Descriptor" + e.getMessage(), 
                       "Error", FLGOptionPane.ERROR_MESSAGE);
                    return;
                }
                for (int i = 0; i < learningUnitDescriptors.size(); i++) {
                    FSLLearningUnitDescriptor learningUnitDescriptor =
                        (FSLLearningUnitDescriptor)learningUnitDescriptors.get(i);
                    String learningUnitPath = learningUnitDescriptor.getPath();
                    String learningUnitDirectoryName = null;
                    if (learningUnitPath != null) {
                        int lastSeparatorIndex = learningUnitPath.lastIndexOf(fileSeparator);
                        if (lastSeparatorIndex < 0) lastSeparatorIndex = learningUnitPath.lastIndexOf("/");
                        if (lastSeparatorIndex < 0) lastSeparatorIndex = 0;
                        learningUnitDirectoryName = learningUnitPath.substring(lastSeparatorIndex + 1,
                            learningUnitPath.length());
                    }
                    try {
                        // add descriptor entry
                        installedUnitsDescriptor.getLearningUnitsDescriptors().add(learningUnitDescriptor);
                        // copy unit contents (not for folders)
                        if (learningUnitDirectoryName != null) {
                            learningUnitDescriptor.setPath("./" + luInstallDirName + "/" + learningUnitDirectoryName);
                            // copy Learning Unit directory
                            learningUnitTargetDirectory = new File(installLearningUnitsDirectory + fileSeparator +
                                learningUnitDirectoryName);
                            learningUnitTargetDirectory.mkdirs();
                            learningUnitSourceDirectory = new File(learningUnitsSourceDirectory.getAbsolutePath() + fileSeparator +
                                learningUnitDirectoryName);
                            FLGFileUtility.copyFileStructure(learningUnitSourceDirectory, learningUnitTargetDirectory, true);
                        }
                        saveLearningUnitsDescriptor(installedUnitsDescriptor, installedUnitsDescriptorFile);
                    }
                    catch (DuplicateIdentifierException e) {
                        System.out.println(e);
                        JOptionPane.showMessageDialog(
                            new JLabel(internationalization.getString("message.title.dublicateUnit")),
                            internationalization.getString("message.label.dublicateUnit1") + "\n\n" +
                            learningUnitDescriptor.getTitle() + "\n\n" + internationalization.getString("message.label.dublicateUnit2"),
                            internationalization.getString("message.title.dublicateUnit"), JOptionPane.ERROR_MESSAGE);
                        installedUnitsDescriptor.getLearningUnitsDescriptors().remove(learningUnitDescriptor);
                        try {
                            saveLearningUnitsDescriptor(installedUnitsDescriptor, installedUnitsDescriptorFile);
                        }
                        catch (Exception ex) {
                            System.out.println(ex);
                        }
                    }
                    catch (Exception e) {
                        System.out.println(e);
                        FLGOptionPane.showMessageDialog("Exception while adding entries:" + e.getMessage(), 
                           "Error", FLGOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }

    private FSLLearningUnitsDescriptor loadLearningUnitsDescriptor(File learningUnitsDescriptorFile) throws Exception {
        FSLLearningUnitsDescriptor learningUnitsDescriptor = null;
        Dispatcher dispatcher = LearningUnitsDescriptor.newDispatcher();
        dispatcher.register(LearningUnitsDescriptor.class, FSLLearningUnitsDescriptor.class);
        dispatcher.register(LearningUnitDescriptor.class, FSLLearningUnitDescriptor.class);
        FileInputStream learningUnitsDescriptorFileInputStream = null;
        learningUnitsDescriptorFileInputStream = new FileInputStream(learningUnitsDescriptorFile);
        learningUnitsDescriptor = (FSLLearningUnitsDescriptor)dispatcher.unmarshal(learningUnitsDescriptorFileInputStream);
        learningUnitsDescriptorFileInputStream.close();
        return learningUnitsDescriptor;
    }

    private boolean saveLearningUnitsDescriptor(FSLLearningUnitsDescriptor installedUnitsDescriptor, File installedUnitsDescriptorFile)
        throws DuplicateIdentifierException {
            try {
                FileOutputStream fileOutputStream = new FileOutputStream(installedUnitsDescriptorFile);
                installedUnitsDescriptor.validate();
                installedUnitsDescriptor.marshal(fileOutputStream);
                fileOutputStream.close();
                return true;
            }
            catch (DuplicateIdentifierException die) {
                throw die;
            }
            catch (Exception e) {
                e.printStackTrace();
            }
            return false;
    }

    /**
     *  This is the method that is called at uninstall-time.  The DataInput
     * instance provides access to any information written at install-time
     * with the instance of DataOutput provided by UninstallerProxy.getLogOutput().
     */
    public void uninstall(UninstallerProxy up) throws InstallException {
        // nothing to modify, descriptor will be deleted anyway...
    }

    /** This method will be called to display a status message during the installation. */
    public String getInstallStatusMessage() {
        return internationalization.getString("install.statusMessage");
    }

    /** This method will be called to display a status message during the uninstall. */
    public String getUninstallStatusMessage() {
        return null;
    }
}
