/* Generated by Freestyle Learning Group */

package freestyleLearning.homeCore.helpManager;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.event.*;

import freestyleLearning.homeCore.helpManager.dialogs.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

public class FSLHelpHistoryManager implements HyperlinkListener {
    private java.util.List historyElements;
    private int currentHistoryElementIndex;
    private FLGInternationalization internationalization;
    private FLGMainFrameToolBarButton button_previousHelpElement;
    private FLGMainFrameToolBarButton button_nextHelpElement;
    private FSLHelpManagerDialog helpManagerDialog;

    public FSLHelpHistoryManager() {
    }

    public void init(FSLHelpManagerDialog helpManagerDialog) {
        this.helpManagerDialog = helpManagerDialog;
        resetHistoryToMainPage();
        internationalization = new FLGInternationalization("freestyleLearning.homeCore.helpManager.internationalization",
            getClass().getClassLoader());
        buildIndependentUI();
        buildDependentUI();
    }

    public FLGMainFrameToolBarButton[] getEditToolBarButtons() {
        return new FLGMainFrameToolBarButton[] { button_previousHelpElement, button_nextHelpElement };
    }

    private void resetHistoryToMainPage() {
        historyElements = new ArrayList();
        currentHistoryElementIndex = -1;
        addElementToHistory("help.html");
    }

    private void clearHistory() {
        resetHistoryToMainPage();
        buildDependentUI();
    }

    private void buildIndependentUI() {
        button_previousHelpElement = new FLGMainFrameToolBarButton(loadImage("images/buttonPreviousElement.gif"));
        button_previousHelpElement.setToolTipText(internationalization.getString("button.previousElement.toolTipText"));
        button_nextHelpElement = new FLGMainFrameToolBarButton(loadImage("images/buttonNextElement.gif"));
        button_nextHelpElement.setToolTipText(internationalization.getString("button.nextElement.toolTipText"));
        button_previousHelpElement.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    moveToPreviousHelpElement();
                }
            });
        button_nextHelpElement.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    moveToNextHelpElement();
                }
            });
    }

    private void buildDependentUI() {
        button_previousHelpElement.setEnabled(currentHistoryElementIndex > 0);
        button_nextHelpElement.setEnabled(currentHistoryElementIndex < historyElements.size() - 1);
    }

    private String getCurrentHistoryElement() {
        if (currentHistoryElementIndex >= 0) {
            return (String)historyElements.get(currentHistoryElementIndex);
        }
        else {
            return null;
        }
    }

    private void moveToPreviousHelpElement() {
        if (currentHistoryElementIndex > 0) {
            updateHtmlPane(--currentHistoryElementIndex);
            buildDependentUI();
        }
    }

    private void moveToNextHelpElement() {
        if (currentHistoryElementIndex < historyElements.size()) {
            updateHtmlPane(++currentHistoryElementIndex);
            buildDependentUI();
        }
    }

    /** modified by Carsten Fiedler, 18.07.2003 * */
    private void updateHtmlPane(int historyElementIndex) {
        String hyperlinkTarget = (String)historyElements.get(historyElementIndex);
        if (currentHistoryElementIndex > 0) {
            if (hyperlinkTarget.equals("main")) {
                helpManagerDialog.setMainHelpText();
            } 
            else { 
                helpManagerDialog.setTargetText(hyperlinkTarget); 
            }
        } 
        else { 
            helpManagerDialog.setMainHelpText(); 
        }
    }

    private void addElementToHistory(String historyElement) {
        currentHistoryElementIndex++;
        while (historyElements.size() > currentHistoryElementIndex) {
            historyElements.remove(historyElements.size() - 1);
        }
        historyElements.add(historyElement);
    }

    private Image loadImage(String imageFileName) {
        return FLGImageUtility.loadImageAndWait(getClass().getResource(imageFileName));
    }

    // HyperlinkListener method
    public void hyperlinkUpdate(HyperlinkEvent e) {
        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            String hyperlinkTarget = e.getDescription();
            addElementToHistory(hyperlinkTarget);
            buildDependentUI();
        }
    }
}
