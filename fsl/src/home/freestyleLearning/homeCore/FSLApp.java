/* Generated by Freestyle Learning Group */

package freestyleLearning.homeCore;

import java.awt.*;
import java.io.*;
import javax.swing.*;
import freestyleLearning.homeCore.mainFrame.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

/**
 * The main class of the Freestyle Learning Home. It creates and initializes the MainFrame- and ManagerOfManagers-Classes
 * and shows the MainFrame.
 * @author Norman Lahme, Mirko Wahn
 * @version 1.0
 */
public class FSLApp {
    private static FLGImageProgressDialog progressDialog;
    private static FSLMainFrame frame;
    private static int progressSteps = 1000;

    /**
     * It first creates and shows a splah window. Then it creates the main frame (FSLMainFrame) and the FSLManagerOfManagers.
     */
    public static void main(String[] args) {
        initUI();
        // read arguments
        FLGUIUtilities.traceMode = false;
        if (args != null) {
            readArguments(args);
        }
        progressDialog = new FLGImageProgressDialog(null, 0, progressSteps, 0,
            FSLApp.class.getClassLoader().getResource("freestyleLearning/homeCore/images/splash.gif"), (Color)UIManager.get("FSLColorBlue"),
            (Color)UIManager.get("FSLColorRed"));
        progressDialog.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        updateProgressBar(progressSteps * 1. / 3);
        // Main Frame
        frame = new FSLMainFrame();
        FLGUIUtilities.setMainFrame(frame);
        // Manager of Managers
        FSLManagerOfManagers managerOfManagers = new FSLManagerOfManagers();
        File programDirectory = new java.io.File(new java.io.File("").getAbsolutePath());
        managerOfManagers.init(frame, programDirectory,
            new FLGLongLastingOperationStatus() {
                public int getStepSize() {
                    return (int)(progressSteps * 1. / 3);
                }
                public void setStatusValue(int value) {
                    updateProgressBar(value);
                }
                public int getStatusValue() {
                    return progressDialog.getValue();
                }
            }, progressDialog);
        updateProgressBar(progressSteps * 2. / 3);
        // connects the manager of managers to the main frame and initializes the main frame
        frame.init(managerOfManagers,
            new FLGLongLastingOperationStatus() {
                public int getStepSize() {
                    return (int)(progressSteps * 1. / 3);
                }
                public void setStatusValue(int value) {
                    updateProgressBar(value);
                }
                public int getStatusValue() {
                    return progressDialog.getValue();
                }
            });
        updateProgressBar(progressSteps * 3. / 3);
        // hides the splash window and shows the main frame
        progressDialog.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        progressDialog.dispose();
        frame.setVisible(true);
    }

    public static void updateProgressBar(double value) {
        final int newValue = (int)value;
        SwingUtilities.invokeLater(
            new Runnable() {
                public void run() {
                    progressDialog.setBarValue(newValue);
                }
            });
    }

    /** Sets the global UI variables */
    private static void initUI() {
        Color baseColor1 = FLGUIUtilities.BASE_COLOR1;
        Color baseColor2 = FLGUIUtilities.BASE_COLOR2;
        Color baseColor3 = FLGUIUtilities.BASE_COLOR3;
        Color baseColor4 = FLGUIUtilities.BASE_COLOR4;
        Color defaultHtmlBackgroundColor = FLGUIUtilities.DEFAULT_HTML_BACKGROUND_COLOR;
        Color red = FLGUIUtilities.RED;
        Color green = FLGUIUtilities.GREEN;
        Color blue = FLGUIUtilities.BLUE;
        UIManager.put("FLGDialog.background", baseColor4);
        UIManager.put("FSLLearningUnitViewElementsContentsPanel.BaseFontSize", new Integer(16));
        UIManager.put("FSLLearningUnitViewElementsStructurePanel.BaseFontSize", new Integer(16));
        UIManager.put("FSLLearningUnitViewDefaultBaseFontSize", new Integer(16));
        UIManager.put("FSLMainFrameColor1", baseColor1);
        UIManager.put("FSLMainFrameColor2", baseColor2);
        UIManager.put("FSLMainFrameColor3", baseColor3);
        UIManager.put("FSLMainFrameColor4", baseColor4);
        UIManager.put("FSLMainFrameDefaultColor1", baseColor1);
        UIManager.put("FSLMainFrameDefaultColor2", baseColor2);
        UIManager.put("FSLMainFrameDefaultColor3", baseColor3);
        UIManager.put("FSLMainFrameDefaultColor4", baseColor4);
        UIManager.put("FSLDefaultHtmlPaneBackground", defaultHtmlBackgroundColor);
        UIManager.put("FSLColorRed", red);
        UIManager.put("FSLColorGreen", green);
        UIManager.put("FSLColorBlue", blue);
        UIManager.put("FLGHtmlPaneInputTagTextComponent.Font", new Font("SansSerif", Font.PLAIN, 16));
        UIManager.put("ProgressBar.selectionForeground", red);
        UIManager.put("ProgressBar.selectionBackground", Color.white);
        setLookAndFeel(UIManager.getSystemLookAndFeelClassName());   
    }

    private static void readArguments(String[] args) {
        for (int i = 0; i < args.length; i = i + 2) {
            if (args[i].startsWith("-")) {
                if (args[i] != null && args[i + 1] != null) {
                    char param = args[i].charAt(1);
                    performCommand(param, args[i + 1]);
                }
            }
        }
    }

    private static void performCommand(char param, String command) {
        switch (param) {
            case 't':
                FLGUIUtilities.traceMode = command.equalsIgnoreCase("true");
                if (FLGUIUtilities.traceMode)
                    System.out.println("\nTrace mode set to " + FLGUIUtilities.traceMode);
                break;
            case 'l':
                setLookAndFeel(command);
                break;
        }
    }

    /**
     * Set the Look And Feel. A L&F can be given as a class name or as a zip-file name.
     * @param <code>laf</code> the desired Look and Feel
     */
    private static void setLookAndFeel(String laf) {
        try {
            UIManager.setLookAndFeel(laf);
            SwingUtilities.updateComponentTreeUI(FLGUIUtilities.getMainFrame());
        }
        catch (Exception e) {
        }
    }

}
