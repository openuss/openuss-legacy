/* Generated by Freestyle Learning Group */

package freestyleLearning.homeCore.mainFrame;

import java.awt.*;
import java.awt.event.*;
import java.util.*;

import javax.swing.*;
import freestyleLearning.homeCore.*;
import freestyleLearning.homeCore.usersManager.event.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

/**
 * The main frame of Freestyle Learning Home.
 * @author Norman Lahme, Mirko Wahn
 * @version 1.0
 */
public class FSLMainFrame extends JFrame {
    public static final int EMPTY_BORDER_SIZE = 10;
    public static final int NO_MAINFRAMECOLORS = 4;
    private static final String COLOR1 = "FSLMainFrameColor1";
    private static final String COLOR2 = "FSLMainFrameColor2";
    private static final String COLOR3 = "FSLMainFrameColor3";
    private static final String COLOR4 = "FSLMainFrameColor4";
    private static final String BGCOLOR1 = "FSLDefaultHtmlPaneBackground";
    private static final String COLOR_RED = "FSLColorRed";
    private static final String COLOR_GREEN = "FSLColorGreen";
    private FLGInternationalization internationalization;
    private FLGLongLastingOperationStatus progressStatus;
    private FSLManagerOfManagers managerOfManagers;
    private Hashtable learningUnitActions;
    private JPanel assistantPanel;
    private JPanel structurePanel;
    private JPanel mainCenterLeftPanel;
    private JSplitPane mainCenterPanel;
    private JDialog hoveringStructureFrame;
    private JPanel hoveringStructureTreePanel;
    private boolean isHovering;

    /**
     * Initializes the one and only instance of this class.
     * @param managerOfManagers: the one and only instance of the FSLManagersOfManagers - the manager of managers
     */
    public void init(FSLManagerOfManagers managerOfManagers, FLGLongLastingOperationStatus progressStatus) {
        this.managerOfManagers = managerOfManagers;
        this.progressStatus = progressStatus;
        learningUnitActions = new Hashtable();
        internationalization = new FLGInternationalization("freestyleLearning.homeCore.mainFrame.internationalization",
            FSLMainFrame.class.getClassLoader());
        this.managerOfManagers.getUsersManager().addUserListener(new FSLMainFrameUserListener());
        buildIndependentUI();
        this.managerOfManagers.getProgramConfigurationManager().checkForAutomaticUserLogin();
        isHovering = false;
    }

    /**
     * Builds the UI components which are independent of a specific content. Among others these
     * are containers for the panels of the learning units manager (content panel, structure
     * panel, etc). These panels get their way to the corresponding
     * panels by pulling them from the learning units manager, i.e. the
     * main frame asks the learning unit manager (via the manager of managers reference) for the panels.
     */
    private void buildIndependentUI() {
        // Sets the location and size of the main frame
        Dimension screenDim = Toolkit.getDefaultToolkit().getScreenSize();
        double frameScaleFactor = 0.80;
        int frameHeight = (int)(screenDim.height*frameScaleFactor);
        int frameWidth = (int)(screenDim.width*frameScaleFactor);
        setLocation((screenDim.width - frameWidth)/2, (screenDim.height - frameHeight)/2);
        setSize(frameWidth, frameHeight);
        setExtended(false);
        // title and menu bar
        setTitle(internationalization.getString("frameTitle"));
        java.net.URL imageURL = getClass().getClassLoader().getResource("freestyleLearning/homeCore/images/frameIcon.gif");
        setIconImage(new ImageIcon(imageURL).getImage());
        setJMenuBar(createMenuBar());
        // creates the panels
        // mainPanel contains all other panels, fills contentPane
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        setContentPane(mainPanel);
        mainPanel.add(createToolBarPanel(), BorderLayout.NORTH);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(progressStatus.getStepSize() / 3.));
        mainCenterPanel = new JSplitPane() {
            public void updateUI() {
                super.updateUI();
                setDividerSize(2);
            }
        };
        mainCenterPanel.setOpaque(false);
        mainCenterPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        mainPanel.add(mainCenterPanel, BorderLayout.CENTER);
        mainCenterLeftPanel = new FLGEffectPanel(COLOR4, false);   
        mainCenterLeftPanel.setLayout(new BorderLayout());
        mainCenterLeftPanel.setOpaque(false);
        mainCenterLeftPanel.setPreferredSize(new Dimension(screenDim.width/4, (int)(screenDim.height/2*0.7)));
        JPanel mainCenterRightPanel = new FLGEffectPanel(COLOR3, false);
        mainCenterRightPanel.setLayout(new BorderLayout());
        mainCenterRightPanel.setOpaque(false);
        mainCenterPanel.setLeftComponent(mainCenterLeftPanel);
        mainCenterPanel.setRightComponent(mainCenterRightPanel);
        mainCenterPanel.setDividerLocation((int)(getSize().getWidth() / 3));
        mainCenterPanel.setDividerSize(2);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(progressStatus.getStepSize() / 8.));
        structurePanel = createStructurePanel();
        mainCenterLeftPanel.add(structurePanel, BorderLayout.CENTER);
        mainCenterLeftPanel.add(createPrimarySelectionPanel(), BorderLayout.NORTH);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(progressStatus.getStepSize() / 8.));
        JPanel secondarySelectionPanel = createSecondarySelectionPanel();
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(progressStatus.getStepSize() / 8.));
        mainCenterLeftPanel.add(secondarySelectionPanel, BorderLayout.SOUTH);
        // added by Gunnar Thies:
        JPanel mainCenterRightSubPanel = new FLGEffectPanel(COLOR3, false);
        mainCenterRightSubPanel.setLayout(new BorderLayout());
        mainCenterRightSubPanel.add(createContentPanel(), BorderLayout.CENTER);
        mainCenterRightSubPanel.add(createContextDependentInteractionPanel(), BorderLayout.SOUTH);
        mainCenterRightPanel.add(mainCenterRightSubPanel, BorderLayout.CENTER);
        //Gunnar Thies finished
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(progressStatus.getStepSize() / 8.));
        JPanel mainCenterRightBottomPanel = new FLGEffectPanel(COLOR3, COLOR1, false);
        mainCenterRightBottomPanel.setLayout(new BorderLayout());
        mainCenterRightBottomPanel.setOpaque(false);
        mainCenterRightPanel.add(mainCenterRightBottomPanel, BorderLayout.SOUTH);
        mainCenterRightBottomPanel.add(createAssistantPanel(), BorderLayout.EAST);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(progressStatus.getStepSize() / 8.));
        JPanel mainCenterRightBottomCenterPanel = new JPanel(new BorderLayout());
        mainCenterRightBottomCenterPanel.setOpaque(false);
        mainCenterRightBottomPanel.add(mainCenterRightBottomCenterPanel, BorderLayout.CENTER);
        mainCenterRightBottomCenterPanel.add(createStatusPanel(), BorderLayout.NORTH);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(progressStatus.getStepSize() / 8.));
        JPanel mainCenterRightBottomCenterSouthPanel = new JPanel(new BorderLayout());
        mainCenterRightBottomCenterSouthPanel.setOpaque(false);
        mainCenterRightBottomCenterSouthPanel.add(createInteractionPanel(), BorderLayout.CENTER);
        mainCenterRightBottomCenterSouthPanel.add(createContextDependentActivationPanel(), BorderLayout.EAST);
        mainCenterRightBottomCenterPanel.add(mainCenterRightBottomCenterSouthPanel, BorderLayout.SOUTH);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(progressStatus.getStepSize() / 8.));
        secondarySelectionPanel.setPreferredSize(
            new Dimension(50, (int)mainCenterRightBottomPanel.getPreferredSize().getHeight()));
        // override default closing operation
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(
            new WindowAdapter() {
                public void windowClosing(WindowEvent ev) {
                    exitProgram();
                }
            });
        // prepare structure hovering 
        hoveringStructureFrame = new JDialog(this, false);  // internationalization.getString("frame.hoveringStructure.title")
        hoveringStructureFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        hoveringStructureFrame.addWindowListener(new WindowAdapter() {
           public void windowClosing(WindowEvent e) {
               switchHoverStructurePanel();
           }
        });
        hoveringStructureFrame.getContentPane().setLayout(new BorderLayout());
        hoveringStructureTreePanel = new JPanel(new BorderLayout());
        hoveringStructureFrame.getContentPane().add(hoveringStructureTreePanel);
        int hoveringWindowWidth = screenDim.width/4;
        int hoveringWindowHeight = (int)(screenDim.height * 0.7);
        hoveringStructureFrame.setSize(new Dimension(hoveringWindowWidth, hoveringWindowHeight));
        hoveringStructureFrame.setLocation(0, (screenDim.height - hoveringWindowHeight)/2);           
    }
    
    public void switchHoverStructurePanel() {
        if (isHovering) {
            hoveringStructureFrame.setVisible(false);
            isHovering = false;
            hoveringStructureTreePanel.removeAll();
            mainCenterPanel.setLeftComponent(mainCenterLeftPanel);
        }
        else {
            isHovering = true;
            mainCenterPanel.remove(mainCenterLeftPanel);
            hoveringStructureTreePanel.add(mainCenterLeftPanel);
            hoveringStructureFrame.setVisible(true);
            hoveringStructureFrame.requestFocus();
        }
    }

    /**
     * Creates the container which holds the component which allows the selection of a learning unit.
     * @return the created primary selection panel
     */
    private JPanel createPrimarySelectionPanel() {
        JPanel primarySelectionPanel = new JPanel(new BorderLayout());
        primarySelectionPanel.setOpaque(false);
        primarySelectionPanel.setBorder(BorderFactory.createEmptyBorder(EMPTY_BORDER_SIZE, EMPTY_BORDER_SIZE,
            EMPTY_BORDER_SIZE, EMPTY_BORDER_SIZE));
        primarySelectionPanel.add(managerOfManagers.getLearningUnitsManager().getLearningUnitSelectionPanel());
        return primarySelectionPanel;
    }

    /**
     * Creates the container which holds the components to activate a learning unit view manager.
     * @return the created secondary selection panel
     */
    private JPanel createSecondarySelectionPanel() {
        JPanel secondarySelectionPanel = new FLGEffectPanel(COLOR4, COLOR2, true);
        secondarySelectionPanel.setLayout(new BorderLayout());
        secondarySelectionPanel.setBorder(BorderFactory.createEmptyBorder(0, EMPTY_BORDER_SIZE,
            EMPTY_BORDER_SIZE, EMPTY_BORDER_SIZE));
        secondarySelectionPanel.add(managerOfManagers.getLearningUnitsManager().getLearningUnitViewsPrimaryButtonsPanel());
        return secondarySelectionPanel;
    }

    /**
     * Creates the container which holds the structure panel of the active learning unit view
     * manager of the active learning unit. This is the area where for example the chapter
     * structure of the Text Study view is displayed.
     * @return the created structure panel
     */
    private JPanel createStructurePanel() {
        JPanel structurePanel = new FLGEffectPanel(COLOR1, false);
        structurePanel.setLayout(new BorderLayout());
        structurePanel.setBorder(BorderFactory.createEmptyBorder(0, EMPTY_BORDER_SIZE, EMPTY_BORDER_SIZE, EMPTY_BORDER_SIZE));
        structurePanel.add(managerOfManagers.getLearningUnitsManager().getLearningUnitViewElementsStructurePanelContainer());
        return structurePanel;
    }
    //added by Gunnar Thies

    /**
     * Creates the container which holds the contextDependentInteraction-panel of the active learning unit view
     * manager of the active learning unit. This is the area where for example the buttons of the Audio-View are displayed.
     * @return the created contextDependentInteraction-Panel
     */
    private JPanel createContextDependentInteractionPanel() {
        JPanel contextDependentInteractionPanel =
            managerOfManagers.getLearningUnitsManager().getLearningUnitViewContextDependentInteractionPanelContainer();
          return contextDependentInteractionPanel;
    }
    //Gunnar Thies finished

    /**
     * Creates the container which holds the content panel of the active learning unit view
     * manager of the active learning unit. This is the area where for example the text of the Text Study view is displayed.
     * @return the created content panel
     */
    private JPanel createContentPanel() {
        JPanel contentPanel = new FLGEffectPanel(COLOR1, false);
        contentPanel.setLayout(new BorderLayout());
        contentPanel.setBorder(BorderFactory.createEmptyBorder(EMPTY_BORDER_SIZE, EMPTY_BORDER_SIZE,
            EMPTY_BORDER_SIZE, EMPTY_BORDER_SIZE));
        contentPanel.add(managerOfManagers.getLearningUnitsManager().getLearningUnitViewElementContentPanelContainer());
        return contentPanel;
    }

    /**
     * Creates the container which holds the assistant panel of the active learning unit view
     * manager of the active learning unit. This is the area where for example the video-based
     * assistant of the Check Up is displayed.
     * @return the created status panel
     */
    private JPanel createAssistantPanel() {
        assistantPanel = new FLGEffectPanel(FSLMainFrame.class.getClassLoader().getResource("freestyleLearning/homeCore/mainFrame/images/defaultAssistant.gif"), false);
        assistantPanel.setLayout(new BorderLayout());
        assistantPanel.setPreferredSize(new Dimension(120 + EMPTY_BORDER_SIZE, 90 + EMPTY_BORDER_SIZE));
        assistantPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, EMPTY_BORDER_SIZE, EMPTY_BORDER_SIZE));
        assistantPanel.add(managerOfManagers.getLearningUnitsManager().getLearningUnitViewAssistantPanelContainer());
        return assistantPanel;
    }

    /**
     * Creates the container which holds the status panel of the active learning unit view manager
     * of the active learning unit. This is the area where for example the current page number of the Text Study is displayed.
     * @return the created status panel
     */
    private JPanel createStatusPanel() {
        JPanel statusPanel = new JPanel(new BorderLayout());
        statusPanel.setOpaque(false);
        statusPanel.setBorder(BorderFactory.createEmptyBorder(0, EMPTY_BORDER_SIZE, EMPTY_BORDER_SIZE, EMPTY_BORDER_SIZE));
        statusPanel.setPreferredSize(new Dimension(10, 20 + 2 * EMPTY_BORDER_SIZE));
        statusPanel.add(managerOfManagers.getLearningUnitsManager().getLearningUnitViewStatusPanelContainer());
        return statusPanel;
    }

    /**
     * Creates the container which holds the interaction panel of the active learning unit view
     * manager of the active learning unit. This is the area where for example the chapter
     * navigation buttons of the Text Study are placed.
     * @return the created interaction panel
     */
    private JPanel createInteractionPanel() {
        JPanel interactionPanel = new JPanel(new BorderLayout());
        interactionPanel.setOpaque(false);
        interactionPanel.setBorder(BorderFactory.createEmptyBorder(0, EMPTY_BORDER_SIZE,
            EMPTY_BORDER_SIZE, EMPTY_BORDER_SIZE));
        interactionPanel.add(managerOfManagers.getLearningUnitsManager().getLearningUnitViewElementInteractionPanelContainer());
        return interactionPanel;
    }

    /**
     * Creates the container which holds the context dependent activation panel for all learning
     * unit view managers of the active learning unit. This panel contains buttons for each
     * learning unit which provides context dependent activation besides the regular primary/secondary view activation.
     * @return the created interaction panel
     */
    private JPanel createContextDependentActivationPanel() {
        JPanel contextDependentActivationPanel = new JPanel(new BorderLayout());
        contextDependentActivationPanel.setOpaque(false);
        contextDependentActivationPanel.setBorder(BorderFactory.createEmptyBorder(0, EMPTY_BORDER_SIZE,
            EMPTY_BORDER_SIZE, EMPTY_BORDER_SIZE));
        contextDependentActivationPanel.add(managerOfManagers.getLearningUnitsManager().getLearningUnitViewContextDependentActivationPanelContainer());
        return contextDependentActivationPanel;
    }

    /**
     * Creates a panel to hold the tool bar of the main frame. The tool bar gets its components
     * from the leanring units manager.
     */
    private JPanel createToolBarPanel() {
        JPanel toolBar = new JPanel(new FLGLeftToRightLayout(5));
        toolBar.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        toolBar.setOpaque(false);
        toolBar.add(managerOfManagers.getLearningUnitsManager().getMainFrameToolBarButtonsPanel());
        JPanel toolBarPanel = new FLGEffectPanel(COLOR1, COLOR4, true);
        toolBarPanel.setBorder(BorderFactory.createEmptyBorder(2, EMPTY_BORDER_SIZE, 2, EMPTY_BORDER_SIZE));
        toolBarPanel.setLayout(new BorderLayout());
        toolBarPanel.add(toolBar);
        return toolBarPanel;
    }

    /**
     * Creates the menu bar of the main frame. The menu bar gets its menus from the main frame
     * (file menu), users manager (user menu), learning units manager (learning unit menu) and
     * program configuration manager (configuration).
     * @return the created menu bar
     */
    private JMenuBar createMenuBar() {
        JMenuBar menuBar = new JMenuBar();
        menuBar.setBorderPainted(false);
        JMenu menu;
        // File menu
        menu = new JMenu(internationalization.getString("menu.file.title"));
        menu.setMnemonic(internationalization.getString("menu.file.mnemonic").charAt(0));
        // Print
        JMenuItem menuItem = createMenuItem("menu.file.print.title");
        menuItem.setAction(managerOfManagers.getLearningUnitsManager().getLearningUnitAction("printAction"));
        menuItem.setIcon(FLGIconFactory.createScaledIcon(loadImageIcon("print.gif"), 0.15, 0.15));
        menuItem.setMnemonic(internationalization.getString("menu.file.print.mnemonic").charAt(0));
        menuItem.setAccelerator(KeyStroke.getKeyStroke(internationalization.getString("menu.file.print.mnemonic").charAt(0), KeyEvent.CTRL_MASK));
        menu.add(menuItem);
        menu.addSeparator();

        menuItem = createMenuItem("menu.file.welcomeScreen.display");
        menuItem.setAction(managerOfManagers.getLearningUnitsManager().getLearningUnitAction("displayWelcomeScreenAction"));
        menuItem.setMnemonic(internationalization.getString("menu.file.welcomeScreen.mnemonic").charAt(0));
        menuItem.setAccelerator(KeyStroke.getKeyStroke(internationalization.getString("menu.file.welcomeScreen.mnemonic").charAt(0), KeyEvent.CTRL_MASK));
        menu.add(menuItem);
        menu.addSeparator();

        /*** Carsten Fiedler, 29.08.2005 ***/
        // Import
        JMenuItem importItem = createMenuItem("menu.file.import.title");
        importItem.setAction(managerOfManagers.getLearningUnitsManager().getLearningUnitAction("importAction"));
        menu.add(importItem);
        // Export
        JMenuItem exportItem = createMenuItem("menu.file.export.title");
        exportItem.setAction(managerOfManagers.getLearningUnitsManager().getLearningUnitAction("exportAction"));
        if (managerOfManagers.getLearningUnitsManager().getActiveLearningUnitId()==null) {
        	exportItem.setEnabled(false);
        } else {exportItem.setEnabled(true);}
        menu.add(exportItem);
        menu.addSeparator();
        /*** Carsten Fiedler finished ***/
        
        // Exit
        menuItem = createMenuItem("menu.file.exit.title");
        menuItem.setMnemonic(internationalization.getString("menu.file.exit.mnemonic").charAt(0));
        menuItem.setAccelerator(KeyStroke.getKeyStroke(internationalization.getString("menu.file.exit.mnemonic").charAt(0), KeyEvent.CTRL_MASK));
        menu.add(menuItem);
        menuBar.add(menu);
        // user menu
        menuBar.add(managerOfManagers.getUsersManager().getUserMenu());
        // learning units menu
        menuBar.add(managerOfManagers.getLearningUnitsManager().getLearningUnitMenu());
        // configuration menu
        menu = new JMenu(internationalization.getString("menu.configuration.title"));
        menu.setMnemonic(internationalization.getString("menu.configuration.mnemonic").charAt(0));
        menu.add(managerOfManagers.getProgramConfigurationManager().getProgramConfigurationMenuItem());
        menuBar.add(menu);
        // help menu
        menuBar.add(managerOfManagers.getHelpManager().getHelpMenu());
        return menuBar;
    }

    private Icon loadImageIcon(String imageFileName) {
        return new ImageIcon(getClass().getClassLoader().getResource("freestyleLearning/homeCore/learningUnitsManager/images/" +
            imageFileName));
    }

    /**
     * Creates a new menu item with the label "menuItemId". The label serves also as the action command.
     * @param menuItemId: the label and action command  of the menu item to create
     * @return the created menu item
     */
    private JMenuItem createMenuItem(String menuItemId) {
        Action action = new AbstractAction(internationalization.getString(menuItemId)) {
            public void actionPerformed(ActionEvent e) {
                menuItemSelected(((JMenuItem)e.getSource()).getActionCommand());
            }
        };
        JMenuItem menuItem = new JMenuItem(action);
        menuItem.setActionCommand(menuItemId);
        return menuItem;
    }

    private void menuItemSelected(String menuItemId) {
        if (menuItemId == "menu.file.exit.title") exitProgram();
        if (menuItemId == "menu.file.print.title") printActiveElementContentPanel();
    }

    private void showSearchDialog() {
        managerOfManagers.getLearningUnitsManager().showSearchDialog();
    }

    private void printActiveElementContentPanel() {
        managerOfManagers.getLearningUnitsManager().printActiveElement();
    }

    private void exitProgram() {
        managerOfManagers.getUsersManager().saveUserFrameConfiguration();
        if (managerOfManagers.programIsClosing()) System.exit(0);
    }
    
    private void setExtended(boolean extended) {
        if (extended) {
            setExtendedState(JFrame.MAXIMIZED_BOTH);
        }
        else {
            setExtendedState(JFrame.NORMAL);
        }
    }
    
    /** Listener Class for UserEvents */
    class FSLMainFrameUserListener implements FSLUserListener {
        public void userChanged(FSLUserEvent userEvent) {
            int chars = userEvent.getUserName().length();
            String userName = (userEvent.getUserName().substring(0, 1)).toUpperCase() +
                userEvent.getUserName().substring(1, chars);
            chars = userEvent.getUserRole().length();
            String userRole = (userEvent.getUserRole().substring(0, 1)).toUpperCase() +
                userEvent.getUserRole().substring(1, chars);
            String userInfo = " - [" + internationalization.getString("text.user") + " " + userName + " " +
                internationalization.getString("text.loggedInAs") + " " + userRole + "]";
            String titleString = internationalization.getString("frameTitle") + userInfo;
            setTitle(titleString);
            // Frame size and location
            if (userEvent.isRememberFrameStatusEnabled()) {
                setSize(userEvent.getUserFrameDimension());
                setLocation(userEvent.getUserFrameLocation());
                setExtended(userEvent.isUserFrameMaximized());
            }
            else {
                setExtended(false);
            }
        }
        
        public void userLogout(FSLUserEvent userEvent) {
            String titleString = internationalization.getString("frameTitle") + " - "
                + internationalization.getString("text.noUserLoggedIn");
            setTitle(titleString);
            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
            int width = (int)(dim.getWidth()*0.8);
            int height = (int)(dim.getHeight()*0.8);
            setExtended(false);
            setSize(width, height);
            setLocation((dim.width - width)/2, (dim.height - height)/2);
        }

        public void userRoleChanged(FSLUserEvent userEvent) {
            userChanged(userEvent);
        }
    }
}
