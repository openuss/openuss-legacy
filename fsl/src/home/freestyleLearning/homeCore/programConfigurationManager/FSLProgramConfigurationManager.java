/* Generated by Freestyle Learning Group */

package freestyleLearning.homeCore.programConfigurationManager;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;

import freestyleLearning.homeCore.mainFrame.*;
import freestyleLearning.homeCore.programConfigurationManager.dialogs.*;
import freestyleLearning.homeCore.programConfigurationManager.event.*;
import freestyleLearning.homeCore.programConfigurationManager.xmlDocumentClasses.*;
import freestyleLearning.homeCore.usersManager.event.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

/**
 * The one and only instance of this class - the program configuration manager - manages the
 * program configuration issues. Among others these are the users directory, view managers
 * directory and the learning units directory which are determined by the content of the programConfiguration.xml file.
 * @author Freestyle Learning Group
 * @version 1.0
 */

public class FSLProgramConfigurationManager implements FSLProgramConfigurationEventGenerator, FSLUserListener {
    private FLGInternationalization internationalization;
    private File programConfigurationFile;
    private ProgramConfiguration programConfiguration;
    private JMenuItem programConfigurationMenuItem;
    private boolean userSelected;
    private FSLProgramConfigurationDialog programConfigurationDialog;
    private java.util.List configurationListeners;
    private Hashtable fslConfiguration;

    public void init(File programDirectory) {
        programConfigurationFile = new File(programDirectory, "programConfiguration.xml");
        programConfiguration = loadProgramConfigurationFile(programConfigurationFile);
        internationalization = new FLGInternationalization("freestyleLearning.homeCore.programConfigurationManager.internationalization",
            FSLProgramConfigurationManager.class.getClassLoader());
        programConfigurationDialog = new FSLProgramConfigurationDialog();
        configurationListeners = new ArrayList();
        fslConfiguration = new Hashtable();
        addProgramConfigurationListener(new FSLProgramConfigurationManager_ConfigurationListener());
        buildIndependentUI();
        buildDependentUI();
    }

    public void checkForAutomaticUserLogin() {
        if (programConfiguration.getPaths().getAutomaticLoginUsername() != null) {
            FSLProgramConfigurationEvent event = FSLProgramConfigurationEvent.createAutomaticLoginEvent(programConfiguration.getPaths().getAutomaticLoginUsername());
            fireProgramConfigurationEvent(event);
        }
    }
    
    public void addProgramConfigurationListener(FSLProgramConfigurationListener listener) {
        configurationListeners.add(listener);
    }

    public void removeProgramConfigurationListener(FSLProgramConfigurationListener listener) {
        configurationListeners.remove(listener);
    }

    public void fireProgramConfigurationEvent(FSLProgramConfigurationEvent event) {
        for (int i = 0; i < configurationListeners.size(); i++) {
            FSLProgramConfigurationListener configListener = (FSLProgramConfigurationListener)configurationListeners.get(i);
            switch (event.getEventType()) {
                case FSLProgramConfigurationEvent.AUTOMATIC_LOGIN:
                    configListener.configurationChanged(event);
                    break;
                case FSLProgramConfigurationEvent.COLOR_CHANGED:
                    configListener.configurationChanged(event);
                    break;
                case FSLProgramConfigurationEvent.FONT_CHANGED:
                    configListener.configurationChanged(event);
                    break;
                case FSLProgramConfigurationEvent.FSL_CONFIGURATION_CHANGED:
                    configListener.configurationChanged(event);
                    break;
            }
        }
    }

    public JMenuItem getProgramConfigurationMenuItem() {
        return programConfigurationMenuItem;
    }

    public File getUsersDirectory() {
        return new File(programConfiguration.getPaths().getFullPathToUsersDirectory());
    }

    public File getLearningUnitsDirectory() {
        return new File(programConfiguration.getPaths().getFullPathToLearningUnitsDirectory());
    }
    
    public String getLearningUnitsDirectoryName() {
        return programConfiguration.getPaths().getFullPathToLearningUnitsDirectory();
    }

    public File getLearningUnitViewManagersDirectory() {
        return new File(programConfiguration.getPaths().getFullPathToLearningUnitViewManagersDirectory());
    }

    public void userChanged(FSLUserEvent userEvent) {
        userSelected = true;
        if (userEvent.isAutomaticLoginEnabled()) {
            writeAutomaticLoginToConfigurationFile(userEvent.getUserName());
        }
        else {
            writeAutomaticLoginToConfigurationFile(null);
        }
        initColors(userEvent.getUserColors());
        initFonts(userEvent.getUserFontSizes());
        fslConfiguration.put("automaticSelectionEnabled", "" + userEvent.isAutomaticSelectionEnabled());
        fslConfiguration.put("displayWelcomeScreenEnabled", "" + userEvent.isDisplayWelcomeScreenEnabled());
        fslConfiguration.put("rememberFrameStatusEnabled", "" + userEvent.isRememberFrameStatusEnabled());
        boolean automaticSelectionEnabled = userEvent.isAutomaticSelectionEnabled();
        boolean displayWelcomeScreenEnabled = userEvent.isDisplayWelcomeScreenEnabled();
        boolean rememberFrameStatusEnabled = userEvent.isRememberFrameStatusEnabled();
        FSLProgramConfigurationEvent event = FSLProgramConfigurationEvent.createFSLConfigurationChangedEvent(automaticSelectionEnabled,
            displayWelcomeScreenEnabled, rememberFrameStatusEnabled);
        fireProgramConfigurationEvent(event);
        buildDependentUI();
    }
    
    public void userLogout(FSLUserEvent userEvent) {
        userSelected = false;
        writeAutomaticLoginToConfigurationFile(null);
        fslConfiguration.put("automaticSelectionEnabled", "" + false);
        fslConfiguration.put("displayWelcomeScreenEnabled", "" + false);
        fslConfiguration.put("rememberFrameStatusEnabled", "" + false);
        boolean automaticSelectionEnabled = false;
        boolean displayWelcomeScreenEnabled = false;
        boolean rememberFrameStatusEnabled = false;
        buildDependentUI();
    }

    public void userRoleChanged(FSLUserEvent userEvent) {
        buildDependentUI();
    }

    private void initColors(Color[] colors) {
        if (colors != null) {
            for (int i = 0; i < colors.length; i++) {
                UIManager.put("FSLMainFrameColor" + (i + 1), colors[i]);
            }
            SwingUtilities.updateComponentTreeUI(FLGUIUtilities.getMainFrame());
        }
    }

    private void initFonts(String[] fonts) {
        if (fonts != null) {
            UIManager.put("FSLLearningUnitViewElementsStructurePanel.BaseFontSize", new Integer(fonts[0]));
            UIManager.put("FSLLearningUnitViewElementsContentsPanel.BaseFontSize", new Integer(fonts[1]));
        }
    }

    private void buildIndependentUI() {
        programConfigurationMenuItem = createMenuItem("menu.configuration.program.title");
        programConfigurationMenuItem.setMnemonic(internationalization.getString("menu.configuration.program.mnemonic").charAt(0));
        programConfigurationMenuItem.setAccelerator(KeyStroke.getKeyStroke(internationalization.getString("menu.configuration.program.mnemonic").charAt(0), KeyEvent.CTRL_MASK));
    }

    private void buildDependentUI() {
        programConfigurationMenuItem.setEnabled(userSelected);
    }

    private void menuItemSelected(String menuItemId) {
        if (menuItemId == "menu.configuration.program.title") {
            showProgramConfigurationDialog();
        }
        if (menuItemId == "menu.configuration.learningUnitViews.title") {
            showProgramConfigurationDialog();
        }
    }

    private void showProgramConfigurationDialog() {
        if (programConfigurationDialog.showDialog(fslConfiguration)) {
            FSLProgramConfigurationEvent event;
            // Colors
            Color[] colors = programConfigurationDialog.getMainFrameBaseColors();
            for (int i = 0; i < FSLMainFrame.NO_MAINFRAMECOLORS; i++) {
                UIManager.put("FSLMainFrameColor" + (i + 1), colors[i]);
            }
            SwingUtilities.updateComponentTreeUI(FLGUIUtilities.getMainFrame());
            event = FSLProgramConfigurationEvent.createColorsChangedEvent(colors);
            fireProgramConfigurationEvent(event);
            // Fonts
            String[] fontSizes = new String[2];
            fontSizes[0] = "" + programConfigurationDialog.getStructurePanelBaseFontSize();
            fontSizes[1] = "" + programConfigurationDialog.getContentPanelBaseFontSize();
            UIManager.put("FSLLearningUnitViewElementsStructurePanel.BaseFontSize", new Integer(fontSizes[0]));
            UIManager.put("FSLLearningUnitViewElementsContentsPanel.BaseFontSize", new Integer(fontSizes[1]));
            event = FSLProgramConfigurationEvent.createFontsChangedEvent(fontSizes);
            fireProgramConfigurationEvent(event);
            // FSLConfiguration
            fslConfiguration.put("automaticSelectionEnabled", "" + programConfigurationDialog.getAutomaticSelectionEnabled());
            fslConfiguration.put("displayWelcomeScreenEnabled", "" + programConfigurationDialog.getDisplayWelcomeScreenEnabled());
            fslConfiguration.put("rememberFrameStatusEnabled", "" + programConfigurationDialog.getRememberFrameStatusEnabled());
            event = FSLProgramConfigurationEvent.createFSLConfigurationChangedEvent(programConfigurationDialog.getAutomaticSelectionEnabled(),
                programConfigurationDialog.getDisplayWelcomeScreenEnabled(), programConfigurationDialog.getRememberFrameStatusEnabled());
            fireProgramConfigurationEvent(event);
        }
    }

    private JMenuItem createMenuItem(String menuItemId) {
        Action action = new AbstractAction(internationalization.getString(menuItemId)) {
            public void actionPerformed(ActionEvent e) {
                menuItemSelected(((JMenuItem)e.getSource()).getActionCommand());
            }
        };
        JMenuItem menuItem = new JMenuItem(action);
        menuItem.setActionCommand(menuItemId);
        return menuItem;
    }

    private ProgramConfiguration loadProgramConfigurationFile(File programConfigurationFile) {
        ProgramConfiguration programConfiguration = null;
        FileInputStream programConfigurationFileInputStream;
        try {
            programConfigurationFileInputStream = new FileInputStream(programConfigurationFile);
            programConfiguration = ProgramConfiguration.unmarshal(programConfigurationFileInputStream);
            programConfigurationFileInputStream.close();
        }
        catch (Exception e) {
            System.out.println(e);
        }
        return programConfiguration;
    }

    private void writeAutomaticLoginToConfigurationFile(String userName) {
        programConfiguration.getPaths().setAutomaticLoginUsername(userName);
        try {
            FileOutputStream fileOutputStream = new FileOutputStream(programConfigurationFile);
            programConfiguration.validate();
            programConfiguration.marshal(fileOutputStream);
            fileOutputStream.close();
        }
        catch (Exception e) {
            System.out.println(e);
        }
    }
    
    private class FSLProgramConfigurationManager_ConfigurationListener implements FSLProgramConfigurationListener {
        public void configurationChanged(FSLProgramConfigurationEvent event) {
            if (event.getEventType() == FSLProgramConfigurationEvent.FSL_CONFIGURATION_CHANGED) {
                fslConfiguration.put("automaticSelectionEnabled", "" + event.isAutomaticSelectionEnabled());
                fslConfiguration.put("displayWelcomeScreenEnabled", "" + event.isDisplayWelcomeScreenEnabled());
                fslConfiguration.put("rememberFrameStatusEnabled", "" + event.isRememberFrameStatusEnabled());                                
            }
        }
    }
}
