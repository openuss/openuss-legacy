/* Generated by Freestyle Learning Group */

package freestyleLearning.homeCore;

import java.io.File;
import javax.swing.SwingUtilities;

import freestyleLearning.homeCore.mainFrame.*;
import freestyleLearning.homeCore.helpManager.*;
import freestyleLearning.homeCore.learningUnitsManager.*;
import freestyleLearning.homeCore.programConfigurationManager.*;
import freestyleLearning.homeCore.usersManager.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

/**
 * The one and only instance of this class - the Manager Of Managers - hosts the Program
 * Configuration Manager, Users Manager and Learning Units Manager. It provides an interface to
 * these managers for the main frame so that the main frame can create the menues and tool bar.
 * @author Norman Lahme
 * @version 1.0
 */
public class FSLManagerOfManagers {
    private FSLMainFrame mainFrame;
    private File programDirectory;
    private FSLProgramConfigurationManager programConfigurationManager;
    private FSLLearningUnitsManager learningUnitsManager;
    private FSLUsersManager usersManager;
    private FSLHelpManager helpManager;
    private FLGLongLastingOperationStatus progressStatus;

    /**
     * Creates all managers and links them to each other
     * @param programDirectory: a File-Object representing the directory where the home.jar file is contained.
     */
    public void init(FSLMainFrame mainFrame, File programDirectory, FLGLongLastingOperationStatus localProgressStatus, FLGImageDialog progressDialog) {
        this.mainFrame = mainFrame;
        this.programDirectory = programDirectory;
        this.progressStatus = localProgressStatus;
        // Program Configuration Manager
        programConfigurationManager = new FSLProgramConfigurationManager();
        programConfigurationManager.init(programDirectory);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(progressStatus.getStepSize() / 4.));
        // Users Manager
        usersManager = new FSLUsersManager();
        usersManager.init(programConfigurationManager, programConfigurationManager,
            programConfigurationManager.getUsersDirectory());
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(progressStatus.getStepSize() / 4.));
        // Learning Units Manager
        learningUnitsManager = new FSLLearningUnitsManager();
        learningUnitsManager.init(usersManager, programConfigurationManager, 
            programConfigurationManager.getLearningUnitViewManagersDirectory(),
            programConfigurationManager.getLearningUnitsDirectory(),
            new FSLManagerOfManager_LongLastingOperationStatus(), progressDialog, this);
        // progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(progressStatus.getStepSize() / 4.));
        // Help Manager
        helpManager = new FSLHelpManager(programConfigurationManager);
        helpManager.init(learningUnitsManager, programDirectory.getAbsolutePath(), progressStatus);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(progressStatus.getStepSize() / 4.));
    }
    
    public FSLMainFrame getMainFrame() {
        return mainFrame;
    }

    public FSLProgramConfigurationManager getProgramConfigurationManager() {
        return programConfigurationManager;
    }

    public FSLLearningUnitsManager getLearningUnitsManager() {
        return learningUnitsManager;
    }

    public FSLUsersManager getUsersManager() {
        return usersManager;
    }

    public FSLHelpManager getHelpManager() {
        return helpManager;
    }

    private void updateProgressBar(double value) {
        final int newValue = (int)value;
        SwingUtilities.invokeLater(
            new Runnable() {
                public void run() {
                    progressStatus.setStatusValue(newValue);
                }
            });
    }

    /**
     * Called by the main frame when the user wants to close the program
     * @return true, if the program can be closed
     */
    public boolean programIsClosing() {
        return learningUnitsManager.programIsClosing();
    }

    class FSLManagerOfManager_LongLastingOperationStatus implements FLGLongLastingOperationStatus {
        public int getStepSize() {
            return (int)(progressStatus.getStepSize() * 1 / 4.);
        }

        public void setStatusValue(int value) {
            progressStatus.setStatusValue(value);
        }

        public int getStatusValue() {
            return progressStatus.getStatusValue();
        }
    }
}
