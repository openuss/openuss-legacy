/* Generated by Freestyle Learning Group */

package freestyleLearning.homeCore.learningUnitsManager;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.*;

import javax.swing.*;
import javax.xml.bind.Dispatcher;

import freestyleLearning.homeCore.learningUnitsManager.data.xmlBinding.*;
import freestyleLearning.homeCore.learningUnitsManager.data.xmlBindingSubclasses.*;
import freestyleLearning.homeCore.programConfigurationManager.event.*;
import freestyleLearning.homeCore.usersManager.event.*;
import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.media.*;
import freestyleLearningGroup.independent.util.*;

/**
 * The one and only instance of this class - the learning unit views manager - manages the
 * installed learning unit view managers. It has a buffer to hold the already loaded managers
 * (member variable learningUnitViewManagers).
 * @author Norman Lahme
 * @version 1.0
 */
public class FSLLearningUnitViewsManager implements FSLLearningUnitViewsActivator {
    private FSLLearningUnitsActivator learningUnitsActivator;
    private FSLLearningUnitEventGenerator learningUnitEventGenerator;
    private FSLLearningUnitsManager learningUnitsManager;
    private File learningUnitViewManagersDirectory;
    private File learningUnitsOriginalDataDirectory;
    private File learningUnitCurrentUserDataDirectory;
    private Hashtable learningUnitViewManagers;
    private FSLLearningUnitViewManager[] learningUnitViewManagersOfCurrentLearningUnit;
    private FSLLearningUnitViewManager activeLearningUnitViewManager;
    private java.util.List learningUnitViewManagersDescriptors;
    private boolean originalElementsOnly;
    private boolean editMode;
    private boolean automaticSelectionEnabled;
    private boolean displayWelcomeScreenEnabled;
    private JPanel learningUnitViewElementContentPanelContainer;
    private JPanel learningUnitViewElementsStructurePanelContainer;
    private JPanel learningUnitViewElementInteractionPanelContainer;
    private JPanel learningUnitViewStatusPanelContainer;
    private JPanel learningUnitViewAssistantPanelContainer;
    private JPanel learningUnitViewsPrimaryButtonsPanel;
    private JPanel learningUnitViewPrimaryButtonsTopRowContainer;
    private JPanel learningUnitViewPrimaryButtonsBottomRowContainer;
    private JPanel learningUnitViewContextDependentActivationPanelContainer;
    private JPanel learningUnitViewContextDependentActivationPanel;
    //added by Gunnar Thies
    private static JPanel learningUnitViewContextDependentInteractionPanel;
    private static final String COLOR3 = "FSLMainFrameColor3";
    private static ArrayList array = new ArrayList(4);
    private static JPanel CDISubPanel;
    //Gunnar Thies finished.
    private ActionListener learningUnitViewActivationButtonListener;
    private ActionListener learningUnitViewContextDependentActivationButtonListener;
    private Vector primaryViewButtonsOfCurrentLearningUnit;
    private Vector secondaryViewButtonsOfCurrentLearningUnit;
    private Vector contextDependentActivationButtonsOfCurrentLearningUnit;
    private String userName;
    private String userPassword;
    private String currentUserRole;
    private FSLLearningUnitsNavigationHistoryManager learningUnitsNavigationHistoryManager;
    private FLGInternationalization internationalization;
    private FLGImageProgressDialog progressDialog;
    private double progressSteps;
    private double progressStepSize;
    private int progressStep = 1;

    void init(FSLLearningUnitsManager learningUnitsManager, FSLLearningUnitEventGenerator learningUnitEventGenerator,
        File learningUnitViewManagersDirectory, File learningUnitsOriginalDataDirectory,
        FSLLearningUnitsNavigationHistoryManager learningUnitsNavigationHistoryManager,
        FSLProgramConfigurationEventGenerator programConfigurationEventGenerator, FSLUserEventGenerator userEventGenerator) {
            internationalization = new FLGInternationalization("freestyleLearning.homeCore.learningUnitsManager.internationalization",
                FSLLearningUnitViewsManager.class.getClassLoader());
            this.learningUnitsActivator = learningUnitsManager;
            this.learningUnitsManager = learningUnitsManager;
            this.learningUnitEventGenerator = learningUnitEventGenerator;
            this.learningUnitViewManagersDirectory = learningUnitViewManagersDirectory;
            this.learningUnitsOriginalDataDirectory = learningUnitsOriginalDataDirectory;
            this.learningUnitsNavigationHistoryManager = learningUnitsNavigationHistoryManager;
            this.learningUnitViewManagers = new Hashtable();
            learningUnitViewManagersDescriptors =
                loadLearningUnitViewManagersDescriptor(
                new File(learningUnitViewManagersDirectory,
                "learningUnitViewManagersDescriptor.xml")).getLearningUnitViewManagersDescriptors();
            learningUnitEventGenerator.addLearningUnitListener(new FSLLearningUnitViewsManager_FSLLearningUnitAdapter());
            programConfigurationEventGenerator.addProgramConfigurationListener(
                new FSLLearningUnitViewsManager_FSLProgramConfigurationEventAdapter());
            userEventGenerator.addUserListener(new FSLLearningUnitViewsManager_FSLUserAdapter());
            buildIndependentUI();
    }

    public void setActiveLearningUnitViewManager(FSLLearningUnitViewManager activeLearningUnitViewManager,
        boolean followingHyperlink) {
            if (this.activeLearningUnitViewManager != activeLearningUnitViewManager) {
                if (this.activeLearningUnitViewManager != null) {
                    FSLLearningUnitViewVetoableEvent vetoableEvent =
                        FSLLearningUnitViewVetoableEvent.createViewDeactivatingEvent();
                    this.activeLearningUnitViewManager.fireLearningUnitViewEvent(vetoableEvent);
                    if (!vetoableEvent.isVeto()) {
                        this.activeLearningUnitViewManager.deactivate();
                        activateLearningUnitViewManager(activeLearningUnitViewManager, followingHyperlink);
                    }
                }
                else
                    activateLearningUnitViewManager(activeLearningUnitViewManager, followingHyperlink);
            }
    }

    private void activateLearningUnitViewManager(FSLLearningUnitViewManager activeLearningUnitViewManager,
        boolean followingHyperlink) {
            FSLLearningUnitViewManager lastSelectedLearningUnitViewManager = this.activeLearningUnitViewManager;
            String elementIdToSelect = null;
            
            // activate one and only element (if only)
            /**
            if (activeLearningUnitViewManager != null) {
                FSLLearningUnitViewElementsManager activeLearningUnitViewElementsManager =
                    activeLearningUnitViewManager.getLearningUnitViewElementsManager(learningUnitsActivator.getActiveLearningUnitId());
                if (activeLearningUnitViewElementsManager != null) {
                    String[] activeLearningUnitViewElementIds =
                        activeLearningUnitViewManager.getLearningUnitViewElementsManager(learningUnitsActivator.getActiveLearningUnitId()).getAllLearningUnitViewElementIds();
                    if (activeLearningUnitViewElementIds.length == 1) {
                        // activate one and only element
                        elementIdToSelect = activeLearningUnitViewElementIds[0];
                    }
                }
            }**/
            
            // select element with same label as last selected element
            if (!followingHyperlink && automaticSelectionEnabled && lastSelectedLearningUnitViewManager != null) {
                String lastSelectedElementTitle = null;
                String lastSelectedParentElementTitle = null;
                String lastSelectedElementId = lastSelectedLearningUnitViewManager.getActiveLearningUnitViewElementId();
                if (lastSelectedElementId != null && lastSelectedLearningUnitViewManager.getLearningUnitViewElementsManager() != null) {
                        FSLLearningUnitViewElement lastSelectedElement = lastSelectedLearningUnitViewManager.getLearningUnitViewElementsManager().getLearningUnitViewElement(lastSelectedElementId, false);
                        if (lastSelectedElement != null) {
                            lastSelectedElementTitle = lastSelectedElement.getTitle();
                            FSLLearningUnitViewElement lastSelectedParentElement =
                                lastSelectedLearningUnitViewManager.getLearningUnitViewElementsManager().getLearningUnitViewElement(lastSelectedElement.getParentId(), false);
                            if (lastSelectedParentElement != null) {
                                lastSelectedParentElementTitle = lastSelectedParentElement.getTitle();
                            }
                        }
                }
                this.activeLearningUnitViewManager = activeLearningUnitViewManager;
                activeLearningUnitViewManager.activate(followingHyperlink);
                FSLLearningUnitViewElementsManager activeLearningUnitViewElementsManager =
                    activeLearningUnitViewManager.getLearningUnitViewElementsManager(learningUnitsActivator.getActiveLearningUnitId());
                if (activeLearningUnitViewElementsManager != null) {
                    String[] activeLearningUnitViewElementIds =
                        activeLearningUnitViewManager.getLearningUnitViewElementsManager(learningUnitsActivator.getActiveLearningUnitId()).getAllLearningUnitViewElementIds();
                    for (int i = 0; i < activeLearningUnitViewElementIds.length; i++) {
                        FSLLearningUnitViewElement activeLearningUnitViewElement =
                            activeLearningUnitViewElementsManager.getLearningUnitViewElement(activeLearningUnitViewElementIds[i], false);
                        if (activeLearningUnitViewManager.getLearningUnitViewElementsManager() != null) {
                            FSLLearningUnitViewElement activeParentElement =
                                activeLearningUnitViewManager.getLearningUnitViewElementsManager().getLearningUnitViewElement(activeLearningUnitViewElement.getParentId(), false);
                            String activeElementTitle = activeLearningUnitViewElement.getTitle();
                            String activeParentElementTitle = null;
                            if (activeParentElement != null) {
                                activeParentElementTitle = activeParentElement.getTitle();
                            }
                            if (lastSelectedParentElementTitle != null) {
                                if (lastSelectedElementTitle != null &&
                                    FLGUtilities.equalsIgnoreCaseIgnoreLeadingNumbers(activeElementTitle, lastSelectedElementTitle) && activeParentElementTitle != null &&
                                    FLGUtilities.equalsIgnoreCaseIgnoreLeadingNumbers(activeParentElementTitle, lastSelectedParentElementTitle)) {
                                        //elementIdToSelect = activeLearningUnitViewElementIds[i];
                                        break;
                                }
                            }
                            else {
                                if (lastSelectedElementTitle != null &&
                                    FLGUtilities.equalsIgnoreCaseIgnoreLeadingNumbers(activeElementTitle, lastSelectedElementTitle) && activeParentElementTitle == null) {
                                    		//elementIdToSelect = activeLearningUnitViewElementIds[i];
                                        	break;
                                }
                            }
                        }
                    }
                }
            }
            else {
                this.activeLearningUnitViewManager = activeLearningUnitViewManager;
                if (activeLearningUnitViewManager != null) {
                    activeLearningUnitViewManager.activate(followingHyperlink);
                }
            }
            
            
            if (elementIdToSelect != null) {
                activeLearningUnitViewManager.setActiveLearningUnitViewElementId(elementIdToSelect, null);
            }
            
            
            activeLearningUnitViewManager.setCurrentUserData(userName, userPassword);
            buildDependentUI(false, false);
            learningUnitsManager.updateMenuItems();
    }

    public void learningUnitLoaded() {
        if (displayWelcomeScreenEnabled) {
            // play Learning Unit Welcome Video
        }
    }

    public FSLLearningUnitViewManager getActiveLearningUnitViewManager() {
        return activeLearningUnitViewManager;
    }

    public FSLLearningUnitViewManager getLearningUnitViewManager(String learningUnitViewManagerId) {
        return (FSLLearningUnitViewManager)learningUnitViewManagers.get(learningUnitViewManagerId);
    }

    public void setCurrentUserData(String userName, String userPassword) {
        this.userName = userName;
        this.userPassword = userPassword;
    }

    // Jan:
    public String[] [] getInstalledLearningUnitViewManagersIdsAndTitles() {
        String[] [] managerIds = new String[learningUnitViewManagersDescriptors.size()] [2];
        for (int i = 0; i < learningUnitViewManagersDescriptors.size(); i++) {
            managerIds[i] [0] = ((FSLLearningUnitViewManagerDescriptor)learningUnitViewManagersDescriptors.get(i)).getId();
            managerIds[i] [1] = ((FSLLearningUnitViewManagerDescriptor)learningUnitViewManagersDescriptors.get(i)).getTitle();
        }
        return managerIds;
    }

    JPanel getLearningUnitViewsPrimaryButtonsPanel() {
        return learningUnitViewsPrimaryButtonsPanel;
    }

    FSLLearningUnitViewSecondaryActivationButton[] getLearningUnitViewsSecondaryButtons() {
        if (secondaryViewButtonsOfCurrentLearningUnit != null && secondaryViewButtonsOfCurrentLearningUnit.size() > 0)
            return (FSLLearningUnitViewSecondaryActivationButton[])
                secondaryViewButtonsOfCurrentLearningUnit.toArray(
                new FSLLearningUnitViewSecondaryActivationButton[] { });
        else
            return null;
    }

    JPanel getLearningUnitViewElementContentPanelContainer() {
        return learningUnitViewElementContentPanelContainer;
    }
    //added by Gunnar Thies

    /**
     * This method returns the contextDependentInteractionPanel which is generated in this class.
     * @return learningUnitViewContextDependentInteractionPanel
     */
    public static JPanel getLearningUnitViewContextDependentInteractionPanelContainer() {
        return learningUnitViewContextDependentInteractionPanel;
    }

    //Gunnar Thies finished.
    JPanel getLearningUnitViewElementsStructurePanelContainer() {
        return learningUnitViewElementsStructurePanelContainer;
    }

    JPanel getLearningUnitViewElementInteractionPanelContainer() {
        return learningUnitViewElementInteractionPanelContainer;
    }

    JPanel getLearningUnitViewStatusPanelContainer() {
        return learningUnitViewStatusPanelContainer;
    }

    JPanel getLearningUnitViewAssistantPanelContainer() {
        return learningUnitViewAssistantPanelContainer;
    }

    JPanel getLearningUnitViewContextDependentActivationPanelContainer() {
        return learningUnitViewContextDependentActivationPanelContainer;
    }

    void learningUnitViewManagersBaseFontsSizesChanged() {
        Enumeration learningUnitViewManagersEnumeration = learningUnitViewManagers.elements();
        while (learningUnitViewManagersEnumeration.hasMoreElements())
            ((FSLLearningUnitViewManager)learningUnitViewManagersEnumeration.nextElement()).updateUI();
    }

    void loadLearningUnitViewManagers(java.util.List learningUnitViewManagersIdList) {
        System.out.print("\nloading LearningUnitView Managers");
        String displayText = internationalization.getString("label.loadLearningUnitViewManagers.text");
        String dialogTitle = internationalization.getString("dialog.loadViews.title");
        progressSteps = 1000.;
        progressStepSize = (int)(progressSteps / learningUnitViewManagersIdList.size() / 2);
        progressStep = 1;
        progressDialog = new FLGImageProgressDialog(dialogTitle, 0, (int)progressSteps, 0,
            FSLLearningUnitViewsManager.class.getClassLoader().getResource("freestyleLearning/homeCore/images/splashProgressDialogLearningUnitViewManagers.gif"),
            (Color)UIManager.get("FSLColorBlue"), (Color)UIManager.get("FSLColorRed"), displayText);
        for (int i = 0; i < learningUnitViewManagersIdList.size(); i++) {
            System.out.print(".");
            progressDialog.setBarValue((int)(progressStep++ * progressStepSize));
            String learningUnitViewManagerId = (String)learningUnitViewManagersIdList.get(i);
            String learningUnitTitle = internationalization.getString("learningUnit." + learningUnitViewManagerId + ".title") + " " + internationalization.getString("label.manager.text") + "...";
            progressDialog.setDisplayText(displayText + " " + learningUnitTitle);
            try {
                if (learningUnitViewManagers.get(learningUnitViewManagerId) == null) {
                    loadLearningUnitViewManager(learningUnitViewManagerId);
                }
            }
            catch(Exception e) { 
                System.out.println(e); 
                FLGOptionPane.showMessageDialog("Exception during loading manager: " + learningUnitViewManagerId, "Error", FLGOptionPane.ERROR_MESSAGE);
                learningUnitViewManagersIdList.remove(learningUnitViewManagerId);
                i--;
            }
        }
    }

    void loadLearningUnitViewsData(String learningUnitId, String learningUnitPath, 
        java.util.List learningUnitViewManagersIdList) {
        System.out.println("\nloading LearningUnitViewsData..."); 
        if (learningUnitViewManagersIdList != null && !learningUnitViewManagersIdList.isEmpty()) {
            String dialogTitle = internationalization.getString("dialog.loadViewsData.title");
            String displayText = internationalization.getString("label.loadLearningUnitViewManagers.text");
            java.util.List contextDependentManagersList = new Vector();
            System.out.println("\n" + internationalization.getString("label.loadLearningUnitViewData.text"));
            for (int i = 0; i < learningUnitViewManagersIdList.size(); i++) {
                FSLLearningUnitViewManager learningUnitViewManager =
                    (FSLLearningUnitViewManager)learningUnitViewManagers.get(learningUnitViewManagersIdList.get(i)); 
                // first load data non-contextDependent Managers                
                if (learningUnitViewManager!= null) {
                    if (!learningUnitViewManager.isContextDependentLearningUnitViewManager()) {
                        System.out.println("\t" + learningUnitViewManager.getLearningUnitViewManagerTitle());
                        progressDialog.setBarValue((int)(progressStep++ * progressStepSize));
                        progressDialog.setDisplayText(displayText + " View Manager " + internationalization.getString("label.loadLearningUnitViewData.data") + "...");
                        FSLLearningUnitViewManagerDescriptor learningUnitViewManagerDescriptor =
                            findLearningUnitViewManagerDescriptorById(learningUnitViewManager.getLearningUnitViewManagerId());
                        String viewManagerDirectoryName = learningUnitViewManagerDescriptor.getDirectoryName();
                        learningUnitViewManager.loadLearningUnitViewData(learningUnitId,
                            new File(new File(learningUnitPath), viewManagerDirectoryName),
                            new File(new File(learningUnitCurrentUserDataDirectory, (new File(learningUnitPath)).getName()), viewManagerDirectoryName));
                    }
                    else {
                        contextDependentManagersList.add(learningUnitViewManager);
                    }
                }
                else {
//                    learningUnitViewManagersIdList.remove(i);
                }
            }
            // now: load data from contextDependent Managers
            System.out.println("\nloading Data from contextDependent Managers:");
            for (int i = 0; i < contextDependentManagersList.size(); i++) {
                FSLLearningUnitViewManager learningUnitViewManager =
                    (FSLLearningUnitViewManager)contextDependentManagersList.get(i);
                System.out.println("\t" + learningUnitViewManager.getLearningUnitViewManagerTitle());
                progressDialog.setBarValue((int)(progressStep++ * progressStepSize));
                progressDialog.setDisplayText(displayText + " View Manager " + internationalization.getString("label.loadLearningUnitViewData.data") + "...");
                FSLLearningUnitViewManagerDescriptor learningUnitViewManagerDescriptor =
                    findLearningUnitViewManagerDescriptorById(learningUnitViewManager.getLearningUnitViewManagerId());
                String viewManagerDirectoryName = learningUnitViewManagerDescriptor.getDirectoryName();
                learningUnitViewManager.loadLearningUnitViewData(learningUnitId, new File(new File(learningUnitPath), viewManagerDirectoryName),
                    new File(new File(learningUnitCurrentUserDataDirectory, (new File(learningUnitPath)).getName()), viewManagerDirectoryName));
                introduceLearningUnitViewManager(learningUnitViewManager);
                // progressDialog.setDiscreteBarValue((int)(progressStep++ * progressStepSize));
            }
            // progressDialog.setBarValue(progressSteps);
            progressDialog.dispose();
            System.out.println("done.");
        }
    }

    public String getLearningUnitViewManagerDirectoryName(String learningUnitViewManagerId) {
        FSLLearningUnitViewManagerDescriptor learningUnitViewManagerDescriptor =
            findLearningUnitViewManagerDescriptorById(learningUnitViewManagerId);
        return learningUnitViewManagerDescriptor.getDirectoryName();
    }

    public String getLearningUnitViewManagerClassName(String learningUnitViewManagerId) {
        FSLLearningUnitViewManagerDescriptor learningUnitViewManagerDescriptor =
            findLearningUnitViewManagerDescriptorById(learningUnitViewManagerId);
        return learningUnitViewManagerDescriptor.getClassName();
    }

    boolean learningUnitViewsDataChanged() {
        boolean dataChanged = false;
        if (learningUnitViewManagersOfCurrentLearningUnit != null) {
            for (int i = 0; i < learningUnitViewManagersOfCurrentLearningUnit.length; i++) {
                if (learningUnitViewManagersOfCurrentLearningUnit[i] != null) {
                    dataChanged = dataChanged || learningUnitViewManagersOfCurrentLearningUnit[i].isModified();
                }
            }
        }
        return dataChanged;
    }

    boolean saveLearningUnitViewsData() {
        if (learningUnitViewManagersOfCurrentLearningUnit != null) {
            for (int i = 0; i < learningUnitViewManagersOfCurrentLearningUnit.length; i++) {
                if (learningUnitViewManagersOfCurrentLearningUnit[i] != null && !learningUnitViewManagersOfCurrentLearningUnit[i].saveLearningUnitViewData())
                    return false;
            }
        }
        return true;
    }
    
    private FSLLearningUnitViewManager loadLearningUnitViewManager(String learningUnitViewManagerId) throws Exception {
        FSLLearningUnitViewManagerDescriptor learningUnitViewManagerDescriptor =
            findLearningUnitViewManagerDescriptorById(learningUnitViewManagerId);
        File learningUnitViewManagerDirectory = new
            File(learningUnitViewManagersDirectory, learningUnitViewManagerDescriptor.getDirectoryName());
        File learningUnitViewManagerJarFile = new File(learningUnitViewManagerDirectory, "manager.jar");
        String learningUnitViewManagerClassName = learningUnitViewManagerDescriptor.getClassName();
        FSLLearningUnitViewManager learningUnitViewManager = null;
        URL[] urlsToClassesToLoad = {learningUnitViewManagerJarFile.toURL()};
        URLClassLoader classInJarLoader = new URLClassLoader(urlsToClassesToLoad);
        Class learningUnitViewManagerClass = classInJarLoader.loadClass(learningUnitViewManagerClassName);
         learningUnitViewManager = (FSLLearningUnitViewManager)learningUnitViewManagerClass.newInstance();
         learningUnitViewManager.init(learningUnitsActivator, this, learningUnitEventGenerator, learningUnitViewManagerId,
            learningUnitViewManagerDescriptor.getTitle(),
            new File(learningUnitViewManagersDirectory, learningUnitViewManagerDescriptor.getDirectoryName()), editMode, originalElementsOnly,
            new FSLLearningUnitViewsManager_LongLastingOperationStatus());
        learningUnitViewManagers.put(learningUnitViewManagerId, learningUnitViewManager);
        learningUnitViewManager.addLearningUnitViewListener(learningUnitsNavigationHistoryManager);
        return learningUnitViewManager;
    }

    private void introduceLearningUnitViewManager(FSLLearningUnitViewManager newLearningUnitViewManager) {
        Enumeration learningUnitViewManagersEnumeration = learningUnitViewManagers.elements();
        while (learningUnitViewManagersEnumeration.hasMoreElements()) {
            FSLLearningUnitViewManager learningUnitViewManager =
                (FSLLearningUnitViewManager)learningUnitViewManagersEnumeration.nextElement();
            learningUnitViewManager.introduceLearningUnitViewManager(newLearningUnitViewManager);
            newLearningUnitViewManager.introduceLearningUnitViewManager(learningUnitViewManager);
        }
    }

    private FSLLearningUnitViewManagerDescriptor findLearningUnitViewManagerDescriptorById(String learningUnitViewManagerId) {
        for (int i = 0; i < learningUnitViewManagersDescriptors.size(); i++) {
            FSLLearningUnitViewManagerDescriptor learningUnitViewManagerDescriptor =
                (FSLLearningUnitViewManagerDescriptor)learningUnitViewManagersDescriptors.get(i);
            if (learningUnitViewManagerDescriptor.getId().equals(learningUnitViewManagerId)) {
                return learningUnitViewManagerDescriptor;
            }
        }
        return null;
    }

    private void buildIndependentUI() {
        learningUnitViewsPrimaryButtonsPanel = new JPanel(new BorderLayout());
        learningUnitViewsPrimaryButtonsPanel.setOpaque(false);
        learningUnitViewPrimaryButtonsTopRowContainer = new JPanel(new FLGEqualDistanceColumnLayout());
        learningUnitViewPrimaryButtonsTopRowContainer.setOpaque(false);
        learningUnitViewsPrimaryButtonsPanel.add(learningUnitViewPrimaryButtonsTopRowContainer, BorderLayout.NORTH);
        learningUnitViewPrimaryButtonsBottomRowContainer = new JPanel(new FLGEqualDistanceColumnLayout());
        learningUnitViewPrimaryButtonsBottomRowContainer.setOpaque(false);
        learningUnitViewsPrimaryButtonsPanel.add(learningUnitViewPrimaryButtonsBottomRowContainer, BorderLayout.SOUTH);
        learningUnitViewElementContentPanelContainer = new JPanel(new BorderLayout());
        learningUnitViewElementContentPanelContainer.setOpaque(false);
        learningUnitViewElementsStructurePanelContainer = new JPanel(new BorderLayout());
        learningUnitViewElementsStructurePanelContainer.setOpaque(false);
        learningUnitViewElementInteractionPanelContainer = new JPanel(new BorderLayout());
        learningUnitViewElementInteractionPanelContainer.setOpaque(false);
        //added by Gunnar Thies
        learningUnitViewContextDependentInteractionPanel = new JPanel(new BorderLayout());
        learningUnitViewContextDependentInteractionPanel.setOpaque(false);
        CDISubPanel = new FLGEffectPanel(COLOR3, false);
        //end Gunnar Thies
        learningUnitViewContextDependentActivationPanelContainer = new JPanel(new BorderLayout());
        learningUnitViewContextDependentActivationPanelContainer.setOpaque(false);
        learningUnitViewContextDependentActivationPanel = new JPanel(new FLGLeftToRightLayout(5));
        learningUnitViewContextDependentActivationPanel.setOpaque(false);
        learningUnitViewStatusPanelContainer = new JPanel(new BorderLayout());
        learningUnitViewStatusPanelContainer.setOpaque(false);
        learningUnitViewAssistantPanelContainer = new JPanel(new BorderLayout());
        learningUnitViewAssistantPanelContainer.setOpaque(false);
        learningUnitViewActivationButtonListener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                setActiveLearningUnitViewManager(getLearningUnitViewManager(e.getActionCommand()), false);
            }
        };
        learningUnitViewContextDependentActivationButtonListener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String activeLearningUnitViewManagerId = getActiveLearningUnitViewManager().getLearningUnitViewManagerId();
                String activeLearningUnitViewElementId =
                    getActiveLearningUnitViewManager().getActiveLearningUnitViewElementId();
                for (int i = 0; i < learningUnitViewManagersOfCurrentLearningUnit.length; i++) {
                    if (learningUnitViewManagersOfCurrentLearningUnit[i] != null) {
                        if (learningUnitViewManagersOfCurrentLearningUnit[i].getLearningUnitViewManagerId().equals(e.getActionCommand())) {
                            setActiveLearningUnitViewManager(getLearningUnitViewManager(e.getActionCommand()), false);
                            activeLearningUnitViewManager.activateContextDependentElement(activeLearningUnitViewManagerId,
                                activeLearningUnitViewElementId, originalElementsOnly);
                            break;
                        }
                    }
                }
            }
        };
    }

    private void buildDependentUI(boolean buildSecondaryActivationButtons, boolean buildContextDependentActivationButtons) {
        if (activeLearningUnitViewManager != null) {
            putComponentIntoContainer(learningUnitViewElementContentPanelContainer,
                (JComponent)activeLearningUnitViewManager.getElementsContentsPanel());
            putComponentIntoContainer(learningUnitViewElementsStructurePanelContainer,
                (JComponent)activeLearningUnitViewManager.getElementsStructurePanel());
            putComponentIntoContainer(learningUnitViewElementInteractionPanelContainer,
                (JComponent)activeLearningUnitViewManager.getElementInteractionPanel());
            putComponentIntoContainer(learningUnitViewContextDependentActivationPanelContainer,
                learningUnitViewContextDependentActivationPanel);
            putComponentIntoContainer(learningUnitViewStatusPanelContainer,
                (JComponent)activeLearningUnitViewManager.getStatusPanel());
            putComponentIntoContainer(learningUnitViewAssistantPanelContainer,
                activeLearningUnitViewManager.getAssistantPanel());
        }
        else {
            putComponentIntoContainer(learningUnitViewElementContentPanelContainer, null);
            //added Gunnar Thies
            putComponentIntoContainer(learningUnitViewContextDependentInteractionPanel, null);
            //end Gunnar Thies
            putComponentIntoContainer(learningUnitViewElementsStructurePanelContainer, null);
            putComponentIntoContainer(learningUnitViewElementInteractionPanelContainer, null);
            putComponentIntoContainer(learningUnitViewContextDependentActivationPanelContainer, null);
            putComponentIntoContainer(learningUnitViewStatusPanelContainer, null);
            putComponentIntoContainer(learningUnitViewAssistantPanelContainer, null);
        }
        buildLearningUnitViewsPrimaryButtonPanels();
        if (buildSecondaryActivationButtons) buildLearningUnitViewsSecondaryButtons();
        if (buildContextDependentActivationButtons) {
            buildLearningUnitViewsContextDependentActivationButtonPanel();
        }
    }

    private void buildLearningUnitViewsContextDependentActivationButtonPanel() {
    	
    	
        if (learningUnitViewManagersOfCurrentLearningUnit != null) {
            if (contextDependentActivationButtonsOfCurrentLearningUnit != null) {
                for (int i = 0; i < contextDependentActivationButtonsOfCurrentLearningUnit.size(); i++) {
                    ((FSLLearningUnitViewContextDependentActivationButton)contextDependentActivationButtonsOfCurrentLearningUnit.get(i)).removeActionListener(learningUnitViewContextDependentActivationButtonListener);
                }
            }
            contextDependentActivationButtonsOfCurrentLearningUnit = new Vector();
            for (int i = 0; i < learningUnitViewManagersOfCurrentLearningUnit.length; i++) {
                if (learningUnitViewManagersOfCurrentLearningUnit[i] != null) {
                    FSLLearningUnitViewContextDependentActivationButton contextDependentActivationButton =
                        learningUnitViewManagersOfCurrentLearningUnit[i].getContextDependentActivationButton();
                    if (contextDependentActivationButton != null) {
                        contextDependentActivationButton.setActionCommand(learningUnitViewManagersOfCurrentLearningUnit[i].getLearningUnitViewManagerId());
                        contextDependentActivationButton.addActionListener(learningUnitViewContextDependentActivationButtonListener);
                        contextDependentActivationButtonsOfCurrentLearningUnit.add(contextDependentActivationButton);
                        
                        contextDependentActivationButton.setEnabled(activeLearningUnitViewManager != null &&
                            !activeLearningUnitViewManager.isContextDependentLearningUnitViewManager() &&
                            activeLearningUnitViewManager.getActiveLearningUnitViewElementId() != null);
                        
                    }
                }
            }
        }
        else {
            contextDependentActivationButtonsOfCurrentLearningUnit = new Vector();
        }
        learningUnitViewContextDependentActivationPanel.removeAll();
        if (contextDependentActivationButtonsOfCurrentLearningUnit != null) {
            for (int i = 0; i < contextDependentActivationButtonsOfCurrentLearningUnit.size(); i++) {
                learningUnitViewContextDependentActivationPanel.add((FSLLearningUnitViewContextDependentActivationButton)contextDependentActivationButtonsOfCurrentLearningUnit.get(i));
            }
        }
        // temporary disabled
        learningUnitViewContextDependentActivationPanel.add(learningUnitsManager.getTourCreatorCaptureButton());

        learningUnitViewContextDependentActivationPanelContainer.revalidate();
        learningUnitViewContextDependentActivationPanelContainer.repaint();
    }

    private void buildLearningUnitViewsPrimaryButtonPanels() {
        learningUnitViewPrimaryButtonsTopRowContainer.removeAll();
        learningUnitViewPrimaryButtonsBottomRowContainer.removeAll();
        if (learningUnitViewManagersOfCurrentLearningUnit != null) {
            if (primaryViewButtonsOfCurrentLearningUnit != null) {
                for (int i = 0; i < primaryViewButtonsOfCurrentLearningUnit.size(); i++) {
                    ((FSLLearningUnitViewPrimaryActivationButton)primaryViewButtonsOfCurrentLearningUnit.get(i)).removeActionListener(learningUnitViewActivationButtonListener);
                }
            }
            primaryViewButtonsOfCurrentLearningUnit = new Vector();
            for (int i = 0; i < learningUnitViewManagersOfCurrentLearningUnit.length; i++) {
                if (learningUnitViewManagersOfCurrentLearningUnit[i] != null) {
                    FSLLearningUnitViewPrimaryActivationButton button =
                        learningUnitViewManagersOfCurrentLearningUnit[i].getPrimaryActivationButton();
                    if (button != null) {
                        button.setActionCommand(learningUnitViewManagersOfCurrentLearningUnit[i].getLearningUnitViewManagerId());
                        button.addActionListener(learningUnitViewActivationButtonListener);
                        primaryViewButtonsOfCurrentLearningUnit.add(button);
                    }
                }
            }
            if (primaryViewButtonsOfCurrentLearningUnit.size() > 0) {
                if (primaryViewButtonsOfCurrentLearningUnit.size() <= 3) {
                    for (int i = 0; i < primaryViewButtonsOfCurrentLearningUnit.size(); i++)
                        learningUnitViewPrimaryButtonsTopRowContainer.add((JComponent)primaryViewButtonsOfCurrentLearningUnit.get(i));
                }
                else {
                    int bottom, top, center;
                    if (primaryViewButtonsOfCurrentLearningUnit.size() <= 6) {
                        top = 3;
                        bottom = primaryViewButtonsOfCurrentLearningUnit.size() - top;
                    }
                    else {
                        bottom = primaryViewButtonsOfCurrentLearningUnit.size() / 2;
                        top = primaryViewButtonsOfCurrentLearningUnit.size() - bottom;
                    }
                    for (int i = 0; i < top; i++)
                        learningUnitViewPrimaryButtonsTopRowContainer.add((FSLLearningUnitViewPrimaryActivationButton)primaryViewButtonsOfCurrentLearningUnit.get(i));
                    for (int i = top; i < primaryViewButtonsOfCurrentLearningUnit.size(); i++)
                        learningUnitViewPrimaryButtonsBottomRowContainer.add((FSLLearningUnitViewPrimaryActivationButton)primaryViewButtonsOfCurrentLearningUnit.get(i));
                }
            }
        }
        learningUnitViewPrimaryButtonsTopRowContainer.revalidate();
        learningUnitViewPrimaryButtonsBottomRowContainer.revalidate();
        learningUnitViewPrimaryButtonsTopRowContainer.repaint();
        learningUnitViewPrimaryButtonsBottomRowContainer.repaint();
    }

    private void buildLearningUnitViewsSecondaryButtons() {
        if (learningUnitViewManagersOfCurrentLearningUnit != null) {
            if (secondaryViewButtonsOfCurrentLearningUnit != null) {
                for (int i = 0; i < secondaryViewButtonsOfCurrentLearningUnit.size(); i++) {
                    ((FSLLearningUnitViewSecondaryActivationButton)secondaryViewButtonsOfCurrentLearningUnit.get(i)).removeActionListener(learningUnitViewActivationButtonListener);
                }
            }
            secondaryViewButtonsOfCurrentLearningUnit = new Vector();
            for (int i = 0; i < learningUnitViewManagersOfCurrentLearningUnit.length; i++) {
                if (learningUnitViewManagersOfCurrentLearningUnit[i] != null) {
                    FSLLearningUnitViewSecondaryActivationButton secondaryActivationButton =
                        learningUnitViewManagersOfCurrentLearningUnit[i].getSecondaryActivationButton();
                    if (secondaryActivationButton != null) {
                        secondaryActivationButton.setActionCommand(learningUnitViewManagersOfCurrentLearningUnit[i].getLearningUnitViewManagerId());
                        secondaryActivationButton.addActionListener(learningUnitViewActivationButtonListener);
                        secondaryViewButtonsOfCurrentLearningUnit.add(secondaryActivationButton);
                    }
                }
            }
        }
        else {
            secondaryViewButtonsOfCurrentLearningUnit = new Vector();
        }
    }

    private void putComponentIntoContainer(JPanel container, JComponent component) {
        container.removeAll();
        if (component != null) {
            container.add(component);
        }
        container.revalidate();
        container.repaint();
    }
    //added by Gunnar Thies

    public String getCurrentUserRole() {
        return currentUserRole;
    }
    
    /**
     * This method controlls the adding of components to the contextDependentInteractionPanel.
     * Components are stored in a array. If no component is in there the cdi-panel is invisible.
     * Otherwise it is visible and shows the components...
     * @param component The component which should be added to the cdi-panel
     * @param managerId The managerId from which the component is added.
     */
    public static void addContextDependentInteractionComponent(JPanel component, String managerId) {
        //if the component is not null, it will be added
        if (component != null) {
            //if the managerId is in the list already, nothing happens, because
            //the component of the view is added earlier.
            if (array.contains(managerId)) { }
            //the managerId is not in the list.
            else {
                //the managerId is added to the list.
                array.add(managerId);
                //the name of the component is set for later removement
                component.setName(managerId);
                //add component to subpanel
                CDISubPanel.add(component);
                //add subpanel to cdi-container
                learningUnitViewContextDependentInteractionPanel.add(CDISubPanel, BorderLayout.EAST);
            }
        }
        //the component is null, so the manager wants the component to be removed.
        else {
            //if one of the components-names in the list equals the managerId then...
            if (array.contains(managerId)) {
                //...the component is removed from the subpanel
                CDISubPanel.remove(array.indexOf(managerId));
                //the name of the manager is removed too
                array.remove(array.indexOf(managerId));
                //the changed subpanel is added to the cdi-panel
                learningUnitViewContextDependentInteractionPanel.add(CDISubPanel, BorderLayout.EAST);
            }
        }
        //if the cdi-panel is not empty, it is shown
        learningUnitViewContextDependentInteractionPanel.setVisible(!array.isEmpty());
        //revalidate the cdi-panel and repaint it
        learningUnitViewContextDependentInteractionPanel.revalidate();
        learningUnitViewContextDependentInteractionPanel.repaint();
    }

    //end of adding by Gunnar Thies
    private FSLLearningUnitViewManagersDescriptor
        loadLearningUnitViewManagersDescriptor(File learningUnitViewManagersDescriptorFile) {
            FSLLearningUnitViewManagersDescriptor learningUnitViewManagersDescriptor = null;
            Dispatcher dispatcher = LearningUnitViewManagersDescriptor.newDispatcher();
            dispatcher.register(LearningUnitViewManagerDescriptor.class, FSLLearningUnitViewManagerDescriptor.class);
            dispatcher.register(LearningUnitViewManagersDescriptor.class, FSLLearningUnitViewManagersDescriptor.class);
            FileInputStream learningUnitViewManagersDescriptorFileInputStream = null;
            try {
                learningUnitViewManagersDescriptorFileInputStream =
                    new FileInputStream(learningUnitViewManagersDescriptorFile);
                learningUnitViewManagersDescriptor =
                    (FSLLearningUnitViewManagersDescriptor)dispatcher.unmarshal(learningUnitViewManagersDescriptorFileInputStream);
                learningUnitViewManagersDescriptorFileInputStream.close();
            }
            catch (Exception e) {
                System.out.println(e);
            }
            return learningUnitViewManagersDescriptor;
    }

    private void enableContextDependentActivationButtons(boolean enabled) {
        for (int i = 0; i < contextDependentActivationButtonsOfCurrentLearningUnit.size(); i++) {
            ((FSLLearningUnitViewContextDependentActivationButton)contextDependentActivationButtonsOfCurrentLearningUnit.get(i)).setEnabled(enabled);
        }
    }

    class FSLLearningUnitViewsManager_LongLastingOperationStatus implements FLGLongLastingOperationStatus {
        public int getStepSize() {
            return (int)progressStepSize;
        }

        public void setStatusValue(int value) {
            // updateProgressBar(value);
        }

        public int getStatusValue() {
            return progressDialog.getValue();
        }
    }


    class FSLLearningUnitViewsManager_FSLProgramConfigurationEventAdapter implements FSLProgramConfigurationListener {
        public void configurationChanged(FSLProgramConfigurationEvent event) {
            if (event.getEventType() == FSLProgramConfigurationEvent.FSL_CONFIGURATION_CHANGED) {
                automaticSelectionEnabled = event.isAutomaticSelectionEnabled();
                displayWelcomeScreenEnabled = event.isDisplayWelcomeScreenEnabled();
            }
        }
    }


    class FSLLearningUnitViewsManager_FSLUserAdapter implements FSLUserListener {
        public void userChanged(FSLUserEvent e) {
            currentUserRole = e.getUserRole();
            if (displayWelcomeScreenEnabled) {
                FLGMediaPlayer mediaPlayer = new FLGMediaPlayer();
                File videoFile = new File("media//welcome.mov");
                if (videoFile.exists()) {
                    mediaPlayer.addMediaListener(
                        new FLGMediaListener() {
                            public void endOfMediaReached() {
                                putComponentIntoContainer(learningUnitViewAssistantPanelContainer, null);
                            }
                        });
                    learningUnitViewAssistantPanelContainer.add(mediaPlayer);
                    try {
                        FLGUIUtilities.startLongLastingOperation();
                        mediaPlayer.loadMedia(videoFile);
                    }
                    catch (FLGMediaException me) {
                        System.out.println("FSLLearningUnitViewsManager_FSLUserAdapter: " + me);
                    }
                    finally {
                        FLGUIUtilities.stopLongLastingOperation();
                    }
                    mediaPlayer.start();
                }
                else {
                    putComponentIntoContainer(learningUnitViewAssistantPanelContainer, null);
                }
            }
        }
        
        public void userLogout(FSLUserEvent e) {
            currentUserRole = "<<not defined>>";
        }

        public void userRoleChanged(FSLUserEvent e) {
            currentUserRole = e.getUserRole();
        }
    }


    class FSLLearningUnitViewsManager_FSLLearningUnitAdapter extends FSLLearningUnitAdapter {
        public void learningUnitUserViewChanged(FSLLearningUnitEvent event) {
            originalElementsOnly = event.isOriginalElementsOnly();
        }

        public void learningUnitsUserDirectoryChanged(FSLLearningUnitEvent event) {
            learningUnitCurrentUserDataDirectory = event.getLearningUnitsUserDirectory();
            setActiveLearningUnitViewManager(null, false);
        }

        public void learningUnitEditModeChanged(FSLLearningUnitEvent event) {
            editMode = event.isEditMode();
        }

        public void learningUnitActivated(FSLLearningUnitEvent event) {
            if (event.getLearningUnitId() == null) {
                learningUnitViewManagersOfCurrentLearningUnit = null;
            }
            else {
                String[] learningUnitViewManagersIds =
                    learningUnitsActivator.getLearningUnitViewManagersIdsOfLearningUnit(event.getLearningUnitId());
                if (learningUnitViewManagersIds != null) {
                    learningUnitViewManagersOfCurrentLearningUnit =
                        new FSLLearningUnitViewManager[learningUnitViewManagersIds.length];
                    for (int i = 0; i < learningUnitViewManagersIds.length; i++) {
                        learningUnitViewManagersOfCurrentLearningUnit[i] =
                            (FSLLearningUnitViewManager)learningUnitViewManagers.get(learningUnitViewManagersIds[i]);
                    }
                }
            }
            if (activeLearningUnitViewManager != null) {
                activeLearningUnitViewManager.fireLearningUnitViewEvent(FSLLearningUnitViewEvent.createViewDeactivatedEvent(activeLearningUnitViewManager.getLearningUnitViewManagerId()));
            }
            activeLearningUnitViewManager = null;
            buildDependentUI(true, true);
        }
    }
}
