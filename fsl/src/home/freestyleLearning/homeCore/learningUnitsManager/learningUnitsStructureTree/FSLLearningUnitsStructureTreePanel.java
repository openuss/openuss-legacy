/* Generated by Freestyle Learning Group */

package freestyleLearning.homeCore.learningUnitsManager.learningUnitsStructureTree;

import java.awt.*;
import javax.swing.*;
import javax.swing.border.*;

import freestyleLearning.homeCore.learningUnitsManager.FSLLearningUnitsManager;
import freestyleLearning.homeCore.learningUnitsManager.data.xmlBindingSubclasses.FSLLearningUnitDescriptor;
import freestyleLearning.homeCore.learningUnitsManager.data.xmlBindingSubclasses.FSLLearningUnitsDescriptor;
import freestyleLearningGroup.independent.gui.FLGOptionPane;
import freestyleLearningGroup.independent.util.FLGInternationalization;

/**
 * @author Carsten Fiedler
 * Carsten Fiedler modified 01.09.2005
 * Class includes Learning Units Structure Tree, OptionPane
 * and elements for editting the tree.
 */
public class FSLLearningUnitsStructureTreePanel {
		private FSLLearningUnitsStructureTree structureTree;
        private FSLLearningUnitsDescriptor learningUnitsDescriptor;
        private FSLLearningUnitsManager learningUnitsManager;
        private FLGInternationalization internationalization;
        private JPanel mainPanel;
        private JScrollPane mainScrollPane;
        private JPanel structurePanel;
        private JPanel headerPanel;
        private FSLLearningUnitDescriptor selectedLearningUnit;
        private FLGOptionPane optionPane;

        /**
         * Init Panel with tRee, build from
         * FSLLearningUnitsDescriptor and FSLLearningUnitsManager. 
         * @param FSLLearningUnitsDescriptor learningUnitsDescriptor
         * @param FSLLearningUnitsManager learningUnitsManager
         */
        public void init(FSLLearningUnitsDescriptor learningUnitsDescriptor, FSLLearningUnitsManager learningUnitsManager) {
        	this.learningUnitsDescriptor = learningUnitsDescriptor;
        	this.learningUnitsManager = learningUnitsManager;
        	internationalization = new FLGInternationalization("freestyleLearning.homeCore.learningUnitsManager.learningUnitsStructureTree.internationalization",FSLLearningUnitsStructureTreePanel.class.getClassLoader());
        	structurePanel = new JPanel(new BorderLayout());
        	structurePanel.setFont(new Font("SansSerif", Font.PLAIN, 16));
   	      	// add structure tree into structure panel
        	structureTree = new FSLLearningUnitsStructureTree(this,learningUnitsDescriptor,learningUnitsManager);
        	JTree strucTree = structureTree.getStructureTree();
        	strucTree.setBackground(new Color(240, 241, 245));
        	strucTree.setFont(new Font("SansSerif", Font.PLAIN, 16));
        	strucTree.setRowHeight(22);
        	strucTree.setBorder(new EmptyBorder(5,5,5,5));
        	structurePanel.add(strucTree, BorderLayout.CENTER);
        }
        
        /**
         * Return Structure Tree Panel.
         * @return JPanel structurePanel
         */
        public JPanel getStructureTreePanel() {
        	return structurePanel; 
        }
        
        /**
         * Open FLGOptionPane with Learning Units Structure Tree.
         */
        public void openOptionPane() {
        	// build Panel
        	mainPanel = new JPanel(new BorderLayout());
        	headerPanel = new JPanel(new BorderLayout());
        	JLabel headerLabel = new JLabel(internationalization.getString("header.text"));
        	headerLabel.setFont(new Font("SansSerif", Font.PLAIN, 16));
        	headerPanel.add(headerLabel, BorderLayout.WEST);
         	mainPanel.add(headerPanel, BorderLayout.NORTH);
         	mainPanel.add(structurePanel, BorderLayout.CENTER);
         	mainScrollPane = new JScrollPane(mainPanel);
            mainScrollPane.setBorder(BorderFactory.createEmptyBorder());
            mainScrollPane.setPreferredSize(new Dimension(500,300));
            // init OptionPane
         	String[] buttonsDescription = new String[2];
        	buttonsDescription[0] = internationalization.getString("learningUnitsStructureTreePanel.OptionPane.loadButton");
			buttonsDescription[1] = internationalization.getString("learningUnitsStructureTreePanel.OptionPane.cancelButton");
            optionPane = new FLGOptionPane(null, mainScrollPane, internationalization.getString("learningUnitsStructureTree.windowTitle"), FLGOptionPane.OK_CANCEL_OPTION,FLGOptionPane.PLAIN_MESSAGE, buttonsDescription);
            optionPane.setVisible(true);
            if (optionPane.getReturnValue() == FLGOptionPane.OK_OPTION) {
				// load learning unit
				(new Thread() {
					public void run() {
		        		(FSLLearningUnitsStructureTreePanel.this).learningUnitsManager.learningUnitSelected();
					}
				}).start();
        	}
        }

        /**
         * Close FLGOptionPane with Learning Units Structure Tree.
         */
        public void closeOptionPane() {
        	optionPane.setVisible(false);
        }
        
        /**
         * Update Learning Units Structure Tree with FSLLearningUnitDescriptor.
         * @param FSLLearningUnitsDescriptor learningUnitsDescriptor
         */
        public void updateTree(FSLLearningUnitsDescriptor learningUnitsDescriptor) {
			structureTree.buildSructureTreeFromFSLLearningUnitsDescriptor(learningUnitsDescriptor);
			structurePanel.removeAll();
			JTree strucTree = structureTree.getStructureTree();
        	strucTree.setBackground(new Color(240, 241, 245));
        	strucTree.setFont(new Font("SansSerif", Font.PLAIN, 16));
        	strucTree.setRowHeight(22);
        	strucTree.setBorder(new EmptyBorder(5,5,5,5));
        	structurePanel.add(strucTree, BorderLayout.CENTER);
        	structurePanel.updateUI();
		}
        
        /**
         * Set selection path in Learning Units StructureTree with FSLLearningUnitDescriptor.
         * @param FSLLearningUnitDescriptor learningUnitDescriptor
         */
        public void setSelectionPath(FSLLearningUnitDescriptor learningUnitDescriptor) {
        	structureTree.setSelectionPath(learningUnitDescriptor);
        }
        
        /**
         * Get Selected Tree Node / FSLLearningUnitDescriptor
         * from Learning Unit Structure Tree.
         * @return FSLLearningUnitDescriptor selectedLearningUnit
         */
        public FSLLearningUnitDescriptor getSelectedLearningUnitDescriptor() {
        	selectedLearningUnit = structureTree.getSelectedLearningUnit();
        	return selectedLearningUnit;
        }
}