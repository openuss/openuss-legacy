/* Generated by Freestyle Learning Group */

package freestyleLearning.homeCore.learningUnitsManager.learningUnitsStructureTree;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Vector;

import javax.swing.JComponent;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import freestyleLearning.homeCore.learningUnitsManager.FSLLearningUnitsManager;
import freestyleLearning.homeCore.learningUnitsManager.data.xmlBindingSubclasses.FSLLearningUnitDescriptor;
import freestyleLearning.homeCore.learningUnitsManager.data.xmlBindingSubclasses.FSLLearningUnitsDescriptor;
import freestyleLearningGroup.independent.util.FLGUtilities;

/**
 * @author Carsten Fiedler
 * Class builds and modifies the Learning Units Structure Tree.
 */
public class FSLLearningUnitsStructureTree extends FSLAbstractLearningUnitsStructureTree {
	private JMenuItem insertLUItem;
	private JMenuItem insertLUKatItem;
	private JMenuItem renameItem;
	private JMenuItem sortItem;
	private JMenuItem exportItem;
	private JMenuItem removeItem;
	
	/**
	 * Constructor.
	 * @param FSLLearningUnitsStructureTreePanel learningUnitsStructureTreePanel
	 * @param FSLLearningUnitsDescriptor learningUnitsDescriptor
	 * @param FSLLearningUnitsManager learningUnitsManager
	 */
	public FSLLearningUnitsStructureTree(FSLLearningUnitsStructureTreePanel learningUnitsStructureTreePanel, 
			FSLLearningUnitsDescriptor learningUnitsDescriptor, FSLLearningUnitsManager learningUnitsManager) {
		super(learningUnitsStructureTreePanel, learningUnitsDescriptor, learningUnitsManager);
	}
	
    /**
     * Initializes popup menu with language and register action listener.
     */
    public void initPopupMenu() {
    	PopupActionListener popupActionListener = new PopupActionListener();
    	popup = new JPopupMenu();
        // add new learning unit (only author is allowed to add learning units)
    	insertLUItem = new JMenuItem(internationalization.getString("structureTreePopup.insertLearningUnit"));
    	insertLUItem.setFont(new Font("SansSerif", Font.PLAIN, 12));
    	insertLUItem.addActionListener(popupActionListener);
        if (learningUnitsManager.getUserRoleIsAuthor()!=true){
        	insertLUItem.setEnabled(false);
        }
        popup.add(insertLUItem);
        // add new learning unit category (only author is allowed to add learning units)
        insertLUKatItem = new JMenuItem(internationalization.getString("structureTreePopup.insertLearningUnitCategory"));
        insertLUKatItem.setFont(new Font("SansSerif", Font.PLAIN, 12));
        insertLUKatItem.addActionListener(popupActionListener);
        //if (learningUnitsManager.getUserRoleIsAuthor()!=true){
        	//insertLUKatItem.setEnabled(false);
        //}
        popup.add(insertLUKatItem);
        // rename node (only author is allowed to rename nodes)
        renameItem = new JMenuItem(internationalization.getString("structureTreePopup.rename"));
        renameItem.setFont(new Font("SansSerif", Font.PLAIN, 12));
        renameItem.addActionListener(popupActionListener);
        if (learningUnitsManager.getUserRoleIsAuthor()!=true){
        	renameItem.setEnabled(false);
        }
        popup.add(renameItem);
        // sort tree
        sortItem = new JMenuItem(internationalization.getString("structureTreePopup.sort"));
        sortItem.setFont(new Font("SansSerif", Font.PLAIN, 12));
        sortItem.addActionListener(popupActionListener);
        //if (learningUnitsManager.getUserRoleIsAuthor()!=true){
        	//sortItem.setEnabled(false);
        //}
        popup.add(sortItem);
        // export learning unit
        exportItem = new JMenuItem(internationalization.getString("structureTreePopup.export"));
        exportItem.setFont(new Font("SansSerif", Font.PLAIN, 12));
        exportItem.addActionListener(popupActionListener);
        popup.add(exportItem);
        // remove node (only adminstrator is allowed to remove nodes)
        removeItem = new JMenuItem(internationalization.getString("structureTreePopup.remove"));
        removeItem.setFont(new Font("SansSerif", Font.PLAIN, 12));
        removeItem.addActionListener(popupActionListener);
        //if (learningUnitsManager.getUserRoleIsAuthor()!=true){
        	//removeItem.setEnabled(false);
        //}
        popup.add(removeItem);
        popup.setOpaque(true);
    }

    /**
     * Inits listeners.
     */
    public void initListener() {
    	// add mouse listener for popup menu loading
    	structureTree.addMouseListener (
                new MouseAdapter () {
                	// show popup menu and set selection path in tree (windows)
                    public void mouseReleased(MouseEvent e) {
                       if (e.isPopupTrigger()) {
                    	   structureTree.setSelectionPath((TreePath) structureTree.getClosestPathForLocation(e.getX(),e.getY()));
                    	   selectedNode = (DefaultMutableTreeNode) structureTree.getLastSelectedPathComponent();
                    	   selectionPath = structureTree.getLeadSelectionPath();
	               		   selectedLearningUnitDescriptor = (FSLLearningUnitDescriptor) selectedNode.getUserObject();
	               		   dragSourceElementId = ((FSLLearningUnitDescriptor) selectedNode.getUserObject()).getId();
	               		   structureTree.setEditable(false);
	               		   
	               		   if (selectionPath!=null && !dragging) {
	               			   popup.show((JComponent)e.getSource(), e.getX(), e.getY());
	               		   }
	                   }
                    }
                    
                    // show popup menu and set selection path in tree (linux)
                    public void mousePressed(MouseEvent e) {
                       if (e.isPopupTrigger()) {
                    	   structureTree.setSelectionPath((TreePath) structureTree.getClosestPathForLocation(e.getX(),e.getY()));
                    	   selectedNode = (DefaultMutableTreeNode) structureTree.getLastSelectedPathComponent();
                    	   selectionPath = structureTree.getLeadSelectionPath();
	               		   selectedLearningUnitDescriptor = (FSLLearningUnitDescriptor) selectedNode.getUserObject();
	               		   dragSourceElementId = ((FSLLearningUnitDescriptor) selectedNode.getUserObject()).getId();
	               		   structureTree.setEditable(false);
	               		   if (selectionPath!=null && !dragging) {
	               			   popup.show((JComponent)e.getSource(), e.getX(), e.getY());
	               		   }
	                   }
                   }
                    
               }
    	);
    	// register MouseAdapter
    	structureTree.addMouseListener(new TreeMouseAdapter());
    	//register TreeCellRenderer
    	structureTree.setCellRenderer(new FSLTreeCellRenderer());
      	// add listener for drag an drop
      	structureTree.addMouseMotionListener(new TreeMouseDragAndDropListener());
      	// register keylister
      	structureTree.addKeyListener(new KeyListener() {
      		public void keyPressed(KeyEvent e) {
      			System.out.println(e.getKeyLocation());
      			if (structureTree.getLastSelectedPathComponent() != null) {
      				selectedNode = (DefaultMutableTreeNode) structureTree.getLastSelectedPathComponent();
      				selectionPath = structureTree.getLeadSelectionPath();
      				selectedLearningUnitDescriptor = (FSLLearningUnitDescriptor) selectedNode.getUserObject();
      				dragSourceElementId = ((FSLLearningUnitDescriptor) selectedNode.getUserObject()).getId();
      				structureTree.setEditable(false);
      			}
      		}
      		public void keyReleased(KeyEvent e) {}
      		public void keyTyped(KeyEvent e) {}
      	});
    }
    
    public void insertHighLevelNodes(FSLLearningUnitsDescriptor learningUnitsDescriptor) {
    	java.util.List learningUnitsfromFSLLearningUnitsDescriptor = learningUnitsDescriptor.getLearningUnitsDescriptors();
    	Iterator iter = learningUnitsfromFSLLearningUnitsDescriptor.iterator();
    	while (iter.hasNext()) {
    		FSLLearningUnitDescriptor tmpLearnUnitDesc = (FSLLearningUnitDescriptor)(iter.next());
    		// check if a node has a parent id
    		if (tmpLearnUnitDesc.getParentID()==null || (tmpLearnUnitDesc.getParentID().equals(""))) {
    			Enumeration nodesEnumeration = root.children();
    			if (nodesEnumeration.hasMoreElements()==false) {
    				DefaultMutableTreeNode learningUnitNode = new DefaultMutableTreeNode(tmpLearnUnitDesc);
 					root.add(learningUnitNode);
					structureTreeModel.reload();
    			} else {
    				boolean nodeAlreadyStored = false;
    				// if any node exists in tree
    				while (nodesEnumeration.hasMoreElements()) {
    					DefaultMutableTreeNode currentNode = (DefaultMutableTreeNode)(nodesEnumeration.nextElement());
    					if (((FSLLearningUnitDescriptor) currentNode.getUserObject()) == tmpLearnUnitDesc) {
    						// node already exits in tree
    						nodeAlreadyStored = true;
    						break;
    					}
    				}
    				if (nodeAlreadyStored==false) {
    					// insert node as sibling to root
    					DefaultMutableTreeNode learningUnitNode = new DefaultMutableTreeNode(tmpLearnUnitDesc);
    					root.add(learningUnitNode);
    					structureTreeModel.reload();
    				}
    			}
    		}
    	}
    }
    
    public void insertChildren(FSLLearningUnitsDescriptor learningUnitsDescriptor, DefaultMutableTreeNode parent) {
    	Enumeration nodesEnumeration = parent.children();
    	if (nodesEnumeration!=null) {
    		while (nodesEnumeration.hasMoreElements()) {
    			java.util.List learningUnitsfromFSLLearningUnitsDescriptor = learningUnitsDescriptor.getLearningUnitsDescriptors();
    	    	Iterator iter = learningUnitsfromFSLLearningUnitsDescriptor.iterator();
       			DefaultMutableTreeNode higherLevelNode = (DefaultMutableTreeNode)(nodesEnumeration.nextElement());
    			while (iter.hasNext()) {
       				FSLLearningUnitDescriptor childDesc = (FSLLearningUnitDescriptor)(iter.next());
    				FSLLearningUnitDescriptor parentDesc = learningUnitsDescriptor.getDescriptorById(childDesc.getParentID());
    				if (parentDesc!=null) {
    					if ((FSLLearningUnitDescriptor) higherLevelNode.getUserObject() == parentDesc) {
    						Enumeration enumeration = higherLevelNode.children();
    						boolean childAlreadyExits = false;
    						while (enumeration.hasMoreElements()) {
    							DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) enumeration.nextElement();
    							FSLLearningUnitDescriptor treeNodeDesc = (FSLLearningUnitDescriptor) treeNode.getUserObject();
    							if (treeNodeDesc.getId().equals(childDesc.getId())) {
    								childAlreadyExits = true;
    							}
    						}
    						if (!childAlreadyExits) {
    							DefaultMutableTreeNode newChild = new DefaultMutableTreeNode(childDesc);
    							structureTreeModel.insertNodeInto(newChild, higherLevelNode, higherLevelNode.getChildCount());
    							structureTreeModel.reload();
    						}
    						insertChildren(learningUnitsDescriptor,higherLevelNode);
    					}
    				} 
    			}
    		}
    	}
    }
    
    /**
     * Sorts elements from a tree layer.
     */
    public void sortTree() {
    	java.util.List learningUnitsfromFSLLearningUnitsDescriptor = learningUnitsDescriptor.getLearningUnitsDescriptors();
    	Iterator iter = learningUnitsfromFSLLearningUnitsDescriptor.iterator();
    	
    	Vector newDescriptorOrder = new Vector();
    	Vector elementsToSort = new Vector();
    	FSLLearningUnitDescriptor learningUnitDescriptor = null; 
    	Vector restVector = new Vector();
    	    	
    	while (iter.hasNext()) {
    		learningUnitDescriptor = (FSLLearningUnitDescriptor) iter.next();
      		if (((FSLLearningUnitDescriptor)selectedNode.getUserObject()).getParentID()==learningUnitDescriptor.getParentID()) {
      			elementsToSort.add(learningUnitDescriptor);
      			while (iter.hasNext()) {
      				learningUnitDescriptor = (FSLLearningUnitDescriptor) iter.next();
      				if (((FSLLearningUnitDescriptor)selectedNode.getUserObject()).getParentID()!=null && learningUnitDescriptor.getParentID()!=null) {
      					if (((FSLLearningUnitDescriptor)selectedNode.getUserObject()).getParentID().equals(learningUnitDescriptor.getParentID())) {
      						elementsToSort.add(learningUnitDescriptor);
      					} else { restVector.add(learningUnitDescriptor); }
      				} else if (((FSLLearningUnitDescriptor)selectedNode.getUserObject()).getParentID()==null && learningUnitDescriptor.getParentID()==null) {
      						elementsToSort.add(learningUnitDescriptor);
      					} else { restVector.add(learningUnitDescriptor); }
      			}
       		}
      	}
    	
    	FSLLearningUnitDescriptor[] arrayToSort = new FSLLearningUnitDescriptor[elementsToSort.size()];
    	Iterator iter2 = elementsToSort.iterator();
    	int index=0;
    	while (iter2.hasNext()) {
    		arrayToSort[index] = (FSLLearningUnitDescriptor) iter2.next();
    		learningUnitsDescriptor.getLearningUnitsDescriptors().remove(arrayToSort[index]);
    		index++;
      	}
    	
    	/** bubble sort elements **/
    	FSLLearningUnitDescriptor[] sortedArray = bubbleSort(arrayToSort);
    	for (int i=0; i<sortedArray.length; i++) {
    		newDescriptorOrder.add(sortedArray[i]);
    	}

    	/*** update learning units descriptor ***/
    	// add rest
    	Iterator restIter = restVector.iterator();
    	while(restIter.hasNext()) {
    		FSLLearningUnitDescriptor tmpDesc = (FSLLearningUnitDescriptor)restIter.next();
    		newDescriptorOrder.add(tmpDesc);
       		learningUnitsDescriptor.getLearningUnitsDescriptors().remove(tmpDesc);
    	}
       	// store new order in learning unit descriptor
    	for (int i=0; i<newDescriptorOrder.size();i++) {
    		FSLLearningUnitDescriptor tmpDesc = (FSLLearningUnitDescriptor) newDescriptorOrder.get(i);
       		learningUnitsDescriptor.getLearningUnitsDescriptors().add(tmpDesc);
    	}
       	
    	/*** update tree ***/
    	learningUnitsDescriptor.setModified(true);
    	learningUnitsManager.saveLearningUnitsDescriptor(learningUnitsDescriptor);
       	learningUnitsStructureTreePanel.updateTree(learningUnitsDescriptor);
    }
    
    /*
     * Method for Bubble-Sort.
     */
	public FSLLearningUnitDescriptor[] bubbleSort(FSLLearningUnitDescriptor[] arrayToSort) {
		boolean ascending = true;
		if (arrayToSort.length < 2) return arrayToSort;
		FSLLearningUnitDescriptor[] sortedString = new FSLLearningUnitDescriptor[arrayToSort.length];
		for (int i = 0; i < arrayToSort.length; i++) {
            sortedString[i] = arrayToSort[i];
        }
        if (ascending) {
        	// ascending order
            for (int i=0; i<sortedString.length-1; i++) {
                    for (int j=0; j<sortedString.length-1-i; j++) {
                        if ((sortedString[j + 1].getTitle()).compareToIgnoreCase(sortedString[j].getTitle()) < 0) {
                        	FSLLearningUnitDescriptor swap = sortedString[j];
                            sortedString[j] = sortedString[j+1];                            
                            sortedString[j+1] = swap;
                        }
                }   
            }
        } else {
        	// descending order
            for (int i = sortedString.length - 2; i >= 0; i--) {
            	for (int j = sortedString.length - 2 - i; j >= 0; j--) {
            		if ((sortedString[j + 1].getTitle()).compareToIgnoreCase(sortedString[j].getTitle()) > 0) {
            			FSLLearningUnitDescriptor swap = sortedString[j];
                        sortedString[j] = sortedString[j + 1];                            
                        sortedString[j + 1] = swap;
                    }
                }   
            }
        }
        return sortedString;
 	}

    /*
     * Method gets Learning Unit Titles from learning units descriptor
     * and adds them as nodes in Learning Unit Structure Tree.
     */
    public void buildSructureTreeFromFSLLearningUnitsDescriptor(FSLLearningUnitsDescriptor learningUnitsDescriptor) {
      	this.learningUnitsDescriptor = learningUnitsDescriptor;
		// create new Tree
    	root = new DefaultMutableTreeNode(new Integer(0));
    	structureTreeModel = new DefaultTreeModel(root);
    	insertHighLevelNodes(learningUnitsDescriptor);
    	insertChildren(learningUnitsDescriptor,root);
    	structureTree = new JTree(structureTreeModel);
    	structureTree.setRootVisible(false);
    	structureTree.setEditable(false);
    	initListener();    	
    }
    
    class PopupActionListener implements ActionListener {
    	public void actionPerformed(ActionEvent ae) {
    		// add new learning unit
    		if (ae.getActionCommand().equals(internationalization.getString("structureTreePopup.insertLearningUnit"))) {
    			// open dialog to create new learning unit
    			// createSibling() be referenced by learning units manager
       			learningUnitsManager.showNewLearningUnitDialog(true);
      		}
    		// add new learning unit category
    		if (ae.getActionCommand().equals(internationalization.getString("structureTreePopup.insertLearningUnitCategory"))) {
    			// open dialog to create new learning unit or learning unit category
    			// createSibling() or createNewChild will be referenced by learning units manager
     			learningUnitsManager.showNewLearningUnitCategoryDialog(); 
      		}
    		// rename node
    		if (ae.getActionCommand().equals(internationalization.getString("structureTreePopup.rename"))) {
     			if (selectedLearningUnitDescriptor.getFolder()) {
     				learningUnitsManager.showPropertiesCategoryDialogAndUpdateStructureTree(selectedLearningUnitDescriptor);
       			} else {
     				new Thread() {
     					public void run() {
     						learningUnitsManager.showPropertiesDialog(selectedLearningUnitDescriptor);
     					}
     				}.start();
    	   		}
     			renameItem.setEnabled(true);
            }
    		// export learning unit
    		if (ae.getActionCommand().equals(internationalization.getString("structureTreePopup.export"))) {
     			learningUnitsManager.exportLearningUnit(selectedLearningUnitDescriptor);
     			exportItem.setEnabled(true);
            }
    		// sort tree
            if (ae.getActionCommand().equals(internationalization.getString("structureTreePopup.sort"))) {
              	sortTree();
              	selectedNode=null;
              	selectedLearningUnitDescriptor = null;
              	exportItem.setEnabled(true);
            }
    		// remove node
            if (ae.getActionCommand().equals(internationalization.getString("structureTreePopup.remove"))) {
            	// remove node from learning units descriptor
            	// removeNode() will be referenced from learning units manager
              	learningUnitsManager.deleteLearningUnit(selectedLearningUnitDescriptor);
            	selectedNode=null;
            	selectedLearningUnitDescriptor = null;
            	removeItem.setEnabled(true);
            }
    	}
    }
}