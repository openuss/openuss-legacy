/* Generated by Freestyle Learning Group */

package freestyleLearning.homeCore.learningUnitsManager.dialogs;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;

import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.gui.documents.*;
import freestyleLearningGroup.independent.util.*;

public class FSLNewLearningUnitDialog implements FLGDialogInputVerifier {
    protected FLGInternationalization internationalization;
    protected JPanel learningUnitDataPanel;
    protected JPanel dialogContentComponent;
    protected JPanel dialogPanel;
    protected JPanel openUssSpecificPanel;
    protected JTextField textField_learningUnitId;
    protected JTextField textField_learningUnitTitle;
    protected JTextField textField_learningUnitVersion;
    protected JTextArea textArea_learningUnitAuthors;
    protected JTextField textField_learningUnitEnrollmentId;
    protected JTextField textField_OpenUssServerName;
    protected JCheckBox checkbox_enableEnrollmentId;
    protected JCheckBox[] checkBoxes_learningUnitViewManagersIds;
    protected String[] [] installedLearningUnitViewManagersIdsAndTitles;
    protected String learningUnitId;
    protected String learningUnitTitle;
    protected String learningUnitVersion;
    protected String learningUnitAuthors;
    protected String enrollmentId;
    protected String openUssServerName;
    protected java.util.List selectedLearningUnitViewManagersIds;

    public FSLNewLearningUnitDialog(String[] [] installedLearningUnitViewManagersIdsAndTitles) {
        internationalization = new FLGInternationalization("freestyleLearning.homeCore.learningUnitsManager.dialogs.internationalization",
            getClass().getClassLoader());
        this.installedLearningUnitViewManagersIdsAndTitles = installedLearningUnitViewManagersIdsAndTitles;
        openUssServerName = internationalization.getString("openUssServerName");
        buildIndependentUI();
        buildDependentUI();
    }
    
    public static void main(String[] args) {
        String[][] ids = { {"bla", "BLAH BLAH BLAH BLAH BLAH BLAH " }, 
            {"bla", "BLAH" }, {"bla", "BLAH" }, {"bla", "BLAH" }, {"bla", "BLAH" }, {"bla", "BLAH" }, {"bla", "BLAH" }, {"bla", "BLAH" } };
        FSLNewLearningUnitDialog dialog = new FSLNewLearningUnitDialog(ids);
        dialog.showDialog();
        System.exit(0);
    }

    public boolean showDialog() {
        int returnValue = FLGOptionPane.showConfirmDialog(this, dialogPanel, internationalization.getString("dialog.NewLearningUnit.title"),
            FLGOptionPane.OK_CANCEL_OPTION, FLGOptionPane.PLAIN_MESSAGE);
        if (returnValue == FLGOptionPane.OK_OPTION) {
            learningUnitId = textField_learningUnitId.getText();
            learningUnitTitle = textField_learningUnitTitle.getText();
            learningUnitVersion = textField_learningUnitVersion.getText();
            learningUnitAuthors = textArea_learningUnitAuthors.getText();
            enrollmentId = textField_learningUnitEnrollmentId.getText();
            openUssServerName = textField_OpenUssServerName.getText();
            selectedLearningUnitViewManagersIds = new Vector();
            for (int i = 0; i < checkBoxes_learningUnitViewManagersIds.length; i++)
                if (checkBoxes_learningUnitViewManagersIds[i].isSelected())
                    selectedLearningUnitViewManagersIds.add(installedLearningUnitViewManagersIdsAndTitles[i] [0]);
        }
        return returnValue == FLGOptionPane.OK_OPTION;
    }

    public String verifyInput() {
        String errorString = "";
        if (textField_learningUnitId.getText().length() == 0) {
            errorString += "\n" + internationalization.getString("label.learningUnitId.title") + ": " +
                internationalization.getString("text.missingValue") + "\n";
        }
        if (textField_learningUnitTitle.getText().length() == 0) {
            errorString += "\n" + internationalization.getString("label.learningUnitTitle.title") + ": " +
                internationalization.getString("text.missingValue") + "\n";
        }
        if (textField_learningUnitVersion.getText().length() == 0) {
            errorString += "\n" + internationalization.getString("label.learningUnitVersion.title") + ": " +
                internationalization.getString("text.missingValue") + "\n";
        }
        if (textArea_learningUnitAuthors.getText().length() == 0) {
            errorString += "\n" + internationalization.getString("label.learningUnitAuthors.title") + ": " +
                internationalization.getString("text.missingValue") + "\n";
        }
        boolean anyViewSelected = false;
        for (int i = 0; i < checkBoxes_learningUnitViewManagersIds.length; i++) {
            if (checkBoxes_learningUnitViewManagersIds[i].isSelected()) {
                anyViewSelected = true;
            }
        }
        if (!anyViewSelected) {
           errorString += "\n" + internationalization.getString("label.learningUnitViewManagers.title") + ":\n" +
                internationalization.getString("text.selectView") + "\n";
         }
        if (errorString.length() > 0) {
            return errorString;
        }
        else {
            return null;
        }
    }

    public String getLearningUnitId() {
        return learningUnitId;
    }

    public String getLearningUnitTitle() {
        return learningUnitTitle;
    }

    public String getLearningUnitVersion() {
        return learningUnitVersion;
    }

    public String getLearningUnitAuthors() {
        return learningUnitAuthors;
    }

    public boolean isEnrollmentIdSelected() {
        return checkbox_enableEnrollmentId.isSelected();
    }

    public String getEnrollmentId() {
        if (textField_learningUnitEnrollmentId.getText() != null &&
            textField_learningUnitEnrollmentId.getText().length() > 0) {
                return textField_learningUnitEnrollmentId.getText();
        }
        else {
            return null;
        }
    }

    public String getOpenUssServerName() {
        if (textField_OpenUssServerName.getText() != null && textField_OpenUssServerName.getText().length() > 0) {
            return textField_OpenUssServerName.getText();
        }
        else {
            return null;
        }
    }

    public java.util.List getSelectedLearningUnitViewManagersIds() {
        return selectedLearningUnitViewManagersIds;
    }

    public void clearEntries() {
        buildDependentUI();
    }

    void buildDependentUI() {
        textField_learningUnitId.setText("");
        textField_learningUnitTitle.setText("");
        textField_learningUnitVersion.setText("");
        textArea_learningUnitAuthors.setText("");
        for (int i = 0; i < checkBoxes_learningUnitViewManagersIds.length; i++) {
            checkBoxes_learningUnitViewManagersIds[i].setSelected(false);
        }
        boolean isEnabled = checkbox_enableEnrollmentId.isSelected();
        textField_learningUnitEnrollmentId.setEnabled(isEnabled);
        textField_OpenUssServerName.setEnabled(isEnabled);
        if (isEnabled) {
            textField_learningUnitEnrollmentId.setText(enrollmentId);
            //textField_OpenUssServerName.setText(openUssServerName);
        }
        else {
            textField_learningUnitEnrollmentId.setText("");
            //textField_OpenUssServerName.setText(internationalization.getString("openUssServerName"));
        }
    }

    void buildIndependentUI() {
        // complete dialog panel
        dialogPanel = new JPanel(new BorderLayout());
        dialogPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        // learning Unit data panel
        learningUnitDataPanel = new JPanel(new BorderLayout());
        learningUnitDataPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        // learning unit specific data panel
        dialogContentComponent = new JPanel(new FLGColumnLayout());
        dialogContentComponent.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        // OpenUSS specific data panel
        openUssSpecificPanel = new JPanel(new FLGColumnLayout());
        openUssSpecificPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createTitledBorder(internationalization.getString("border.openUssConfig.title")),
            BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        textField_learningUnitId = new JTextField(20);
        textField_learningUnitId.setDocument(new FLGLetterDocument());
        textField_learningUnitTitle = new JTextField(20);
        textField_learningUnitVersion = new JTextField(20);
        textField_learningUnitVersion.setDocument(new FLGDigitDocument());
        textArea_learningUnitAuthors = new JTextArea(5, 20);
        textArea_learningUnitAuthors.setFont(textField_learningUnitId.getFont());
        textArea_learningUnitAuthors.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(112, 112, 112)), 
            BorderFactory.createEmptyBorder(5,5,5,5)));
        textArea_learningUnitAuthors.setPreferredSize(textArea_learningUnitAuthors.getPreferredSize());
        
        textField_learningUnitEnrollmentId = new JTextField(20);
        textField_OpenUssServerName = new JTextField(20);
        checkbox_enableEnrollmentId = new JCheckBox(internationalization.getString("label.learningUnitEnrollment.title"));
        checkbox_enableEnrollmentId.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    boolean isEnabled = checkbox_enableEnrollmentId.isSelected();
                    textField_learningUnitEnrollmentId.setEnabled(isEnabled);
                    textField_OpenUssServerName.setEnabled(isEnabled);
                    if (isEnabled) {
                        textField_learningUnitEnrollmentId.setText(enrollmentId);
                        //textField_OpenUssServerName.setText(openUssServerName);
                    }
                    else {
                        textField_learningUnitEnrollmentId.setText("");
                        //textField_OpenUssServerName.setText(internationalization.getString("openUssServerName"));
                    }
                }
            });
        checkBoxes_learningUnitViewManagersIds = new JCheckBox[installedLearningUnitViewManagersIdsAndTitles.length];
        JPanel checkBoxesPanel = new JPanel(new FLGColumnLayout());
        checkBoxesPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createTitledBorder(internationalization.getString("border.checkBoxPanel.title")), 
            BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        for (int i = 0; i < installedLearningUnitViewManagersIdsAndTitles.length; i++) {
            checkBoxes_learningUnitViewManagersIds[i] = new JCheckBox(installedLearningUnitViewManagersIdsAndTitles[i] [1]);
            checkBoxesPanel.add(checkBoxes_learningUnitViewManagersIds[i], FLGColumnLayout.LEFTEND);
        }

        dialogContentComponent.add(
            new JLabel(internationalization.getString("label.learningUnitId.title")), FLGColumnLayout.LEFT);
        dialogContentComponent.add(textField_learningUnitId, FLGColumnLayout.LEFTEND);
        dialogContentComponent.add(
            new JLabel(internationalization.getString("label.learningUnitTitle.title")), FLGColumnLayout.LEFT);
        dialogContentComponent.add(textField_learningUnitTitle, FLGColumnLayout.LEFTEND);
        dialogContentComponent.add(
            new JLabel(internationalization.getString("label.learningUnitVersion.title")), FLGColumnLayout.LEFT);
        dialogContentComponent.add(textField_learningUnitVersion, FLGColumnLayout.LEFTEND);
        dialogContentComponent.add(
            new JLabel(internationalization.getString("label.learningUnitAuthors.title")), FLGColumnLayout.LEFT);
        dialogContentComponent.add(textArea_learningUnitAuthors, FLGColumnLayout.LEFTEND);
        dialogContentComponent.add(
            new JLabel(internationalization.getString("label.learningUnitViewManagers.title")), FLGColumnLayout.LEFT);
        dialogContentComponent.add(checkBoxesPanel, FLGColumnLayout.LEFTEND);
        
        learningUnitDataPanel.add(dialogContentComponent, BorderLayout.NORTH);
        learningUnitDataPanel.add(checkBoxesPanel, BorderLayout.CENTER);
        
        openUssSpecificPanel.add(checkbox_enableEnrollmentId, FLGColumnLayout.LEFT);
        openUssSpecificPanel.add(textField_learningUnitEnrollmentId, FLGColumnLayout.LEFTEND);
        openUssSpecificPanel.add(
            new JLabel(internationalization.getString("label.openUssServerName.title")), FLGColumnLayout.LEFT);
        openUssSpecificPanel.add(textField_OpenUssServerName, FLGColumnLayout.LEFTEND);
        JTabbedPane dialogTabbedPane = new JTabbedPane();
        JScrollPane sp_contentComponents = new JScrollPane(learningUnitDataPanel);
        JScrollPane sp_viewManager = new JScrollPane(checkBoxesPanel);
        JScrollPane sp_openUssPanel = new JScrollPane(openUssSpecificPanel);
        sp_contentComponents.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
        sp_viewManager.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
        sp_viewManager.setPreferredSize(new Dimension(200,200));
        sp_openUssPanel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
        dialogTabbedPane.addTab(internationalization.getString("tab.learningUnit.title"), sp_contentComponents);
        dialogTabbedPane.addTab(internationalization.getString("tab.viewManager.title"), sp_viewManager);
        dialogTabbedPane.addTab(internationalization.getString("tab.openUssConfiguration.title"), sp_openUssPanel);
        dialogPanel.add(dialogTabbedPane, BorderLayout.CENTER);
    }
}
