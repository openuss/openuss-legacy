/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.elementsContentsPanel;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.data.xmlBindingSubclasses.*;

public class FLGMindmapsElementsContentsPanel extends FSLAbstractLearningUnitViewElementsContentsPanel {
    private FLGMindmapsMindmapElementContentPanel[] mindmapElementContentPanels;
    private FSLLearningUnitEventGenerator learningUnitEventGenerator;

    public void init(FSLLearningUnitViewManager learningUnitViewManager,
            FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
        super.init(learningUnitViewManager, learningUnitEventGenerator, editMode);
        this.learningUnitEventGenerator = learningUnitEventGenerator;
        mindmapElementContentPanels = new FLGMindmapsMindmapElementContentPanel[2];
        mindmapElementContentPanels[0] = new FLGMindmapsMindmapElementContentPanel();
        mindmapElementContentPanels[1] = new FLGMindmapsMindmapElementContentPanel();
        for (int i = 0; i < 2; i++) {
            mindmapElementContentPanels[i].init(learningUnitViewManager, learningUnitEventGenerator, editMode);
        }
    }

    public void setLearningUnitViewElementsManager(
        FSLLearningUnitViewElementsManager learningUnitViewElementsManager) {
        for (int i = 0; i < 2; i++) {
            mindmapElementContentPanels[i].setLearningUnitViewElementsManager(learningUnitViewElementsManager);
        }
        super.setLearningUnitViewElementsManager(learningUnitViewElementsManager);
    }

    public void updateUI() {
        for (int i = 0; i < 2; i++) {
            if (mindmapElementContentPanels != null)
                mindmapElementContentPanels[i].updateUI();
        }
        super.updateUI();
    }

    protected FSLAbstractLearningUnitViewElementContentPanel getElementContentPanel(
            int index, String learningUnitViewElementId) {
        FLGMindmapsElement learningUnitViewElement = (FLGMindmapsElement) learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
        if (learningUnitViewElement != null) {
            if (!learningUnitViewElement.getFolder()) {
                return mindmapElementContentPanels[index];
            }
        }
        return null;
    }

    public FLGMindmapsMindmapElementContentPanel getActiveMindmapElementContentPanel() {
        if (learningUnitViewElementsManager != null
                && learningUnitViewManager.getActiveLearningUnitViewElementId() != null)
            return (FLGMindmapsMindmapElementContentPanel) getElementContentPanel(
                    activeElementContentPanelIndex, learningUnitViewManager.getActiveLearningUnitViewElementId());
        return null;
    }

    // Workaround for the following bug: When switching from another View to the Mindmap View
    // or when switching from a folder to another Mindmap, the ContentPanel was gray and not
    // activated. 
    protected void buildDependentUI(boolean buildCenterPanel,
            boolean elementsSwitchedOnly) {
        super.buildDependentUI(buildCenterPanel, elementsSwitchedOnly);
        if (getActiveMindmapElementContentPanel() != null) {
            for (int i = 0; i < mindmapElementContentPanels.length; i++)
                mindmapElementContentPanels[i].updateUI();
        }
    }
    
}