/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.elementInteractionPanel;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.elementInteractionPanel.FSLAbstractLearningUnitViewElementInteractionPanel;
import freestyleLearning.learningUnitViewAPI.elementInteractionPanel.FSLLearningUnitViewElementInteractionButton;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewAdapter;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEvent;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.data.xmlBindingSubclasses.FLGMindmapsElement;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.elementsContentsPanel.FLGMindmapsElementsContentsPanel;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.elementsContentsPanel.FLGMindmapsMindmapElementContentPanel;
import freestyleLearningGroup.independent.gui.FLGImageUtility;
import freestyleLearningGroup.independent.util.FLGInternationalization;

public class FLGMindmapsElementInteractionPanel extends
        FSLAbstractLearningUnitViewElementInteractionPanel {
    private FLGInternationalization internationalization;

    private FSLLearningUnitViewElementInteractionButton fullScreenModeButton;

    private FSLLearningUnitViewElementInteractionButton zoomInButton;

    private FSLLearningUnitViewElementInteractionButton zoomOutButton;
    
    private FSLLearningUnitViewElementInteractionButton findButton;

    private static final float[] zooms = { 0.25f, 0.4f, 0.6f, 0.75f, 1.0f, 1.25f, 1.5f, 2.0f };
    
    private static final int INITIAL_ZOOM_LEVEL = 4; // equals 100% in zooms array

    private int currentZoomLevel = 4; // equals 100% in zooms array
    
    private boolean findUsedSoFar = false;

    private FSLLearningUnitViewElementInteractionButton findNextButton;

    public FLGMindmapsElementInteractionPanel() {
        setSplitModeAllowed(true);
        setFullScreenModeAllowed(true);
        internationalization = new FLGInternationalization(
                "freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.elementInteractionPanel.internationalization",
                getClass().getClassLoader());
        zoomInButton = new FSLLearningUnitViewElementInteractionButton(
                loadImage("buttonZoomIn.gif"));
        zoomInButton.setToolTipText(internationalization
                .getString("button.zoomIn.toolTipText"));
        zoomInButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                zoomIn();
            }
        });
        zoomInButton.setEnabled(false);
        zoomOutButton = new FSLLearningUnitViewElementInteractionButton(
                loadImage("buttonZoomOut.gif"));
        zoomOutButton.setToolTipText(internationalization
                .getString("button.zoomOut.toolTipText"));
        zoomOutButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                zoomOut();
            }
        });
        zoomOutButton.setEnabled(false);
        findButton = new FSLLearningUnitViewElementInteractionButton(
                loadImage("buttonFind.gif"));
        findButton.setToolTipText(internationalization
                .getString("button.find.toolTipText"));
        findButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                find();
            }
        });
        findButton.setEnabled(false);
        findNextButton = new FSLLearningUnitViewElementInteractionButton(
                loadImage("buttonFindNext.gif"));
        findNextButton.setToolTipText(internationalization
                .getString("button.findNext.toolTipText"));
        findNextButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                findNext();
            }
        });
        findNextButton.setEnabled(false);
    }

    public void init(FSLLearningUnitViewManager learningUnitViewManager,
            FSLLearningUnitEventGenerator learningUnitEventGenerator,
            boolean editMode) {
        super.init(learningUnitViewManager, learningUnitEventGenerator,
                editMode);
        learningUnitViewManager
                .addLearningUnitViewListener(new FLGMindmapsElementInteractionPanel_LearningUnitViewAdapter());
    }

    protected void buildIndependentUI() {
        super.buildIndependentUI();
        super.buildDefaultNavigationButtons(internationalization
                .getString("button.previousPage.toolTipText"),
                internationalization.getString("button.nextPage.toolTipText"));
        if (learningUnitViewElementsManager != null) {
            FLGMindmapsElement mindmapsElement = (FLGMindmapsElement) learningUnitViewElementsManager
                    .getLearningUnitViewElement(
                            activeLearningUnitViewElementId, false);
            resetButtonStatus(mindmapsElement);
        } else {
            zoomInButton.setEnabled(false);
            zoomOutButton.setEnabled(false);
            findButton.setEnabled(false);
            findNextButton.setEnabled(false);
        }
    }

    protected void insertViewSpecificInteractionComponents() {
        add(zoomInButton);
        add(zoomOutButton);
        add(findButton);
        add(findNextButton);
    }

    private void resetButtonStatus(FLGMindmapsElement mindmapsElement) {
        boolean enableButtons = false;
        if (mindmapsElement != null && !mindmapsElement.getFolder())
            enableButtons = true;
        currentZoomLevel = INITIAL_ZOOM_LEVEL;
        findUsedSoFar = false;
        zoomInButton.setEnabled(enableButtons);
        zoomOutButton.setEnabled(enableButtons);
        findButton.setEnabled(enableButtons);
        findNextButton.setEnabled(enableButtons && findUsedSoFar);
    }

    private void zoomIn() {
        if (currentZoomLevel < zooms.length - 1) {
            currentZoomLevel++;
            getActiveMindmapElementContentPanel().freemindZoom(zooms[currentZoomLevel]);
            if (currentZoomLevel == zooms.length - 1)
                zoomInButton.setEnabled(false);
            zoomOutButton.setEnabled(true);
        }
    }

    private void zoomOut() {
        if (currentZoomLevel > 0) {
            currentZoomLevel--;
            getActiveMindmapElementContentPanel().freemindZoom(zooms[currentZoomLevel]);
            if (currentZoomLevel == 0)
                zoomOutButton.setEnabled(false);
            zoomInButton.setEnabled(true);
        }
    }
    
    private void find() {
        findUsedSoFar = getActiveMindmapElementContentPanel().freemindFind();
        findNextButton.setEnabled(findUsedSoFar);
    }
    
    private void findNext() {
        if (getActiveMindmapElementContentPanel().freemindFindNext() == false)
            findUsedSoFar = false;
        findNextButton.setEnabled(findUsedSoFar);
    }

    private FLGMindmapsMindmapElementContentPanel getActiveMindmapElementContentPanel() {
        return ((FLGMindmapsElementsContentsPanel) learningUnitViewManager
                .getElementsContentsPanel())
                .getActiveMindmapElementContentPanel();
    }

    private Image loadImage(String imageFileName) {
        return FLGImageUtility.loadImageAndWait(getClass().getResource(
                "images/" + imageFileName));
    }

    class FLGMindmapsElementInteractionPanel_LearningUnitViewAdapter extends
            FSLLearningUnitViewAdapter {
        public void learningUnitViewElementActivated(
                FSLLearningUnitViewEvent event) {
            resetButtonStatus((FLGMindmapsElement) learningUnitViewElementsManager
                    .getLearningUnitViewElement(event
                            .getActiveLearningUnitViewElementId(), false));
        }
    }

}