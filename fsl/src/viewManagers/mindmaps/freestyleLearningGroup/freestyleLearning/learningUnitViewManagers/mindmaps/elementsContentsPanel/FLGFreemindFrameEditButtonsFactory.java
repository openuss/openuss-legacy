/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.elementsContentsPanel;

import java.awt.Image;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;

import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.freemind.main.FreeMindAdapter;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

public class FLGFreemindFrameEditButtonsFactory {
    // with this buffer the images of a toolbar Button must only be created once
    private static Hashtable buttonsBuffer = new Hashtable();

    public static interface FLGFileCreator {
        public File createFile(String fileExtension);
    }

    public static JComponent[] createDefaultFreemindFrameEditComponents(FreeMindAdapter freemindInternalFrame, FLGFileCreator fileCreator) {
        FLGInternationalization internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.internationalization", 
            FLGFreemindFrameEditButtonsFactory.class.getClassLoader());
        JComponent[] components = new JComponent[21];
        int componentsIndex = 0;
        components[componentsIndex++] = createButton(
                "editToolBarButtonNodeEdit.gif", new NodeEditAction(
                        freemindInternalFrame), internationalization
                        .getString("button.nodeEdit.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonNodeNewChild.gif", new NodeNewChildAction(
                        freemindInternalFrame), internationalization
                        .getString("button.nodeNewChild.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonNodeNewSibling.gif",
                new NodeNewSiblingAction(freemindInternalFrame),
                internationalization
                        .getString("button.nodeNewSibling.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonNodeNewPreviousSibling.gif",
                new NodeNewPreviousSiblingAction(freemindInternalFrame),
                internationalization
                        .getString("button.nodeNewPreviousSibling.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonNodeUp.gif", new NodeUpAction(
                        freemindInternalFrame), internationalization
                        .getString("button.nodeUp.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonNodeDown.gif", new NodeDownAction(
                        freemindInternalFrame), internationalization
                        .getString("button.nodeDown.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonCut.gif",
                new CutAction(freemindInternalFrame), internationalization
                        .getString("button.nodeCut.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonCopy.gif", new CopyAction(
                        freemindInternalFrame), internationalization
                        .getString("button.nodeCopy.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonPaste.gif", new PasteAction(
                        freemindInternalFrame), internationalization
                        .getString("button.nodePaste.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonTextBold.gif", new BoldAction(
                        freemindInternalFrame), internationalization
                        .getString("button.nodeBold.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonTextItalic.gif", new ItalicAction(
                        freemindInternalFrame), internationalization
                        .getString("button.nodeItalic.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonIncreaseFontSize.gif",
                new IncreaseFontSizeAction(freemindInternalFrame),
                internationalization
                        .getString("button.nodeIncreaseFontSize.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonDecreaseFontSize.gif",
                new DecreaseFontSizeAction(freemindInternalFrame),
                internationalization
                        .getString("button.nodeDecreaseFontSize.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonNodeColor.gif", new NodeColorAction(
                        freemindInternalFrame), internationalization
                        .getString("button.nodeColor.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonNodeCloud.gif", new CloudAction(
                        freemindInternalFrame), internationalization
                        .getString("button.nodeCloud.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonNodeCloudColor.gif", new CloudColorAction(
                        freemindInternalFrame), internationalization
                        .getString("button.nodeCloudColor.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonEdgeColor.gif", new EdgeColorAction(
                        freemindInternalFrame), internationalization
                        .getString("button.edgeColor.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonIncreaseEdgeWidth.gif",
                new IncreaseEdgeWidthAction(freemindInternalFrame),
                internationalization
                        .getString("button.increaseEdgeWidth.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonDecreaseEdgeWidth.gif",
                new DecreaseEdgeWidthAction(freemindInternalFrame),
                internationalization
                        .getString("button.decreaseEdgeWidth.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonInsertImage.gif", new InsertImageAction(
                        freemindInternalFrame, fileCreator),
                internationalization.getString("button.nodeImage.toolTipText"));
        components[componentsIndex++] = createButton(
                "editToolBarButtonInsertLink.gif", new InsertLinkAction(
                        freemindInternalFrame), internationalization
                        .getString("button.link.toolTipText"));
        return components;
    }

    // the localFileNames must be unique for the buffer to work properly
    private static FLGEditToolBarButton createButton(String localFileName, ActionListener actionListener, String toolTipText) {
        FLGEditToolBarButton bufferedButton = (FLGEditToolBarButton) buttonsBuffer.get(localFileName);
        if (bufferedButton != null) {
            return bufferedButton.copy(toolTipText, actionListener);
        }
        FLGEditToolBarButton button = new FLGEditToolBarButton(FLGImageUtility.loadImageAndWait(FLGFreemindFrameEditButtonsFactory.class.getClassLoader().getResource(
            "freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/mindmaps/elementsContentsPanel/images/" + localFileName)), toolTipText, actionListener);
        buttonsBuffer.put(localFileName, button);
        return button;
    }

    private static class NodeEditAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;
        private String learningUnitViewElementId;

        NodeEditAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.editNode();
        }
    }

    private static class NodeNewChildAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        NodeNewChildAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.newChild();
        }
    }

    private static class NodeNewSiblingAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        NodeNewSiblingAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.newSibling();
        }
    }

    private static class NodeNewPreviousSiblingAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        NodeNewPreviousSiblingAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.newPreviousSibling();
        }
    }

    private static class NodeUpAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        NodeUpAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.nodeUp();
        }
    }

    private static class NodeDownAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        NodeDownAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.nodeDown();
        }
    }

    private static class CutAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        CutAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.cut();
        }
    }

    private static class CopyAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        CopyAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.copy();
        }
    }

    private static class PasteAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        PasteAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.paste();
        }
    }

    private static class BoldAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        BoldAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.bold();
        }
    }

    private static class ItalicAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        ItalicAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.italic();
        }
    }

    private static class IncreaseFontSizeAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        IncreaseFontSizeAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.increaseFontSize();
        }
    }

    private static class DecreaseFontSizeAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        DecreaseFontSizeAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.decreaseFontSize();
        }
    }

    private static class NodeColorAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        NodeColorAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.nodeColor();
        }
    }

    private static class CloudAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        CloudAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.cloud();
        }
    }

    private static class CloudColorAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        CloudColorAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.cloudColor();
        }
    }

    private static class EdgeColorAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        EdgeColorAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.edgeColor();
        }
    }

    private static class IncreaseEdgeWidthAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        IncreaseEdgeWidthAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.increaseEdgeWidth();
        }
    }

    private static class DecreaseEdgeWidthAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        DecreaseEdgeWidthAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.decreaseEdgeWidth();
        }
    }

    private static class InsertImageAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private FLGFreemindFrameEditButtonsFactory.FLGFileCreator imageFileCreator;

        public InsertImageAction(
                FreeMindAdapter freemindInternalFrame,
                FLGFreemindFrameEditButtonsFactory.FLGFileCreator imageFileCreator) {
            super("img");
            this.imageFileCreator = imageFileCreator;
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            FLGMediaFileChooser mediaFileChooser = new FLGMediaFileChooser(
                    FLGMediaFileChooser.PICTURE);
            if (mediaFileChooser.showDialog()) {
                File selectedFile = mediaFileChooser.getSelectedFile();
                if (selectedFile.exists()) {
                    try {
                        Image theImage = FLGImageUtility.loadImageAndWait(selectedFile.toURL());
                        if (theImage != null) {
                            File destinationFile = imageFileCreator.createFile(mediaFileChooser.getFileExtension());
                            FLGFileUtility.copyFile(selectedFile, destinationFile);
                            freemindInternalFrame.insertImage(destinationFile);
                        }
                    } 
                    catch (Exception ex) {
                        System.out.println(ex);
                    }
                }
            }

        }
    }

    private static class InsertLinkAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;
        private String learningUnitViewElementId;

        InsertLinkAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.insertLink();
        }
    }

    public static JComponent[] createDefaultFreemindFrameLeftEditComponents(FreeMindAdapter freemindInternalFrame) {
        FLGInternationalization internationalization = new FLGInternationalization(
            "freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.internationalization",
            FLGFreemindFrameEditButtonsFactory.class.getClassLoader());
        JComponent[] iconComponents = getIconButtons(freemindInternalFrame);
        JComponent[] components = new JComponent[iconComponents.length + 1];
        int componentIndex = 0;
        // Add the icon removal button
        components[componentIndex++] = createButton(
                "editToolBarButtonTrashNodeIcon.gif", new TrashNodeIconAction(
                        freemindInternalFrame), internationalization.getString("button.trashNodeIcon.toolTipText"));
        // Add the buttons for all icons in the directory "icons"
        for (int i = 0; i < iconComponents.length; i++) {
            components[componentIndex++] = iconComponents[i];
        }
        return components;
    }

    private static JComponent[] getIconButtons(FreeMindAdapter freemindInternalFrame) {
        /*
         * The icon names should not be changed, not even in both the array and
         * the icons directory; otherwise existing mindmaps might not be loaded
         * correctly anymore. Thus, the names from freemind were kept in order
         * to enable loading FSL mindmaps in the original freemind environment
         * without losing icons. New icons can be added, but this will cause the
         * compatibility to freemind to be broken. The icon order can be changed
         * without danger. All freemind icons have been included in the icons
         * folder, even though they are not listed here and are not accessible
         * by FSL icons for usability reasons (too many icons would not fit into
         * the left toolbar). This way, freemind mindmaps can be imported to FSL
         * without losing icons as well.
         */
        final String[] ICON_NAMES = { "button_ok.png", "button_cancel.png",
                "idea.png", "help.png", "messagebox_warning.png",
                "forward.png", "bell.png", "pencil.png", "bookmark.png",
                "Mail.png", "kaddressbook.png", "ksmiletris.png" };
        // Create icon file objects
        String iconFileURLString = null;
        File[] iconFiles = new File[ICON_NAMES.length];
        for (int i = 0; i < ICON_NAMES.length; i++) {
            iconFileURLString = FLGFreemindFrameEditButtonsFactory.class.getClassLoader().getResource(
                "freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/mindmaps/elementsContentsPanel/images/icons/" + ICON_NAMES[i]).toString();
            iconFiles[i] = new File(iconFileURLString);
        }
        // Create components
        int componentsIndex = 0;
        FLGInternationalization internationalization = new FLGInternationalization(
                "freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.internationalization",
                FLGFreemindFrameEditButtonsFactory.class.getClassLoader());
        JComponent[] components = new JComponent[iconFiles.length];
        for (int i = 0; i < iconFiles.length; i++) {
            components[componentsIndex++] = createButton("icons/"
                    + iconFiles[i].getName(), new SetNodeIconAction(
                    freemindInternalFrame, iconFiles[i].getName()),
                    internationalization
                            .getString("button.insertNodeIcon.toolTipText"));
        }
        return components;
    }

    private static class SetNodeIconAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        private String iconName;

        SetNodeIconAction(FreeMindAdapter freemindInternalFrame, String iconName) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
            this.iconName = iconName;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.insertIcon(iconName);
        }
    }

    private static class TrashNodeIconAction extends AbstractAction {
        private FreeMindAdapter freemindInternalFrame;

        private String learningUnitViewElementId;

        TrashNodeIconAction(FreeMindAdapter freemindInternalFrame) {
            super();
            this.freemindInternalFrame = freemindInternalFrame;
        }

        public void actionPerformed(ActionEvent e) {
            freemindInternalFrame.removeNodeIcon();
        }
    }

}