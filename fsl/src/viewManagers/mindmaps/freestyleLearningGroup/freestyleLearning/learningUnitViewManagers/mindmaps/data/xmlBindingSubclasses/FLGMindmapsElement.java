/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.data.xmlBindingSubclasses;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Date;
import java.util.Vector;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElement;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElementLink;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElementsManager;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.data.xmlBinding.ViewElement;

public class FLGMindmapsElement extends ViewElement implements FSLLearningUnitViewElement {
    public static String ELEMENT_TYPE_FOLDER = "folder";
    public static String ELEMENT_TYPE_TEXT = "text";
    private boolean modified;
    private String lastModificationDate;

    public String getLastModificationDate() {
    	return lastModificationDate;
    }
    
    public void setLastModificationDate(String lastModificationDate) {
    	this.lastModificationDate = lastModificationDate;
    }

    public boolean isModified() {
        return modified;
    }

    public void setModified(boolean modified) {
        this.modified = modified;
    }

    public FSLLearningUnitViewElement deepCopy() {
        FLGMindmapsElement copy = new FLGMindmapsElement();
        FSLLearningUnitViewElementsManager.copyLearningUnitViewElement(this, copy);
        copy.setMindmapFileName(getMindmapFileName());
        return copy;
    }

    public String[] getLearningUnitViewElementExternalFilesRelativePaths(FSLLearningUnitViewElementsManager
        learningUnitViewElementsManager) {
            if (!getFolder() && getMindmapFileName() != null) {
                return getAllRelativeFileNamesToMindmapFile(getMindmapFileName(),
                    learningUnitViewElementsManager.resolveRelativeFileName(getMindmapFileName(), this));
            }
            else
                return null;
    }

    public FSLLearningUnitViewElementLink getLearningUnitViewElementLink(String learningUnitViewElementLinkId) {
        for (int i = 0; i < getLearningUnitViewElementLinks().size(); i++) {
            FSLLearningUnitViewElementLink learningUnitViewElementLink =
                (FSLLearningUnitViewElementLink)getLearningUnitViewElementLinks().get(i);
            if (learningUnitViewElementLink.getId().equals(learningUnitViewElementLinkId))
                return learningUnitViewElementLink;
        }
        return null;
    }

    public FSLLearningUnitViewElementLink addNewLearningUnitViewElementLink() {
        FLGMindmapsElementLink learningUnitViewElementLink = new FLGMindmapsElementLink();
        learningUnitViewElementLink.emptyLearningUnitViewElementLinkTargets();
        return FSLLearningUnitViewElementsManager.addLearningUnitViewElementLink(learningUnitViewElementLink, this);
    }

    public void setType(String type) {
        if (!type.equals(getType())) {
            this.emptyLearningUnitViewElementLinks();
            if (type.equals(ELEMENT_TYPE_FOLDER)) {
                this.setMindmapFileName(null);
            }
            super.setType(type);
        }
    }
    
	public static String[] getAllRelativeFileNamesToMindmapFile(String relativeHtmlFileName, File htmlFile) {
        final String START_STRING = "img src=&quot;";
        final String END_STRING = "&quot;";
        Vector paths = new Vector();
        paths.add(relativeHtmlFileName);
        try {
            BufferedReader in = new BufferedReader(new FileReader(htmlFile));
            String str = "";
            while ((str = in.readLine()) != null) {
                int imgTagStartPos = str.toLowerCase().indexOf(START_STRING);
                if (imgTagStartPos != -1) {
                    // image tag found
                    int fileNameStartPos =  imgTagStartPos + START_STRING.length();
                    int fileNameEndPos = str.indexOf(END_STRING, fileNameStartPos + 1);
                    String imageFileName = str.substring(fileNameStartPos, fileNameEndPos);
                    paths.add(imageFileName);
                }
            }
            in.close();
        }
        catch (Exception e) { System.out.println(e); }
        return (String[]) paths.toArray(
            new String[] { });
    }
    
}
