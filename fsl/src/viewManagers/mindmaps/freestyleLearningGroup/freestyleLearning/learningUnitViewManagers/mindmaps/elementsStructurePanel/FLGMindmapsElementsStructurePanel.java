/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.elementsStructurePanel;

import java.awt.Image;
import java.util.Date;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.elementsStructurePanel.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.data.xmlBindingSubclasses.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

public class FLGMindmapsElementsStructurePanel extends FSLAbstractLearningUnitViewElementsStructurePanel {
    private FLGInternationalization internationalization;
    private FLGEditToolBarButton openOfficeImportButton;
    
    public void init(FSLLearningUnitViewManager learningUnitViewManager,
    FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
        super.init(learningUnitViewManager, learningUnitEventGenerator, editMode);
        internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mindmaps.elementsStructurePanel.internationalization", getClass().getClassLoader());
    }

    protected void createDefaultEditToolBar() {
        editToolBar = new FSLLearningUnitViewElementsStructureEditToolBar();
        editToolBar.init(learningUnitViewManager, learningUnitEventGenerator, this, editMode,
            FSLLearningUnitViewElementsStructureEditToolBar.DEFAULT_EDIT_TOOLBAR_SORTABLE);
        buildIndependentUI();
    }
    
    public void modifyLearningUnitViewElement(FSLLearningUnitViewElement element) {
        FLGMindmapsElement mindmapsElement = (FLGMindmapsElement)element;
        mindmapsElement.setLastModificationDate(String.valueOf(new Date().getTime()));
        if (!mindmapsElement.getFolder()) {
            mindmapsElement.setType(mindmapsElement.ELEMENT_TYPE_TEXT);
        }
        else {
            mindmapsElement.setType(mindmapsElement.ELEMENT_TYPE_FOLDER);
        }
    }
    
    public FSLLearningUnitViewElement createLearningUnitViewElement(String id, String parentId, String title, boolean folder) {
        FLGMindmapsElement newElement = new FLGMindmapsElement();
        newElement.setId(id);
        newElement.setParentId(parentId);
        newElement.setTitle(title);
        newElement.setFolder(folder);
        newElement.setLastModificationDate(String.valueOf(new Date().getTime()));
        if (!folder) newElement.setType(newElement.ELEMENT_TYPE_TEXT);
        else {
            newElement.setType(newElement.ELEMENT_TYPE_FOLDER);
        }
        return newElement;
    }
    
    private void reloadData() {
        ((FLGMindmapsManager)learningUnitViewManager).reloadData();
    }
    
    private Image loadImage(String imageFileName) {
        return FLGImageUtility.loadImageAndWait(getClass().getClassLoader().getResource(
            "freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/mindmaps/images/" + imageFileName));
    }
    
}
