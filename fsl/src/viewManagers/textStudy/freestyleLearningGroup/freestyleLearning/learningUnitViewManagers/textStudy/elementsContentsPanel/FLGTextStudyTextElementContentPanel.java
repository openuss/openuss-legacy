/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.textStudy.elementsContentsPanel;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.net.URL;
import java.util.*;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import javax.swing.text.html.HTMLDocument;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElement;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.FSLAbstractLearningUnitViewElementContentPanel;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitVetoableAdapter;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewVetoableAdapter;
import freestyleLearning.learningUnitViewAPI.util.FSLLearningUnitViewUtilities;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.textStudy.data.xmlBindingSubclasses.FLGTextStudyElement;
import freestyleLearningGroup.independent.gui.FLGColumnLayout;
import freestyleLearningGroup.independent.gui.FLGEditToolBarButton;
import freestyleLearningGroup.independent.gui.FLGHtmlPane;
import freestyleLearningGroup.independent.gui.FLGHtmlPaneEditButtonsFactory;
import freestyleLearningGroup.independent.gui.FLGHtmlUtilities;
import freestyleLearningGroup.independent.gui.FLGOptionPane;
import freestyleLearningGroup.independent.gui.FLGScrollPane;
import freestyleLearningGroup.independent.gui.FLGUIUtilities;
import freestyleLearningGroup.independent.util.FLGFileUtility;
import freestyleLearningGroup.independent.util.FLGInternationalization;

public class FLGTextStudyTextElementContentPanel extends FSLAbstractLearningUnitViewElementContentPanel {
    private FLGScrollPane scrollPane;
    private JPanel scrollPaneView;
    private FLGHtmlPane elementContentHtmlPane;
    private FLGHtmlPane elementTitleHtmlPane;
    private boolean active;
    private JComponent[] editToolBarComponents;
    private Graphics g;
    private FLGInternationalization internationalization;
    private File styleSheetFile = null;
    private JRadioButton individualStyleSheet_radioButton;
    private JButton importButton;
    private JTextField importstyleSheetPath;

    public void init(FSLLearningUnitViewManager learningUnitViewManager,
        FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
            super.init(learningUnitViewManager, learningUnitEventGenerator, editMode);
            learningUnitEventGenerator.addLearningUnitListener(new FLGTextStudyElementContentPanel_LearningUnitAdapter());
            learningUnitViewManager.addLearningUnitViewListener(new FLGTextStudyElementContentPanel_LearningUnitViewAdapter());
            internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.textStudy.elementsContentsPanel.internationalization",
					getClass().getClassLoader());
    }

    protected java.awt.Component getPrintableComponent() {
        JPanel scrollPaneView = new JPanel(new BorderLayout());
        FLGHtmlPane printableContentHtmlPane = new FLGHtmlPane();
        FLGHtmlPane printableTitleHtmlPane = new FLGHtmlPane();
        printableTitleHtmlPane.setEditable(false);
        printableTitleHtmlPane.setSize(elementTitleHtmlPane.getPreferredSize());
        printableContentHtmlPane.setBase(elementContentHtmlPane.getBase());
        printableContentHtmlPane.setEditable(false);
        printableContentHtmlPane.setSize(elementContentHtmlPane.getPreferredSize());
        FSLLearningUnitViewElement viewElement = learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
        printableTitleHtmlPane.setText("<html><body><h3>" + viewElement.getTitle() + "</h3></body></html>");
        printableContentHtmlPane.setText(FLGHtmlUtilities.createPrintableHtmlText(elementContentHtmlPane.getText()));
        scrollPaneView.add(printableTitleHtmlPane, BorderLayout.NORTH);
        scrollPaneView.add(printableContentHtmlPane, BorderLayout.CENTER);
        scrollPaneView.setSize(this.scrollPaneView.getPreferredSize());
        return scrollPaneView;
    }

    protected javax.swing.JEditorPane getPrintableEditorPane() {
    	FLGHtmlPane printablePane = new FLGHtmlPane();
        FSLLearningUnitViewElement viewElement = learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
        printablePane.setBase(elementContentHtmlPane.getBase());
        printablePane.setText("<html><body><h3>" + viewElement.getTitle() + "</h3>"
            + FLGHtmlUtilities.createPrintableHtmlText(elementContentHtmlPane.getText()));
        return printablePane;
    }

    public boolean isModifiedByUserInput() {
        return elementContentHtmlPane.isModifiedByUserInput();
    }

    public void saveUserChanges() {
        File htmlFile;
        FLGTextStudyElement learningUnitViewElement =
            (FLGTextStudyElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, true);
        learningUnitViewElement.setLastModificationDate(String.valueOf(new Date().getTime()));
        if (learningUnitViewElement.getHtmlFileName() == null) {
            htmlFile = learningUnitViewElementsManager.createNewFileForElementsExternalData(FLGTextStudyElement.ELEMENT_TYPE_TEXT,
                ".html", learningUnitViewElementId);
            learningUnitViewElement.setHtmlFileName(htmlFile.getName());
        }
        
        else {
            String relativeFileName = learningUnitViewElementsManager.getRelativeFileNameVersionForWriting(learningUnitViewElement.getHtmlFileName(),
                learningUnitViewElement, FLGTextStudyElement.ELEMENT_TYPE_TEXT, ".html");
            htmlFile = learningUnitViewElementsManager.resolveRelativeFileName(relativeFileName, learningUnitViewElement);
            learningUnitViewElement.setHtmlFileName(relativeFileName);
        }
        FLGFileUtility.writeStringIntoFile(elementContentHtmlPane.getText(), htmlFile);
    }

    public void updateUI() {
        super.updateUI();
        if (elementContentHtmlPane != null)
            FSLLearningUnitViewUtilities.updateHtmlPaneUI(elementContentHtmlPane);
        if (elementTitleHtmlPane != null)
            FSLLearningUnitViewUtilities.updateHtmlPaneUI(elementTitleHtmlPane);
    }

    protected void setActiveLearningUnitViewElementPanel(boolean active) {
        super.setActiveLearningUnitViewElementPanel(active);
        elementContentHtmlPane.setEditable(editMode && activeLearningUnitViewElementPanel);
//        elementContentHtmlPane.setEnabled(editMode && activeLearningUnitViewElementPanel);
    }

    protected JComponent[] getEditToolBarComponents() {
        return editToolBarComponents;
    }

    protected void buildIndependentUI(String learningUnitViewElementId) {
        this.learningUnitViewElementId = learningUnitViewElementId;
        buildIndependentUI();
    }

    protected void buildIndependentUI() {
        setLayout(new java.awt.BorderLayout());
        elementContentHtmlPane = new FLGHtmlPane();
        elementTitleHtmlPane = new FLGHtmlPane();
        elementContentHtmlPane.setSupportWebSearches(true);
        elementContentHtmlPane.setEditable(editMode);
//        elementTitleHtmlPane.setEnabled(false);
        elementTitleHtmlPane.setEditable(false);
        elementContentHtmlPane.addHyperlinkListener(new FSLLearningUnitViewElementContentPanel_HyperlinkAdapter());
        scrollPaneView = new JPanel(new BorderLayout());
        scrollPaneView.add(elementTitleHtmlPane, BorderLayout.NORTH);
        scrollPaneView.add(elementContentHtmlPane, BorderLayout.CENTER);
        scrollPane = new FLGScrollPane(scrollPaneView);
        scrollPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        add(scrollPane);
        // toolbar
        FLGHtmlPaneEditButtonsFactory.FLGFileCreator fileCreator = new FLGHtmlPaneEditButtonsFactory.FLGFileCreator() {
            public File createFile(String fileExtension) {
                return learningUnitViewElementsManager.createNewFileForElementsExternalData("image", fileExtension,
                    learningUnitViewElementId);
            }
        };
        FLGHtmlPaneEditButtonsFactory.FLGLinkEditor linkEditor = new FLGHtmlPaneEditButtonsFactory.FLGLinkEditor() {
            public String linkSelectedToEdit(String htmlAttributeValue) {
                return learningUnitViewManager.editLearningUnitViewElementLink(htmlAttributeValue, learningUnitViewElementId);
            }
        };
        
        // create the edit components with stylesheet import button
        // editToolBarComponents = FLGHtmlPaneEditButtonsFactory.createDefaultHtmlPaneEditComponents(fileCreator, linkEditor);
        
        
        JComponent htmlPaneEditComps[] = FLGHtmlPaneEditButtonsFactory.createDefaultHtmlPaneEditComponents(fileCreator, linkEditor);
        editToolBarComponents = new JComponent[htmlPaneEditComps.length + 1];
       
        FLGEditToolBarButton styleSheetButton;
        Image buttonImage = new ImageIcon(
        		getClass().getClassLoader().getResource(
        				"freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/textStudy/images/styleSheetImportButton.gif")).getImage();
        //String tooltiptext = internationalization.getString("styleSheetImportButton.tooltip");
        String tooltiptext = "Stylesheet-Import";
        ActionListener buttonListener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            	importStyleSheet();
            }
        };
        styleSheetButton = new FLGEditToolBarButton(buttonImage,tooltiptext,buttonListener);
        
       // copy the html edit comps
        for (int i = 0; i < editToolBarComponents.length - 1; i++) {
            editToolBarComponents[i] = htmlPaneEditComps[i];
        }
        editToolBarComponents[editToolBarComponents.length - 1] = styleSheetButton;
    
        updateUI();
    }
    
    private void importStyleSheet() {
    	JPanel stylePanel = new JPanel();
    	stylePanel.setLayout(new FLGColumnLayout());
    	
    	// radio buttons
    	JRadioButton defaultStyleSheet_radioButton = new JRadioButton(
    			internationalization.getString("dialog.styleSheet.default.text"));
    	defaultStyleSheet_radioButton.setSelected(true);
    	defaultStyleSheet_radioButton.addActionListener(new ActionListener() {
    		public void actionPerformed(ActionEvent e) {
    				importButton.setEnabled(false);
    		    	importstyleSheetPath.setText("");
    		    	importstyleSheetPath.setEnabled(false);
    		}
    	});
    	stylePanel.add(defaultStyleSheet_radioButton,FLGColumnLayout.LEFTEND);
    	individualStyleSheet_radioButton = new JRadioButton(
    			internationalization.getString("dialog.styleSheet.individual.text"));
    	individualStyleSheet_radioButton.addActionListener(new ActionListener() {
    		public void actionPerformed(ActionEvent e) {
    				importButton.setEnabled(true);
    		    	importstyleSheetPath.setEnabled(true);
    		}
    	});
    	stylePanel.add(individualStyleSheet_radioButton,FLGColumnLayout.LEFTEND);
    	ButtonGroup buttonGroup = new ButtonGroup();
    	buttonGroup.add(defaultStyleSheet_radioButton);
    	buttonGroup.add(individualStyleSheet_radioButton);
    	
    	// import style sheet path
    	importstyleSheetPath = new JTextField(20);
    	importstyleSheetPath.setBorder(new EmptyBorder(5,5,5,5));
    	importstyleSheetPath.setEnabled(false);
    	stylePanel.add(importstyleSheetPath,FLGColumnLayout.CENTER);
    	
    	// import button
    	importButton = new JButton(internationalization.getString("dialog.styleSheet.importButton.text"));
    	importButton.setEnabled(false);
    	importButton.addActionListener(new ActionListener() {
    		public void actionPerformed(ActionEvent e) {
    			JFileChooser fileDialog = new JFileChooser();
		    	fileDialog.setDialogTitle("Stylesheet-Import");
		    	java.awt.Dimension screenDim = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
		        fileDialog.setLocation((int)(screenDim.getWidth() - fileDialog.getWidth()) / 2,
		        (int)(screenDim.getHeight() - fileDialog.getHeight()) / 2);
		        String[] fileExtensions = { ".css" };
		        fileDialog.setFileFilter(new FLGUIUtilities.FLGFileFilter(fileExtensions,".css"));
		        // open dialog
		        if (fileDialog.showOpenDialog(new JPanel()) == JFileChooser.APPROVE_OPTION) {
		        	styleSheetFile = fileDialog.getSelectedFile();
		        	importstyleSheetPath.setText(styleSheetFile.getAbsolutePath());
		        }		
    		}
    	});
    	stylePanel.add(importButton, FLGColumnLayout.CENTEREND);

    	// option pane
    	int returnValue = FLGOptionPane.showConfirmDialog(stylePanel, 
    			internationalization.getString("dialog.styleSheet.title"),
                FLGOptionPane.OK_CANCEL_OPTION, FLGOptionPane.PLAIN_MESSAGE);
    	if (returnValue==FLGOptionPane.OK_OPTION) { 
       		if(!defaultStyleSheet_radioButton.isSelected()) {
    	        		// copy stylesheet file into text study folder
		        		File sourceFile = styleSheetFile;
		        		String activeLearningUnitViewElementId = learningUnitViewManager.getActiveLearningUnitViewElementId();
		        		File destinationFile = learningUnitViewElementsManager.createNewFileForElementsExternalData("styleSheet", ".css", activeLearningUnitViewElementId);
		        		FLGFileUtility.copyFile(sourceFile, destinationFile);
		        		
		        		// update element descriptor
		        		FLGTextStudyElement element = (FLGTextStudyElement) learningUnitViewElementsManager.getLearningUnitViewElement(activeLearningUnitViewElementId,false);
		        		if (!element.getFolder()) {
		           			element.setStyleSheetFileName(destinationFile.getName());
		        			element.setModified(true);
		        		}
		        		learningUnitViewElementsManager.setModified(true);
		        		// update descriptors and refresh current presentation
					    FSLLearningUnitViewEvent event = FSLLearningUnitViewEvent.createElementsModifiedEvent(learningUnitViewManager.getLearningUnitViewManagerId(),
					    		new String[] { activeLearningUnitViewElementId });
				        learningUnitViewManager.fireLearningUnitViewEvent(event);
	   		} else {
       			// update element descriptor
       			String activeLearningUnitViewElementId = learningUnitViewManager.getActiveLearningUnitViewElementId();
       			FLGTextStudyElement element = (FLGTextStudyElement) learningUnitViewElementsManager.getLearningUnitViewElement(activeLearningUnitViewElementId,false);
       			if (!element.getFolder()) {
       				element.setStyleSheetFileName(null);
       				element.setModified(true);
       			}
       			learningUnitViewElementsManager.setModified(true);
       			// update descriptors and refresh current presentation
       			FSLLearningUnitViewEvent event = FSLLearningUnitViewEvent.createElementsModifiedEvent(learningUnitViewManager.getLearningUnitViewManagerId(),
       					new String[] { activeLearningUnitViewElementId });
       			learningUnitViewManager.fireLearningUnitViewEvent(event);
       		}
       	} 
    }
    
    protected void buildDependentUI(boolean reloadIfAlreadyLoaded) {
        boolean contentAvailable = false;
        if (learningUnitViewElementsManager != null && learningUnitViewElementId != null) {
            FLGTextStudyElement learningUnitViewElement =
                (FLGTextStudyElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
            if (learningUnitViewElement != null) {
                elementTitleHtmlPane.setText("<html><body><h1>" + learningUnitViewElement.getTitle() + "</body></html>");
                if (learningUnitViewElement.getHtmlFileName() != null) {
                    File htmlFile = learningUnitViewElementsManager.resolveRelativeFileName(
                        learningUnitViewElement.getHtmlFileName(), learningUnitViewElement);
                    if (htmlFile.exists()) {
                       if(learningUnitViewElement.getStyleSheetFileName()!=null) {
                    	   // set individual stylesheet
                    	   try {
	       	        		   String relativeFileName = learningUnitViewElement.getStyleSheetFileName();
	       	        		   File file = learningUnitViewElementsManager.resolveRelativeFileName(relativeFileName, learningUnitViewElement);
	       	           		   elementContentHtmlPane.setStyleSheet(file.toURL());
	       	        	   } catch (Exception exp) {
	       	        	    	exp.printStackTrace();
	       	        	   }
	                   	} else {
	                       	// set default stylesheet
	       	        	    try {
	       	        	    	//elementContentHtmlPane.setDefaultStyleSheet();
	       	        	    	java.net.URL styleSheetURL = getClass().getClassLoader().getResource("" +
	       	        	    			"freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/textStudy/elementsContentsPanel/defaultStyleSheet.css");
	       	        	    	elementContentHtmlPane.setStyleSheet(styleSheetURL);
	       	        	    	
	       	        	    	
	       	        	    	FSLLearningUnitViewUtilities.updateHtmlPaneUI(elementContentHtmlPane);
	       	        	    	
	       	        	    	
	       	        	    	elementContentHtmlPane.repaint();
	       	        	    } catch (Exception exp) {
	       	        	    	exp.printStackTrace();
	       	        	    }
	       	          }
                      elementContentHtmlPane.loadFile(htmlFile, reloadIfAlreadyLoaded);
                    } else {
                        elementContentHtmlPane.setBase(learningUnitViewElementsManager.resolveRelativeFileName(
                            "dummyFileName", learningUnitViewElement));
                        elementContentHtmlPane.setText("<html><body><p></p></body></html>");
                    }
                } else {
                    elementContentHtmlPane.setBase(learningUnitViewElementsManager.resolveRelativeFileName("dummyFileName",
                        learningUnitViewElement));
                    elementContentHtmlPane.setText("<html><body><p></p></body></html>");
                }
                contentAvailable = true;
            }
        }
        if (!contentAvailable) {
            elementTitleHtmlPane.setText("<html><body><p></p></body></html>");
            elementContentHtmlPane.setText("<html><body><p></p></body></html>");
        }
//        elementContentHtmlPane.setEnabled(editMode && activeLearningUnitViewElementPanel && contentAvailable);
        elementContentHtmlPane.setEditable(editMode && activeLearningUnitViewElementPanel && contentAvailable);
    }

    class FLGTextStudyElementContentPanel_LearningUnitAdapter extends FSLLearningUnitVetoableAdapter {
        public void learningUnitEditModeChanged(FSLLearningUnitEvent event) {
            if (!event.isEditMode()) {
                elementContentHtmlPane.select(0, 0);
            }
        }
    }


    class FLGTextStudyElementContentPanel_LearningUnitViewAdapter extends FSLLearningUnitViewVetoableAdapter {
        public void learningUnitViewElementsUserVersionCreated(FSLLearningUnitViewEvent event) {
            if (event.getLearningUnitViewManagerId().equals(learningUnitViewManager.getLearningUnitViewManagerId())) {
                for (int i = 0; i < event.getLearningUnitViewElementIds().length; i++) {
                    if (event.getLearningUnitViewElementIds() [i].equals(learningUnitViewElementId)) {
                        String htmlFileName = ((FLGTextStudyElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId,false)).getHtmlFileName();
                        if (htmlFileName != null) {
                            File file = learningUnitViewElementsManager.resolveRelativeFileName(htmlFileName, learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false));
                            try {
                                ((HTMLDocument)elementContentHtmlPane.getDocument()).setBase(file.getParentFile().toURL());
                            }
                            catch (Exception e) { 
                                System.out.println(e); 
                            }
                        }
                    }
                }
            }
        }
    }
}
