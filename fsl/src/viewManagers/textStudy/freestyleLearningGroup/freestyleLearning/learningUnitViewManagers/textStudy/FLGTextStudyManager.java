/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.textStudy;

import java.awt.Image;
import java.awt.print.*;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.Dispatcher;
import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.textStudy.data.xmlBinding.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.textStudy.data.xmlBindingSubclasses.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.textStudy.elementInteractionPanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.textStudy.elementsContentsPanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.textStudy.elementsStructurePanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.textStudy.statusPanel.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;
import freestyleLearningGroup.independent.printing.*;

public class FLGTextStudyManager extends FSLAbstractLearningUnitViewManager {
    private FSLLearningUnitViewPrimaryActivationButton primaryActivationButton;
    private FLGInternationalization internationalization;

    /**
     * Inits FLGTextStudyManager.
     * @param <code>FSLLearningUnitsActivator</code> learningUnitsActivator
     * @param <code>FSLLearningUnitViewsActivator</code> learningUnitViewsActivator
     * @param <code>FSLLearningUnitEventGenerator</code> learningUnitEventGenerator
     * @param <code>String</code> learningUnitViewManagerId
     * @param <code>String</code> learningUnitViewManagerTitle
     * @param <code>File</code> learningUnitViewManagerCodeDirectory
     * @param <code>boolean</code> editMode
     * @param <code>boolean</code> originalElementsOnly
     * @param <code>FLGLongLastingOperationStatus</code> progressStatus
     */
    public void init(FSLLearningUnitsActivator learningUnitsActivator,
        FSLLearningUnitViewsActivator learningUnitViewsActivator, FSLLearningUnitEventGenerator learningUnitEventGenerator,
        String learningUnitViewManagerId, String learningUnitViewManagerTitle, File learningUnitViewManagerCodeDirectory,
        boolean editMode, boolean originalElementsOnly, FLGLongLastingOperationStatus progressStatus) {
            super.init(learningUnitsActivator, learningUnitViewsActivator, learningUnitEventGenerator,
                learningUnitViewManagerId, learningUnitViewManagerTitle, learningUnitViewManagerCodeDirectory, editMode,
                originalElementsOnly, progressStatus);
            int stepSize = progressStatus.getStepSize();
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
            internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.textStudy.internationalization",
                getClass().getClassLoader());
            primaryActivationButton = new FSLLearningUnitViewPrimaryActivationButton(loadImage("primaryActivationButton.gif"));
            primaryActivationButton.setToolTipText(internationalization.getString("button.primaryActivation.toolTipText"));
            elementsStructurePanel = new FLGTextStudyElementsStructurePanel();
            elementsStructurePanel.init(this, learningUnitEventGenerator, editMode);
            elementsStructurePanel.setAutomaticActivation(true);
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
            elementInteractionPanel = new FLGTextStudyElementInteractionPanel();
            elementInteractionPanel.init(this, learningUnitEventGenerator, editMode);
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
            elementsContentsPanel = new FLGTextStudyElementsContentsPanel();
            elementsContentsPanel.init(this, learningUnitEventGenerator, editMode);
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
            statusPanel = new FLGTextStudyStatusPanel();
            statusPanel.init(this, learningUnitEventGenerator, editMode);
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
    }

    /**
     * Returns main help page <code>java.net.URL</code> URL for view specific help files.
     * @return <code>java.net.URL</code> url to help files.
     */
    public URL getMainHelpPageUrl() {
        return getClass().getClassLoader().getResource("freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/textStudy/help");
    }

    /**
     * Method for deleting unnecessary external alement files (part of api). 
     * This method checks for html-files, images and .css-files with user specific stylesheets. 
     */
    protected void removeUnnecessaryExternalElementFiles(boolean originalElements) {
        File directoryToClean;
        List learningUnitViewElements;
        
        if (originalElements) {
            directoryToClean = learningUnitViewElementsManager.getLearningUnitViewOriginalDataDirectory();
            learningUnitViewElements = learningUnitViewElementsManager.getLearningUnitViewOriginalElements();
        } else {
            directoryToClean = learningUnitViewElementsManager.getLearningUnitViewUserDataDirectory();
            learningUnitViewElements = learningUnitViewElementsManager.getLearningUnitViewUserElements();
        }
        
        List absoluteFilesToKeep = new ArrayList();
        absoluteFilesToKeep.add(new File(directoryToClean, LEARNING_UNIT_VIEW_DATA_FILENAME));
        // absoluteFilesToKeep.add(new File(directoryToClean, LEARNING_UNIT_VIEW_DATA_FILENAME + "~"));
        
        for (int i = 0; i < learningUnitViewElements.size(); i++) {
            FLGTextStudyElement learningUnitViewElement = (FLGTextStudyElement)learningUnitViewElements.get(i);
            String[] relativePathsToKeep = learningUnitViewElement.getLearningUnitViewElementExternalFilesRelativePaths(learningUnitViewElementsManager);
            if (relativePathsToKeep != null) {
                for (int j = 0; j < relativePathsToKeep.length; j++) {
                    absoluteFilesToKeep.add(new File(directoryToClean, relativePathsToKeep[j]));
                    if (learningUnitViewElement.getStyleSheetFileName()!=null) {
                    	absoluteFilesToKeep.add(new File(directoryToClean,learningUnitViewElement.getStyleSheetFileName()));
                    }
                }
            }
        }
        FLGFileUtility.cleanDirectory(directoryToClean, (File[]) absoluteFilesToKeep.toArray(new File[] {}));
    }
    
    public FSLLearningUnitViewPrimaryActivationButton getPrimaryActivationButton() {
        return primaryActivationButton;
    }
    
    public Printable getDocumentRenderer() {
        FLGHtmlDocumentRenderer renderer = new FLGHtmlDocumentRenderer();
        renderer.print(((FLGTextStudyElementsContentsPanel)elementsContentsPanel).getHTMLContentPane());
        return renderer;
    }

    public Dispatcher createDispatcher() {
        Dispatcher d = FLGTextStudyDescriptor.newDispatcher();
        d.register(TextStudyDescriptor.class, FLGTextStudyDescriptor.class);
        d.register(ViewElement.class, FLGTextStudyElement.class);
        d.register(ViewElementLink.class, FLGTextStudyElementLink.class);
        d.register(ViewElementLinkTarget.class, FLGTextStudyElementLinkTarget.class);
        return d;
    }

    public FSLLearningUnitViewElement findLearningUnitViewElement(String contentFileName) {
        String elementId = null;
        FSLLearningUnitViewElement element = null;
        if (learningUnitViewElementsManager != null) {
            String[] elementIds = learningUnitViewElementsManager.getAllLearningUnitViewElementIds();
            for (int i = 0; i < elementIds.length; i++) {
                FLGTextStudyElement textStudyElement =
                    (FLGTextStudyElement)learningUnitViewElementsManager.getLearningUnitViewElement(elementIds[i], false);
                if (textStudyElement != null) {
                    if (textStudyElement.getHtmlFileName() != null) {
                        if (textStudyElement.getHtmlFileName().equals(contentFileName)) {
                            elementId = elementIds[i];
                            element = textStudyElement;
                            break;
                        }
                    }
                }
            }
        }
        return element;
    }
    
    /** Carsten Fiedler, 05.05.2004 **/
    public String getHtmlContentFileName(String learningUnitViewElementId) {
        String htmlFileName = null;
        // get Text Study ELement by Id
        FLGTextStudyElement textStudyElement = (FLGTextStudyElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
        // check, if Text Study Element is html document file by using htmlFileName
        if (!(textStudyElement.getType() == FLGTextStudyElement.ELEMENT_TYPE_FOLDER)) {
            htmlFileName = textStudyElement.getHtmlFileName();
        }
        return htmlFileName;
    }
    
    /** Carsten Fiedler, 05.05.2004 ***/
    public String getElementsTitleById(String learningUnitViewElementId) {
        FLGTextStudyElement textStudyElement = (FLGTextStudyElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
        return textStudyElement.getTitle();
    }
    
    /** Carsten Fiedler, 05.05.2004 **/
    public boolean getPrintAllPossibility() {
        return true;
    }
    
    public boolean supportsAutomaticLink() {
        return true;
    }
    
    public FSLLearningUnitViewElementLink addLearningUnitViewElementLink(FSLLearningUnitViewElementLinkTarget target, FSLLearningUnitViewElement learningUnitViewElement) {
        FLGTextStudyElementLink newLink = new FLGTextStudyElementLink();
        newLink.addNewLearningUnitViewElementLinkTarget(target.getTargetLearningUnitId(), target.getTargetLearningUnitViewManagerId(), target.getTargetLearningUnitViewElementId());
        FSLLearningUnitViewElementLink link = FSLLearningUnitViewElementsManager.addLearningUnitViewElementLink(newLink, learningUnitViewElement);
        learningUnitViewElementsManager.setModified(true);
        return link;
    }
    
    public FSLLearningUnitViewElementLink addLearningUnitViewElementLinkTarget(String linkId, FSLLearningUnitViewElementLinkTarget target, FSLLearningUnitViewElement learningUnitViewElement) {
        FLGTextStudyElementLink link = null;
        for (int ix = 0; ix < learningUnitViewElement.getLearningUnitViewElementLinks().size(); ix++) {
            link = (FLGTextStudyElementLink)learningUnitViewElement.getLearningUnitViewElementLinks().get(ix);
            if (link.getId().equals(linkId)) break;
        }
        link.addNewLearningUnitViewElementLinkTarget(target.getTargetLearningUnitId(), target.getTargetLearningUnitViewManagerId(), target.getTargetLearningUnitViewElementId());
        learningUnitViewElementsManager.setModified(true);
        return link;        
    }

    public FSLLearningUnitViewXMLDocument createLearningUnitViewXMLDocument() {
        return new FLGTextStudyDescriptor();
    }

    private Image loadImage(String imageFileName) {
        return FLGImageUtility.loadImageAndWait(getClass().getClassLoader().getResource("freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/textStudy/images/" +
            imageFileName));
    }
    
    public void reloadData() {
        super.reloadLearningUnitViewData();
    }
}
