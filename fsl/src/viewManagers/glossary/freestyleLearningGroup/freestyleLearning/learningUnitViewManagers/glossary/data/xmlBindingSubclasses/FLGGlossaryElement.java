/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.
    glossary.data.xmlBindingSubclasses;

import java.util.Date;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElement;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElementLink;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElementsManager;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.data.xmlBinding.ViewElement;
import freestyleLearningGroup.independent.gui.FLGHtmlUtilities;

public class FLGGlossaryElement
    extends ViewElement
    implements FSLLearningUnitViewElement {
  public static String ELEMENT_TYPE_FOLDER = "folder";
  public static String ELEMENT_TYPE_TERM = "term";
  private boolean modified;

  public Date getLastTryAsDate() {
    long lastTry = getLastTry();
    if (lastTry == 0)
      return null;
    else
      return new Date(lastTry);
  }

  public void setLastTry(Date lastTry) {
    setLastTry(lastTry.getTime());
  }

  public boolean isModified() {
    return modified;
  }

  public int getTries() {
    try {
      return super.getTries();
    }
    catch (Exception ex) {
      return 0;
    }
  }

  public long getLastTry() {
    try {
      return super.getLastTry();
    }
    catch (Exception ex) {
      return 0L;
    }
  }

  public int getSuccessfulTries() {
    try {
      return super.getSuccessfulTries();
    }
    catch (Exception ex) {
      return 0;
    }
  }

  public void setModified(boolean modified) {
    this.modified = modified;
  }

  public FSLLearningUnitViewElement deepCopy() {
    FLGGlossaryElement copy = new FLGGlossaryElement();
    FSLLearningUnitViewElementsManager.copyLearningUnitViewElement(this, copy);
    copy.setHtmlFileName(getHtmlFileName());
    return copy;
  }

  public String[] getLearningUnitViewElementExternalFilesRelativePaths(
      FSLLearningUnitViewElementsManager
      learningUnitViewElementsManager) {
    if (!getFolder() && getHtmlFileName() != null) {
      return FLGHtmlUtilities.getAllRelativeFileNamesToHtmlFile(getHtmlFileName(),
          learningUnitViewElementsManager.resolveRelativeFileName(
          getHtmlFileName(), this));
    }
    else {
      return null;
    }
  }

  public FSLLearningUnitViewElementLink getLearningUnitViewElementLink(String
      learningUnitViewElementLinkId) {
    for (int i = 0; i < getLearningUnitViewElementLinks().size(); i++) {
      FSLLearningUnitViewElementLink learningUnitViewElementLink =
          (FSLLearningUnitViewElementLink) getLearningUnitViewElementLinks().
          get(i);
      if (learningUnitViewElementLink.getId().equals(
          learningUnitViewElementLinkId)) {
        return learningUnitViewElementLink;
      }
    }
    return null;
  }

  public FSLLearningUnitViewElementLink addNewLearningUnitViewElementLink() {
    FLGGlossaryElementLink learningUnitViewElementLink = new
        FLGGlossaryElementLink();
    learningUnitViewElementLink.emptyLearningUnitViewElementLinkTargets();
    return FSLLearningUnitViewElementsManager.addLearningUnitViewElementLink(
        learningUnitViewElementLink, this);
  }

  public void setType(String type) {
    if (!type.equals(getType())) {
      this.emptyLearningUnitViewElementLinks();
      if (type.equals(ELEMENT_TYPE_FOLDER)) {
        this.setHtmlFileName(null);
      }
      super.setType(type);
    }
  }
	/* (non-Javadoc)
	 * @see freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.data.xmlBinding.ViewElement#getMemoryUsable()
	 */
	public boolean getMemoryUsable() {
		try {
			return super.getMemoryUsable();
		} catch (RuntimeException e) {
			return true;
		}
	}

	/* (non-Javadoc)
	 * @see freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.data.xmlBinding.ViewElement#getCategory()
	 */
	public int getCategory() {
		try {
			return super.getCategory();
		} catch (RuntimeException e) {
			return 0;
		}
	}

}
