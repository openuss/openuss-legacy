/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.
    glossary.elementInteractionPanel;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ImageIcon;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.elementInteractionPanel.FSLAbstractLearningUnitViewElementInteractionPanel;
import freestyleLearning.learningUnitViewAPI.elementInteractionPanel.FSLLearningUnitViewElementInteractionButton;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewAdapter;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEvent;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.data.xmlBindingSubclasses.FLGGlossaryElement;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.dialog.MemoryStartDialog;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.event.FLGMemoryEvent;
import freestyleLearningGroup.independent.util.FLGInternationalization;

public class FLGGlossaryElementInteractionPanel
    extends FSLAbstractLearningUnitViewElementInteractionPanel {

  private FLGInternationalization m_internationalization;
  protected FSLLearningUnitViewElementInteractionButton m_toggleButton;
  protected FSLLearningUnitViewElementInteractionButton m_startButton;
  protected FSLLearningUnitViewElementInteractionButton m_uncoverButton;
  protected FSLLearningUnitViewElementInteractionButton m_moveUpButton;
  protected FSLLearningUnitViewElementInteractionButton m_moveNotButton;
  protected FSLLearningUnitViewElementInteractionButton m_moveDownButton;
  protected FSLLearningUnitViewElementInteractionButton m_stopButton;

  public FLGGlossaryElementInteractionPanel() {
    setSplitModeAllowed(false);
    setFullScreenModeAllowed(false);
    m_internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.elementInteractionPanel.internationalization",
        getClass().getClassLoader());
  }

  public void init(FSLLearningUnitViewManager learningUnitViewManager, FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
    learningUnitViewManager.addLearningUnitViewListener(
        new FLGGlossaryElementInteractionPanel_Adapter());
    // Create buttons
    m_toggleButton = new FSLLearningUnitViewElementInteractionButton(
        new ImageIcon(
        getClass().getClassLoader().getResource(
        "freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/"
        + "glossary/images/memoryButton.gif")).getImage());
    m_toggleButton.setToolTipText(m_internationalization.getString("button.toggle.tooltip")); //$NON-NLS-1$
    m_toggleButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        FLGGlossaryElementInteractionPanel.this.learningUnitViewManager.fireLearningUnitViewEvent(
            new FLGMemoryEvent(FLGMemoryEvent.MEMORY_TOGGLE,
                               activeLearningUnitViewElementId));
      }
    });
    m_startButton = new FSLLearningUnitViewElementInteractionButton(
        new ImageIcon(
        getClass().getClassLoader().getResource(
        "freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/"
        + "glossary/images/start.gif")).getImage());
    m_startButton.setToolTipText(m_internationalization.getString("button.start.tooltip")); //$NON-NLS-1$
    m_startButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        FLGGlossaryElementInteractionPanel.this.learningUnitViewManager.fireLearningUnitViewEvent(
            new FLGMemoryEvent(FLGMemoryEvent.MEMORY_START));
      }
    });
    m_uncoverButton = new FSLLearningUnitViewElementInteractionButton(
        new ImageIcon(
        getClass().getClassLoader().getResource(
        "freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/"
        + "glossary/images/continue.gif")).getImage());
    m_uncoverButton.setToolTipText(m_internationalization.getString("button.uncover.tooltip")); //$NON-NLS-1$
    m_uncoverButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        FLGGlossaryElementInteractionPanel.this.learningUnitViewManager.fireLearningUnitViewEvent(
            new FLGMemoryEvent(FLGMemoryEvent.MEMORY_UNCOVER,
                               activeLearningUnitViewElementId));
      }
    });
	m_moveUpButton = new FSLLearningUnitViewElementInteractionButton(
		new ImageIcon(
		getClass().getClassLoader().getResource(
		"freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/"
		+ "glossary/images/move_up.gif")).getImage());
	m_moveUpButton.setToolTipText(m_internationalization.getString("button.moveUp.tooltip")); //$NON-NLS-1$
	m_moveUpButton.addActionListener(new ActionListener() {
	  public void actionPerformed(ActionEvent e) {
		FLGGlossaryElementInteractionPanel.this.learningUnitViewManager.fireLearningUnitViewEvent(
			new FLGMemoryEvent(FLGMemoryEvent.MEMORY_MOVE_UP,
							   activeLearningUnitViewElementId));
	  }
	});
	m_moveNotButton = new FSLLearningUnitViewElementInteractionButton(
		new ImageIcon(
		getClass().getClassLoader().getResource(
		"freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/"
		+ "glossary/images/move_not.gif")).getImage());
	m_moveNotButton.setToolTipText(m_internationalization.getString("button.moveNot.tooltip")); //$NON-NLS-1$
	m_moveNotButton.addActionListener(new ActionListener() {
	  public void actionPerformed(ActionEvent e) {
		FLGGlossaryElementInteractionPanel.this.learningUnitViewManager.fireLearningUnitViewEvent(
			new FLGMemoryEvent(FLGMemoryEvent.MEMORY_MOVE_NOT,
							   activeLearningUnitViewElementId));
	  }
	});
	m_moveDownButton = new FSLLearningUnitViewElementInteractionButton(
		new ImageIcon(
		getClass().getClassLoader().getResource(
		"freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/"
		+ "glossary/images/move_down.gif")).getImage());
	m_moveDownButton.setToolTipText(m_internationalization.getString("button.moveDown.tooltip")); //$NON-NLS-1$
	m_moveDownButton.addActionListener(new ActionListener() {
	  public void actionPerformed(ActionEvent e) {
		FLGGlossaryElementInteractionPanel.this.learningUnitViewManager.fireLearningUnitViewEvent(
			new FLGMemoryEvent(FLGMemoryEvent.MEMORY_MOVE_DOWN,
							   activeLearningUnitViewElementId));
	  }
	});
    m_stopButton = new FSLLearningUnitViewElementInteractionButton(
        new ImageIcon(
        getClass().getClassLoader().getResource(
        "freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/"
        + "glossary/images/stop.gif")).getImage());
    m_stopButton.setToolTipText(m_internationalization.getString("button.stop.tooltip")); //$NON-NLS-1$
    m_stopButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        FLGGlossaryElementInteractionPanel.this.learningUnitViewManager.fireLearningUnitViewEvent(
            new FLGMemoryEvent(FLGMemoryEvent.MEMORY_STOP,
                               activeLearningUnitViewElementId));
      }
    });
    m_startButton.setEnabled(false);
    m_uncoverButton.setEnabled(false);
	m_moveUpButton.setEnabled(false);
	m_moveNotButton.setEnabled(false);
	m_moveDownButton.setEnabled(false);
    m_stopButton.setEnabled(false);
    super.init(learningUnitViewManager,
               learningUnitEventGenerator,
               editMode);
  }

  protected void buildIndependentUI() {
    super.buildIndependentUI();
  }

  protected void insertViewSpecificInteractionComponents() {
    addSeparator();
    add(m_toggleButton);
    addSeparator();
    add(m_startButton);
    add(m_stopButton);
    addSeparator();
    add(m_uncoverButton);
	add(m_moveDownButton);
	add(m_moveNotButton);
	add(m_moveUpButton);
    addSeparator();
  }

  protected class FLGGlossaryElementInteractionPanel_Adapter
      extends FSLLearningUnitViewAdapter {

    public void learningUnitViewSpecificEventOccurred(
        FSLLearningUnitViewEvent event) {
			FLGMemoryEvent mEvent = (FLGMemoryEvent) event;
      FLGGlossaryElement currentElement = null;
      if (mEvent.getActiveLearningUnitViewElement() != null) { 
      	currentElement = (FLGGlossaryElement)
      		learningUnitViewElementsManager.getLearningUnitViewElement(
      	 	mEvent.getActiveLearningUnitViewElement(), false);      
		  }
      int specificType = mEvent.getEventSpecificType();
      // We are only interested in "ed" events...
      if (!(specificType == FLGMemoryEvent.MEMORY_ENTERED
            || specificType == FLGMemoryEvent.MEMORY_COVERED
            || specificType == FLGMemoryEvent.MEMORY_SESSION_FINISHED
            || specificType == FLGMemoryEvent.MEMORY_LEFT
            || specificType == FLGMemoryEvent.MEMORY_STARTED
            || specificType == FLGMemoryEvent.MEMORY_STOPPED
            || specificType == FLGMemoryEvent.MEMORY_UNCOVERED))
        return;
      m_toggleButton.setEnabled(
          specificType ==  FLGMemoryEvent.MEMORY_ENTERED
          || specificType == FLGMemoryEvent.MEMORY_STOPPED
          || specificType == FLGMemoryEvent.MEMORY_LEFT);
      m_startButton.setEnabled(
          specificType == FLGMemoryEvent.MEMORY_ENTERED
          || specificType == FLGMemoryEvent.MEMORY_STOPPED);
      m_uncoverButton.setEnabled(
          specificType == FLGMemoryEvent.MEMORY_COVERED);
		  m_moveUpButton.setEnabled(
		      specificType == FLGMemoryEvent.MEMORY_UNCOVERED
		      && currentElement != null
		      && currentElement.getCategory() < MemoryStartDialog.NUMBER_OF_CATEGORIES - 1);
		  m_moveDownButton.setEnabled(
			  specificType == FLGMemoryEvent.MEMORY_UNCOVERED
			  && currentElement != null
			  && currentElement.getCategory() > 0);
		  m_moveNotButton.setEnabled(
		      specificType == FLGMemoryEvent.MEMORY_UNCOVERED);
      m_stopButton.setEnabled(
          specificType == FLGMemoryEvent.MEMORY_COVERED
          || specificType == FLGMemoryEvent.MEMORY_UNCOVERED
          || specificType == FLGMemoryEvent.MEMORY_SESSION_FINISHED);
    }
  }
}
