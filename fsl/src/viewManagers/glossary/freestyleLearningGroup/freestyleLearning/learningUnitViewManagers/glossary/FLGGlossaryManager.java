/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary;

import java.awt.*;
import java.io.*;
import java.awt.print.*;

import javax.xml.bind.Dispatcher;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.data.xmlBinding.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.data.xmlBindingSubclasses.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.elementInteractionPanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.elementsContentsPanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.elementsStructurePanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.event.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.statusPanel.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;
import freestyleLearningGroup.independent.printing.*;

public class FLGGlossaryManager extends FSLAbstractLearningUnitViewManager {
    private FSLLearningUnitViewSecondaryActivationButton secondaryActivationButton;
    private FLGInternationalization internationalization;
    private boolean m_inMemoryMode = false;
    private boolean m_modifiedByMemory = false;
    
    public String getHtmlContentFileName(String learningUnitViewElementId) {
        String htmlFileName = null;
        // get Text Study ELement by Id
        FLGGlossaryElement glossaryElement = (FLGGlossaryElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
        // check, if Text Study Element is html document file by using htmlFileName
        if (!(glossaryElement.getType() == FLGGlossaryElement.ELEMENT_TYPE_FOLDER)) {
            htmlFileName = glossaryElement.getHtmlFileName();
        }
        return htmlFileName;
    }
    
    public String getElementsTitleById(String learningUnitViewElementId) {
        FLGGlossaryElement GlossaryElement = (FLGGlossaryElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
        return GlossaryElement.getTitle();
    }
    
    public boolean getPrintAllPossibility() {
        return true;
    }    

    public boolean supportsAutomaticLink() {
        return true;
    }
    
    public FSLLearningUnitViewElementLink addLearningUnitViewElementLink(FSLLearningUnitViewElementLinkTarget target, FSLLearningUnitViewElement learningUnitViewElement) {
        FLGGlossaryElementLink newLink = new FLGGlossaryElementLink();
        newLink.addNewLearningUnitViewElementLinkTarget(target.getTargetLearningUnitId(), target.getTargetLearningUnitViewManagerId(), target.getTargetLearningUnitViewElementId());
        FSLLearningUnitViewElementLink link = FSLLearningUnitViewElementsManager.addLearningUnitViewElementLink(newLink, learningUnitViewElement);
        learningUnitViewElementsManager.setModified(true);
        return link;
    }
    
    public FSLLearningUnitViewElementLink addLearningUnitViewElementLinkTarget(String linkId, FSLLearningUnitViewElementLinkTarget target, FSLLearningUnitViewElement learningUnitViewElement) {
        FLGGlossaryElementLink link = null;
        for (int ix = 0; ix < learningUnitViewElement.getLearningUnitViewElementLinks().size(); ix++) {
            link = (FLGGlossaryElementLink)learningUnitViewElement.getLearningUnitViewElementLinks().get(ix);
            if (link.getId().equals(linkId)) break;
        }
        link.addNewLearningUnitViewElementLinkTarget(target.getTargetLearningUnitId(), target.getTargetLearningUnitViewManagerId(), target.getTargetLearningUnitViewElementId());
        learningUnitViewElementsManager.setModified(true);
        return link;        
    }

    public Printable getDocumentRenderer() {
        FLGHtmlDocumentRenderer renderer = new FLGHtmlDocumentRenderer();
        renderer.print(((FLGGlossaryElementsContentsPanel)elementsContentsPanel).getHTMLContentPane());
        return renderer;
    }

    public boolean isInMemoryMode() {
        return m_inMemoryMode;
    }
    
    public boolean isModifiedByMemory() {
        return m_modifiedByMemory;
    }
    
    public void setModifiedByMemory(boolean modifiedByMemory) {
        m_modifiedByMemory = modifiedByMemory;
    }
    
    public void setInMemoryMode(boolean inMemoryMode) {
        m_inMemoryMode = inMemoryMode;
    }
    
    public void init(FSLLearningUnitsActivator learningUnitsActivator,
        FSLLearningUnitViewsActivator learningUnitViewsActivator,
        FSLLearningUnitEventGenerator learningUnitEventGenerator,
        String learningUnitViewManagerId,
        String learningUnitViewManagerTitle,
        File learningUnitViewManagerCodeDirectory,
        boolean editMode, boolean originalElementsOnly,
        FLGLongLastingOperationStatus progressStatus) {
            super.init(learningUnitsActivator, learningUnitViewsActivator,
                learningUnitEventGenerator,
                learningUnitViewManagerId, learningUnitViewManagerTitle,
                learningUnitViewManagerCodeDirectory, editMode,
                originalElementsOnly, progressStatus);
            internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.glossary.internationalization",
            getClass().getClassLoader());
            int stepSize = progressStatus.getStepSize();
            addLearningUnitViewListener(new FLGGlossaryManager_Adapter());
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int) (stepSize / 5.));
            secondaryActivationButton = new FSLLearningUnitViewSecondaryActivationButton(loadImage("secondaryActivationButton.gif"));
            secondaryActivationButton.setToolTipText(internationalization.getString("button.secondaryActivation.toolTipText"));
            elementsStructurePanel = new FLGGlossaryElementsStructurePanel();
            elementsStructurePanel.init(this, learningUnitEventGenerator, editMode);
            elementsStructurePanel.setAutomaticActivation(true);
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int) (stepSize / 5.));
            elementInteractionPanel = new FLGGlossaryElementInteractionPanel();
            elementInteractionPanel.init(this, learningUnitEventGenerator, editMode);
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int) (stepSize / 5.));
            elementsContentsPanel = new FLGGlossaryElementsContentsPanel();
            elementsContentsPanel.init(this, learningUnitEventGenerator, editMode);
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int) (stepSize / 5.));
            statusPanel = new FLGGlossaryStatusPanel();
            statusPanel.init(this, learningUnitEventGenerator, editMode);
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int) (stepSize / 5.));
    }
    
    public FSLLearningUnitViewSecondaryActivationButton getSecondaryActivationButton() {
        return secondaryActivationButton;
    }
    
    public FSLLearningUnitViewElement findLearningUnitViewElement(String contentFileName) {
        String elementId = null;
        FSLLearningUnitViewElement element = null;
        if (learningUnitViewElementsManager != null) {
            String[] elementIds = learningUnitViewElementsManager.getAllLearningUnitViewElementIds();
            for (int i = 0; i < elementIds.length; i++) {
                FLGGlossaryElement glossaryElement =
                    (FLGGlossaryElement)learningUnitViewElementsManager.getLearningUnitViewElement(elementIds[i], false);
                if (glossaryElement != null) {
                    if (glossaryElement.getHtmlFileName() != null &&
                        glossaryElement.getHtmlFileName().equals(contentFileName)) {
                            elementId = elementIds[i];
                            element = glossaryElement;
                            break;
                    }
                }
            }
        }
        return element;
    }    
    
    protected Dispatcher createDispatcher() {
        Dispatcher d = FLGGlossaryDescriptor.newDispatcher();
        d.register(GlossaryDescriptor.class, FLGGlossaryDescriptor.class);
        d.register(ViewElement.class, FLGGlossaryElement.class);
        d.register(ViewElementLink.class, FLGGlossaryElementLink.class);
        d.register(ViewElementLinkTarget.class, FLGGlossaryElementLinkTarget.class);
        return d;
    }
    
    protected FSLLearningUnitViewXMLDocument createLearningUnitViewXMLDocument() {
        return new FLGGlossaryDescriptor();
    }
    
    public java.net.URL getMainHelpPageUrl() {
        return getClass().getClassLoader().getResource("freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/glossary/help");
    }
    
    private Image loadImage(String imageFileName) {
        return FLGImageUtility.loadImageAndWait(getClass().getClassLoader().
        getResource("freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/glossary/images/" + imageFileName));
    }
    
    protected class FLGGlossaryManager_Adapter extends FSLLearningUnitViewAdapter {
        public void learningUnitViewSpecificEventOccurred(FSLLearningUnitViewEvent event) {
            FLGMemoryEvent mEvent = (FLGMemoryEvent) event;
            // We need an active learning unit view element. If we have none we will
            // use the first element we can get.
            String activeElementId = getActiveLearningUnitViewElementId();
            if (activeElementId == null && learningUnitViewElementsManager.getAllLearningUnitViewElementIds().length > 0) {
                activeElementId = learningUnitViewElementsManager.getAllLearningUnitViewElementIds()[0];
            }
            switch (mEvent.getEventSpecificType()) {
                case FLGMemoryEvent.MEMORY_TOGGLE:
                    if (m_inMemoryMode) {
                        m_inMemoryMode = false;
                        elementsStructurePanel.activateStandard();
                        fireLearningUnitViewEvent(new FLGMemoryEvent(FLGMemoryEvent.MEMORY_LEFT));
                    }
                    else {
                        m_inMemoryMode = true;
                        elementsStructurePanel.activateBlank();
                        fireLearningUnitViewEvent(new FLGMemoryEvent(FLGMemoryEvent.MEMORY_ENTERED));
                    }
                    fireLearningUnitViewEvent(
                        FSLLearningUnitViewEvent.createElementActivatedEvent(
                        learningUnitViewManagerId,
                        activeElementId,
                        null,
                        false));
                    break;
            }
        }
    }
    
}
