/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.elementsStructurePanel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.ImageObserver;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElement;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.elementInteractionPanel.FSLLearningUnitViewElementInteractionButton;
import freestyleLearning.learningUnitViewAPI.elementsStructurePanel.FSLAbstractLearningUnitViewElementsStructurePanel;
import freestyleLearning.learningUnitViewAPI.elementsStructurePanel.dialogs.FSLLearningUnitViewNewAndModifyElementDialogViewSpecificPane;
import freestyleLearning.learningUnitViewAPI.elementsStructurePanel.dialogs.FSLLearningUnitViewNewElementDialog;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewAdapter;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEvent;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.data.xmlBindingSubclasses.FLGMediaPoolElement;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.data.xmlBindingSubclasses.FLGSlideShowElement;
import freestyleLearningGroup.independent.gui.FLGColumnLayout;
import freestyleLearningGroup.independent.gui.FLGImageUtility;
import freestyleLearningGroup.independent.gui.FLGMediaFileChooser;
import freestyleLearningGroup.independent.gui.FLGOptionPane;
import freestyleLearningGroup.independent.gui.FLGUIUtilities;
import freestyleLearningGroup.independent.gui.documents.FLGDigitDocument;
import freestyleLearningGroup.independent.media.FLGAudioRecorder;
import freestyleLearningGroup.independent.media.FLGMediaListener;
import freestyleLearningGroup.independent.media.FLGMediaPlayer;
import freestyleLearningGroup.independent.util.FLGFileUtility;
import freestyleLearningGroup.independent.util.FLGInternationalization;

public class FLGSlideShowElementsStructurePanel extends FSLAbstractLearningUnitViewElementsStructurePanel {
    private FLGSlideShowSpecificElementDialogPane learningUnitViewNewAndModifyElementDialogViewSpecificPane;
    private FLGInternationalization internationalization;
    private FLGSlideShow_AudioRecordPanel recordPanel;
    private File audioFile = null;
    private File recordFile = null;
    private ArrayList nodesToDelete;
    private DefaultTreeModel importedFolderFilesStructure_audioFiles;
    private boolean isWaitForAudioEnd;
    private boolean scaleImages = true;
    private boolean repeatAudio = false;
    private boolean modifyViewElement = false;
    private boolean doAntialiazing = false;
    private Color backgroundColor = (Color)UIManager.get("FSLMainFrameColor1");
    private int delayTime;
    // acceptable volume values: 1,2,3(default),4,5
    private int volume = 3;
    private JTabbedPane tabbedPane;
    
    /**
     * Inits FLGSlideShowElementsStructurePanel.
     * @param <code>FSLLearningUnitViewManager</code> learningUnitViewManager
     * @param <code>FSLLearningUnitEventGenerator</code> learningUnitEventGenerator
     * @param <code>boolean</code> editMode
     */
    public void init(FSLLearningUnitViewManager learningUnitViewManager,
    		FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
        internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.elementsStructurePanel.internationalization",
        		getClass().getClassLoader());
        super.init(learningUnitViewManager, learningUnitEventGenerator, editMode);
        learningUnitViewManager.addLearningUnitViewListener(new FLGSlideShowElementsStructurePanel_LearningUnitViewAdapter());
        learningUnitViewNewAndModifyElementDialogViewSpecificPane = new FLGSlideShowSpecificElementDialogPane();
        recordPanel = new FLGSlideShow_AudioRecordPanel();
        nodesToDelete = new ArrayList();
    }
    
    protected void buildDependentUI() {
    	recordFile = null;
    	audioFile = null;
        structureTree.repaint();
    }
    
    /**
     * Returns pane for dialog with view specific edit functions. 
     * @return <code>FSLLearningUnitViewNewAndModifyElementDialogViewSpecificPane</code> learningUnitViewNewAndModifyElementDialogViewSpecificPane
     */
    public FSLLearningUnitViewNewAndModifyElementDialogViewSpecificPane
        getLearningUnitViewNewAndModifyElementDialogViewSpecificPane() {
            return learningUnitViewNewAndModifyElementDialogViewSpecificPane;
    }
    
    /**
     * Modifies learning unit view element.
     * @param <code>FSLLearningUnitViewElement</code> element
     */
    public void modifyLearningUnitViewElement(FSLLearningUnitViewElement element) {
        FLGSlideShowElement slideShowElement = (FLGSlideShowElement)element;
        slideShowElement.setLastModificationDate(String.valueOf(new Date().getTime()));
        slideShowElement.setBackgroundColor(Integer.toString(backgroundColor.getRGB()));
        if (slideShowElement.getFolder()) {
            slideShowElement.setType(FLGSlideShowElement.ELEMENT_TYPE_FOLDER);
            // set audio file (if exits)
            FLGUIUtilities.startLongLastingOperation();
            File sourceFile = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getAudioFileName();
            if (sourceFile != null) {
             	String sourceFileExtension = "." + FLGFileUtility.getExtension(sourceFile.getName());
                File destinationFile = learningUnitViewElementsManager.createNewFileForElementsExternalData("audio", sourceFileExtension,element.getId());
                FLGFileUtility.copyFile(sourceFile, destinationFile);
                slideShowElement.setAudioFileName(destinationFile.getName());
                slideShowElement.setVolume(volume);
               	slideShowElement.setRepeatAudio(repeatAudio);
            } else {
                slideShowElement.setAudioFileName(null);
            }
            FLGUIUtilities.stopLongLastingOperation();
            slideShowElement.setWaitForAudioEnd(learningUnitViewNewAndModifyElementDialogViewSpecificPane.isWaitForAudioEnd());
            if (!learningUnitViewNewAndModifyElementDialogViewSpecificPane.isWaitForAudioEnd()) {
                slideShowElement.setDelayTime(learningUnitViewNewAndModifyElementDialogViewSpecificPane.getDelayTime());
            }
        } else {
            if (slideShowElement.getType().equals(FLGSlideShowElement.ELEMENT_TYPE_SLIDE)) {
                File sourceFile = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getImageFile();
                FLGUIUtilities.startLongLastingOperation();
                if (sourceFile != null) {
                    String sourceFileExtension = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getImageFileExtension();
                    File destinationFile = learningUnitViewElementsManager.createNewFileForElementsExternalData("image",
                    sourceFileExtension, element.getId());
                    FLGFileUtility.copyFile(sourceFile, destinationFile);
                    slideShowElement.setImageFileName(destinationFile.getName());
                } else {
                    slideShowElement.setImageFileName(null);
                }
                sourceFile = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getAudioFileName();
                if (sourceFile != null) {
                 	String sourceFileExtension = "." + FLGFileUtility.getExtension(sourceFile.getName());
                    File destinationFile = learningUnitViewElementsManager.createNewFileForElementsExternalData("audio", sourceFileExtension,element.getId());
                    FLGFileUtility.copyFile(sourceFile, destinationFile);
                    slideShowElement.setAudioFileName(destinationFile.getName());
                    slideShowElement.setVolume(volume);
                } else {
                    slideShowElement.setAudioFileName(null);
                }
                FLGUIUtilities.stopLongLastingOperation();
                slideShowElement.setWaitForAudioEnd(learningUnitViewNewAndModifyElementDialogViewSpecificPane.isWaitForAudioEnd());
                if (!learningUnitViewNewAndModifyElementDialogViewSpecificPane.isWaitForAudioEnd()) {
                    slideShowElement.setDelayTime(learningUnitViewNewAndModifyElementDialogViewSpecificPane.getDelayTime());
                }
            }
            slideShowElement.setDoAntialiazing(doAntialiazing);
        }
    }
    
    /**
     * Creates learning unit view element.
     * @param <code>String</code> id
     * @param <code>String</code> parentId
     * @param <code>String</code> title
     * @param <code>boolean</code> folder
     * @return <code>FSLLearningUnitViewElement</code> new element
     */
    public FSLLearningUnitViewElement createLearningUnitViewElement(String id, String parentId, String title, boolean folder) {
    	FLGSlideShowElement newElement = new FLGSlideShowElement();
    	// check if older is inserted
    	if (tabbedPane.getSelectedIndex() == 1) {
          	folder = true;
        }
    	// global element settings
        newElement.setId(id);
        newElement.setParentId(parentId);
        newElement.setTitle(title);
        newElement.setFolder(folder);
        newElement.setVolume(volume);
        newElement.setLastModificationDate(String.valueOf(new Date().getTime()));
        newElement.setBackgroundColor(Integer.toString(backgroundColor.getRGB()));
        // folder settings
        if (newElement.getFolder()) {
            newElement.setType(FLGSlideShowElement.ELEMENT_TYPE_FOLDER);
            // set audio file for folder (if audio file exits)
            FLGUIUtilities.startLongLastingOperation();
            File sourceFile = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getAudioFileName();
            if (sourceFile != null) {
           	 	String sourceFileExtension = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getAudioFileExtension();
                File destinationFile = learningUnitViewElementsManager.createNewFileForElementsExternalData("audio",
                		sourceFileExtension, newElement.getId());
                FLGFileUtility.copyFile(sourceFile, destinationFile);
                newElement.setAudioFileName(destinationFile.getName());
                // set repeat flag
               	newElement.setRepeatAudio(repeatAudio);
            }
            FLGUIUtilities.stopLongLastingOperation();
            newElement.setWaitForAudioEnd(false);
            newElement.setDelayTime(0);
        } else {
        	// normal slide settings 
        	if (!folderImport) {
        		newElement.setType(FLGSlideShowElement.ELEMENT_TYPE_SLIDE); 
        		File sourceFile = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getImageFile();
        		FLGUIUtilities.startLongLastingOperation();
    		    // image file
	            if (sourceFile != null) {
	           		String sourceFileExtension = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getImageFileExtension();
	           		File destinationFile = learningUnitViewElementsManager.createNewFileForElementsExternalData("image",
	           				sourceFileExtension, newElement.getId());
		            if (scaleImages) {
		            	// load and scale image
				        URL imageUrl = null;
				        try {
				          	imageUrl = sourceFile.toURL();
				        } catch (Exception e) { e.printStackTrace(); }
				        Image image = scaleImage(FLGImageUtility.loadImageAndWait(imageUrl), 1024, 768);
				        new JPanel().add(new JLabel(new ImageIcon(image)));
				        // save scaled image
				        FLGUIUtilities.saveImage(FLGUIUtilities.createBufferedImage(image),destinationFile. getAbsolutePath());
		            }
		          	FLGFileUtility.copyFile(sourceFile, destinationFile);
		            newElement.setImageFileName(destinationFile.getName());
		       	}
		        // audio file
		        sourceFile = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getAudioFileName();
		        if (sourceFile != null) {
		        	String sourceFileExtension = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getAudioFileExtension();
		           	File destinationFile = learningUnitViewElementsManager.createNewFileForElementsExternalData("audio",
		           			sourceFileExtension, newElement.getId());
		            FLGFileUtility.copyFile(sourceFile, destinationFile);
		            newElement.setAudioFileName(destinationFile.getName());
		        }
		        FLGUIUtilities.stopLongLastingOperation();
		        isWaitForAudioEnd = learningUnitViewNewAndModifyElementDialogViewSpecificPane.isWaitForAudioEnd();
		        newElement.setWaitForAudioEnd(isWaitForAudioEnd);
		        if (!isWaitForAudioEnd) {
		            newElement.setDelayTime(learningUnitViewNewAndModifyElementDialogViewSpecificPane.getDelayTime());
		        }
        	} 
        	newElement.setDoAntialiazing(doAntialiazing);
        }
        return newElement;
    }
    
    private Image scaleImage(Image imageToScale, int w, int h) {
        Image newImage = imageToScale;
        ImageObserver observer = new ImageObserver() {
            public boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height) {
                return false;
            }
        };
        int height = newImage.getHeight(observer);
        int width  = newImage.getWidth(observer);
        if(imageToScale.getHeight(observer) >= imageToScale.getWidth(observer)) {
            newImage = imageToScale.getScaledInstance(-1, h, Image.SCALE_SMOOTH);
        } else {
            newImage = imageToScale.getScaledInstance(w, -1, Image.SCALE_SMOOTH);
        }
        return newImage;
    }
    
    /**
     * Returns true if user wants to use "is wait for audio end" for slide.
     * @return <code>boolean</code> isWaitForAudioEnd
     */
    public boolean getIsWaitForAudioEnd() {
    	isWaitForAudioEnd = learningUnitViewNewAndModifyElementDialogViewSpecificPane.isWaitForAudioEnd();
    	return isWaitForAudioEnd;
    }
    
    /**
     * Returns delay time for slide.
     * @return <code>int</code> delayTime
     */
    public int getDelayTime() {
    	return delayTime;
    }
    
    class FLGSlideShow_AudioRecordPanel extends JPanel {
        private FSLLearningUnitViewElementInteractionButton button_play;
        private FSLLearningUnitViewElementInteractionButton button_record;
        private FSLLearningUnitViewElementInteractionButton button_stop;
        private FLGMediaPlayer playerPanel;
        private FLGAudioRecorder recorder;
        private boolean recording=false;
        private boolean playing=false;
        private boolean adjusting = false;
        protected JSlider playBar;    
        protected int currentSeconds=0;
        private JSlider volumeBar;  
        private JLabel currentTimeLabel;
        private JLabel endTimeLabel;
        private javax.swing.Timer timer;
        private javax.swing.Timer recordTimer;
                
        public FLGSlideShow_AudioRecordPanel() {
         	setLayout(new BorderLayout());
         	setPreferredSize(new Dimension(375,75));
            playerPanel = new FLGMediaPlayer();
           
            // build left panel with play bar
            JPanel playBarPanel = new JPanel(new BorderLayout());
            playBarPanel.setOpaque(false);
            playBarPanel.setBorder(BorderFactory.createTitledBorder(internationalization.getString("audioRecordDialog.playBarPanel.text")));
            currentTimeLabel = new JLabel("00:00");
            endTimeLabel = new JLabel("00:00");
            playBarPanel.add(currentTimeLabel,BorderLayout.WEST);
            playBarPanel.add(endTimeLabel,BorderLayout.EAST);
            playBar = new JSlider(0,1,0); 
            playBar.addMouseListener(new PlayBarMouseListener());
            playBar.setOpaque(false);
            playBar.setEnabled(false);
            playBar.setMajorTickSpacing(60);
            playBar.setMinorTickSpacing(1);
            playBar.setPaintLabels(false);
            playBarPanel.add(playBar, BorderLayout.CENTER);
            
            // build right panel with volume bar
            volumeBar = new JSlider(1,5,3); 
            volumeBar.addChangeListener(new ChangeListener() {
    		    public void stateChanged(ChangeEvent e) {
    		    	volume = volumeBar.getValue();
    		    	if (isPlaying()) {
    		    		playerPanel.setVolume(volume);
    		    	}
    		    }
            });
            volumeBar.setOpaque(false);
            volumeBar.setMajorTickSpacing(1);
            volumeBar.setSnapToTicks(true);
            volumeBar.setPaintTicks(true);
            volumeBar.setPaintLabels(true);
            volumeBar.setPreferredSize(new Dimension(70, volumeBar.getPreferredSize().height));
            JLabel volumeBarIcon = new JLabel(new ImageIcon(FLGImageUtility.loadImageAndWait(  
                getClass().getClassLoader().getResource("freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/slideShow/images/speaker.gif"))));
            JPanel volumeBarPanel = new JPanel(new BorderLayout());
            volumeBarPanel.setBorder(BorderFactory.createTitledBorder(internationalization.getString("audioRecordDialog.volumeBarPanel.text")));
            volumeBarPanel.setOpaque(false);
            volumeBarPanel.add(volumeBar, BorderLayout.CENTER);
            volumeBarPanel.add(volumeBarIcon, BorderLayout.EAST);
            
            // add play bar and volume bar into dialog panel
            add(playBarPanel, BorderLayout.WEST);
            add(volumeBarPanel, BorderLayout.EAST);
            
            // button images
            button_play = new FSLLearningUnitViewElementInteractionButton(loadImage("playButton.gif"));
            button_record = new FSLLearningUnitViewElementInteractionButton(loadImage("recordButton.gif"));
            button_stop = new FSLLearningUnitViewElementInteractionButton(loadImage("stopButton.gif"));
            
            // button activation
            button_play.setEnabled(false);
            button_stop.setEnabled(false);
    
            // button tool tips
            button_play.setToolTipText(internationalization.getString("button.play.tooltipText"));
            button_record.setToolTipText(internationalization.getString("button.record.tooltipText"));
            button_stop.setToolTipText(internationalization.getString("button.stop.tooltipText"));
            
            // button listeners
            button_play.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    playAudio();
                }
            });
            button_record.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    record();
                }
            });
            button_stop.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    stop();
                }
            });
        
            // add buttons into panel
            JPanel buttonPanel = new JPanel(new FlowLayout());
            buttonPanel.add(button_record);
            buttonPanel.add(button_stop);
            buttonPanel.add(button_play);
            add(buttonPanel, BorderLayout.SOUTH);
        }
        
        /**
         * Returns true if player is playing audio file.
         * @return <code>boolean</code> true if playing
         */
        public boolean isPlaying() {
        	return playing;
        }
        
        /**
         * Returns true if player is recording audio file.
         * @return <code>boolean</code> true if recording
         */
        public boolean isRecording() {
        	return recording;
        }
        
        /**
         * Inits buttons and volume slider.
         * @param <code>File</code> file to play
         */
        public void initButtons(File file) {
        	if (file != null) { 
        		button_play.setEnabled(true);
            	volumeBar.setEnabled(true);
            	volumeBar.setValue(volume);
            	playerPanel.setVolume(volume);
            	// set audio length
            	try {
            		setAudioFile(file);
            		int duration = playerPanel.getDurationInSeconds();
            		String maxMins = Integer.toString(duration / 60);
    	        	if (Integer.parseInt(maxMins) < 10) {
    	        		maxMins = "0" + maxMins;
    	        	}
    	            String maxSeconds = Integer.toString(duration % 60);
    	            if (Integer.parseInt(maxSeconds) < 10) {
    	            	maxSeconds = "0" + maxSeconds;
    	            }
    	            endTimeLabel.setText(maxMins + ":" + maxSeconds);
    	          	playBar.setMinimum(0);
                	playBar.setMaximum(duration);
                	playBar.setValue(0);
                } catch(Exception e) {
                    System.out.println(e);
                }
            } else { 
            	button_play.setEnabled(false);
            	volumeBar.setEnabled(true);
            	// set default volume value
            	volumeBar.setValue(3);
            	playBar.setEnabled(false);
            	// update audio time labels
            	currentTimeLabel.setText("00:00");
            	endTimeLabel.setText("00:00");
        	}
        }
        
        /**
         * Sets initial audio file for the dialog.
         * @param <code>File>/code> audio file
         */
        public void setAudioFile(File file) {
            try {
            	if (file!=null) {
            		playerPanel.loadMedia(file);
            	} else {
            		System.out.println("No audio file.");
            	}
            } catch(Exception e) {
                System.out.println(e);
            }
        }
        
        private void startLabelTimer() {
        	if (recording) {
        		// start second timer for end time label
        		recordTimer = new javax.swing.Timer(1000, new ActionListener() {
        			int counter=0;
        	    	int minutes=0;
        	    	public void actionPerformed(ActionEvent e) {
        	    			counter++;
        	       			if (counter == 60) {
        	      				// set minutes in current time label and reset counter
        	    				if (minutes<10) {
        	    					endTimeLabel.setText("0" + Integer.toString(++minutes) + ":00");
        	    				} else {
        	    					endTimeLabel.setText(Integer.toString(++minutes) + ":00");
        	    				}
        	    				counter=0;
        	    			} else if (counter<60) {
        	    				// set seconds in current time label
        	    				if (minutes<10) {
        	    					if (counter<10) {
        	    						endTimeLabel.setText("0" + Integer.toString(minutes) + ":0" + Integer.toString(counter % 60));
        	    					} else {
        	    						endTimeLabel.setText("0" + Integer.toString(minutes) + ":" + Integer.toString(counter % 60));
        	    					}
        	    				} else {
        	    					if (counter<10) {
        	    						endTimeLabel.setText(Integer.toString(minutes) + ":0" + Integer.toString(counter % 60));
        	    					} else {
        	    						endTimeLabel.setText(Integer.toString(minutes) + ":" + Integer.toString(counter % 60));
        	    					}
        	    				}
        	    			}
        	        	}
        	        });
        	        recordTimer.setRepeats(true);
        	        recordTimer.start();
        	} 
	    	timer = new javax.swing.Timer(1000, new ActionListener() {  
	    		public void actionPerformed(ActionEvent e) {
	    			currentSeconds++;
	    			if (playing && !adjusting) { playBar.setValue(currentSeconds);}
	    			int minutes = currentSeconds / 60; 
	          		int seconds = currentSeconds % 60;
	          		if (minutes <10) {
	          			if (seconds<10) {
	          				currentTimeLabel.setText("0" + Integer.toString(minutes) + ":0" + seconds);
	          			} else {
	          				currentTimeLabel.setText("0" + Integer.toString(minutes) + ":" + seconds);
	          			}
	          		} else {
	          			if (seconds<10) {
	          				currentTimeLabel.setText(Integer.toString(minutes) + ":0" + seconds);
	          			} else {
	          				currentTimeLabel.setText(Integer.toString(minutes) + ":" + seconds);
	          			}
	          		}
	        	}
	        });
	        timer.setRepeats(true);
	        timer.start();
        }
        
        private void stopLabelTimer() {
        	timer.stop();
        	currentTimeLabel.setText("00:00");
        }
        
        private void playAudio() {
        	currentSeconds = 0;
        	playBar.setEnabled(true);
        	if (recordFile != null) {
        		setAudioFile(recordFile);
        	} else if (audioFile != null) {
        		setAudioFile(audioFile);
        	}
        	button_record.setEnabled(false);
        	button_play.setEnabled(false);
        	button_stop.setEnabled(true);
        	playing = true;
        	playerPanel.start();
        	playerPanel.setVolume(volume);
        	startLabelTimer();
            playerPanel.addMediaListener(
            		new FLGMediaListener() {
            			public void endOfMediaReached() {
                       			playing=false;
                       			button_record.setEnabled(true);
                       			button_play.setEnabled(true);
                       			button_stop.setEnabled(false);
                       			playBar.setValue(0);
                       			playBar.setEnabled(false);
                       			stopLabelTimer();
                       			currentSeconds = 0;
                    	   }
                    }
        	);
        }
        
        private void record() {
            button_play.setEnabled(false);   
            button_record.setEnabled(false);
            button_stop.setEnabled(true);
            try {
                String learningUnitViewElementId = learningUnitViewManager.getActiveLearningUnitViewElementId();
                recordFile  = learningUnitViewManager.getLearningUnitViewElementsManager().createNewFileForElementsExternalData("audio", ".wav", learningUnitViewElementId);
                
                System.out.println("record(): " + recordFile.getAbsolutePath());
                
                recorder = new FLGAudioRecorder(recordFile.getAbsolutePath());
                recording = true;
                recorder.startRecording();
                playBar.setEnabled(false);
                startLabelTimer();
                
            } catch(Exception e) {
                String message = internationalization.getString("error.recording.message1") + "\n\n" + e 
                	+ "\n\n" + internationalization.getString("error.recording.message2") 
                	+ "\n\n" + "http://java.sun.com/jmf";
                FLGOptionPane.showMessageDialog(message, internationalization.getString("error.recording.title"), FLGOptionPane.ERROR_MESSAGE);
            }
        }
        
        private void stop() {
        	button_record.setEnabled(true);
            button_stop.setEnabled(false);
            button_play.setEnabled(true);
            playBar.setEnabled(false);
            if (playing) {
            	playerPanel.stop();
            	playing = false;
            	stopLabelTimer();
            	playBar.setValue(0);
            }
            if (recording) {
                recorder.stopRecording();
                recording = false;
               	stopLabelTimer();
               	recordTimer.stop();
               	playBar.setValue(0);
            }
            currentSeconds = 0;
        }

        private Image loadImage(String imageFileName) {
            return FLGImageUtility.loadImageAndWait(getClass().getResource("images/" + imageFileName));
        }
        
        class PlayBarMouseListener implements MouseListener, MouseMotionListener {
            
            public void mouseClicked(java.awt.event.MouseEvent mouseEvent) {}
            
            public void mouseEntered(java.awt.event.MouseEvent mouseEvent) {}
            
            public void mouseExited(java.awt.event.MouseEvent mouseEvent) {}
            
            public void mousePressed(java.awt.event.MouseEvent mouseEvent) {
            	adjusting = true;
            }
            
            public void mouseReleased(java.awt.event.MouseEvent mouseEvent) {
            	currentSeconds = playBar.getValue();
          		playerPanel.setMediaTime((double) currentSeconds);
          		int minutes = currentSeconds / 60; 
          		int seconds = currentSeconds % 60;
          		if (minutes <10) {
          			if (seconds<10) {
          				currentTimeLabel.setText("0" + Integer.toString(minutes) + ":0" + seconds);
          			} else {
          				currentTimeLabel.setText("0" + Integer.toString(minutes) + ":" + seconds);
          			}
          		} else {
          			if (seconds<10) {
          				currentTimeLabel.setText(Integer.toString(minutes) + ":0" + seconds);
          			} else {
          				currentTimeLabel.setText(Integer.toString(minutes) + ":" + seconds);
          			}
          		}
          		adjusting = false;
            }
            
            public void mouseDragged(java.awt.event.MouseEvent mouseEvent) {
               while(playBar.getValueIsAdjusting()) {}
            }
            
            public void mouseMoved(java.awt.event.MouseEvent mouseEvent) {}
        }
    }
    
    /**
     * Returns true if user decides to scale image(s)
     * @return <code>boolean</code> for scaled images 
     */
    public boolean scaledImages() {
    	return scaleImages;
    }
    
    class FLGSlideShowSpecificElementDialogPane extends JPanel implements FSLLearningUnitViewNewAndModifyElementDialogViewSpecificPane {
    	private TabbedPanePanel folderPanel;
    	private TabbedPanePanel slidePanel;
    	private TabbedPanePanel folderImportPanel;
    	
        public FLGSlideShowSpecificElementDialogPane() {
            setLayout(new BorderLayout());
            setBorder(new EmptyBorder(5,5,5,5));
            buildIndependentUI();
        }
     
        private void buildIndependentUI() {
        	// insert tabs
            tabbedPane = new JTabbedPane();
        	folderImportPanel = new TabbedPanePanel(false, true);
        	tabbedPane.addTab(internationalization.getString("FLGSlideShowSpecificElementDialogPane.folderImportPanel.title"), folderImportPanel);
        	folderPanel = new TabbedPanePanel(true, false);
        	tabbedPane.addTab(internationalization.getString("FLGSlideShowSpecificElementDialogPane.folderPanelTab.title"), folderPanel);
        	slidePanel = new TabbedPanePanel(false, false);
        	tabbedPane.addTab(internationalization.getString("FLGSlideShowSpecificElementDialogPane.slidePanel.title"), slidePanel);
        	add(tabbedPane, BorderLayout.CENTER);
        }
        
        public class TabbedPanePanel extends JPanel {
        	private JTextField textField_imageFile;
        	private JTextField textField_audioFile;
        	private JTextField textField_delayTime;
        	private JPanel panel_backroundColor;
        	private JLabel label_imageFile;
        	private JLabel label_audioFile;
        	private JLabel label_delayTime;
        	private JLabel label_backgroundColor;
        	private JButton button_imageFile;
        	private JButton button_audioFile;
        	private JButton button_recordAudioFile;
        	private JButton button_deleteMusic;
        	private JButton button_backgroundColor;
        	private JCheckBox checkBox_repeatAudioFile;
        	private JCheckBox checkBox_smoothImages;
        	private JCheckBox checkBox_scaleImages;
        	private JCheckBox checkBox_waitForAudioEnd;
    
            public TabbedPanePanel(boolean isFolderPanel, boolean folderImport) {
            	setBorder(new EmptyBorder(5,5,5,5));
                setLayout(new FLGColumnLayout());
                if(!isFolderPanel) {	
            		
                	// create image components
                	if (folderImport) {
                		label_imageFile = new JLabel(internationalization.getString("label.imageFile.folderImport.text"));
                	} else {
                		label_imageFile = new JLabel(internationalization.getString("label.imageFile.text"));
                	}
                	textField_imageFile = new JTextField(27);
		            textField_imageFile.setText("");
		            button_imageFile = new JButton(internationalization.getString("button.browse.label"));
		            button_imageFile.addActionListener(new ActionListener() {
		                public void actionPerformed(ActionEvent e) {
		                    showImageFileChooserDialog();
		                }
		            });
		            button_imageFile.setPreferredSize(new Dimension(100,23));
		            
		            // components for background color
		            label_backgroundColor = new JLabel(internationalization.getString("label.backgroundColor.text"));
		            panel_backroundColor = new JPanel();
		            panel_backroundColor.setBackground((Color)UIManager.get("FSLMainFrameColor1"));
		            backgroundColor = (Color)UIManager.get("FSLMainFrameColor1");
		            panel_backroundColor.setPreferredSize(new Dimension(40,19));
		            panel_backroundColor.setBorder(new LineBorder(Color.GRAY));
		            button_backgroundColor = new JButton(internationalization.getString("button.backgroundColor.label"));
		            button_backgroundColor.addActionListener(new ActionListener() {
			            public void actionPerformed(ActionEvent e) {
			            	showElementBachgroundColorDialog();
			            }
			        });
		            button_backgroundColor.setEnabled(true);
		            button_backgroundColor.setPreferredSize(new Dimension(100,23));
		            
		            // check boxes for smoothing and scaling images
		            checkBox_smoothImages = new JCheckBox(internationalization.getString("label.smoothImages.text"));
		            checkBox_smoothImages.setSelected(false);
		            checkBox_smoothImages.addActionListener(new ActionListener() {
		                public void actionPerformed(ActionEvent e) {
		                	doAntialiazing = checkBox_smoothImages.isSelected();
		                }
		            });
		            checkBox_scaleImages = new JCheckBox(internationalization.getString("label.scaleImages.text"));
		            checkBox_scaleImages.setSelected(true);
		            checkBox_scaleImages.addActionListener(new ActionListener() {
		                public void actionPerformed(ActionEvent e) {
		                    scaleImages = checkBox_scaleImages.isSelected();
		                }
		            });
		            
		            // add image components
		            add(label_imageFile, FLGColumnLayout.LEFT);
		            JPanel imagePanel = new JPanel(new GridBagLayout());
		            imagePanel.add(textField_imageFile);
		            imagePanel.add(new JLabel(" "));
		            imagePanel.add(button_imageFile);
		            add(imagePanel, FLGColumnLayout.LEFTEND);
		            
		            add(new JLabel(" "), FLGColumnLayout.LEFT);
		            JPanel backgroundColorPanel = new JPanel(new GridBagLayout());
		            backgroundColorPanel.add(label_backgroundColor);
		            backgroundColorPanel.add(new JLabel(" "));
		            backgroundColorPanel.add(panel_backroundColor);
		            backgroundColorPanel.add(new JLabel(" "));
		            backgroundColorPanel.add(button_backgroundColor);
		            add(backgroundColorPanel, FLGColumnLayout.LEFTEND);
		            
			        add(new JLabel(" "), FLGColumnLayout.LEFT);
			        add(checkBox_smoothImages, FLGColumnLayout.LEFTEND);
			        add(new JLabel(" "), FLGColumnLayout.LEFT);
			        add(checkBox_scaleImages, FLGColumnLayout.LEFTEND);
            	} 
                
		        // create audio components for all panels
		        textField_audioFile = new JTextField(27);
		        textField_audioFile.setText("");

		        button_audioFile = new JButton(internationalization.getString("button.browse.label"));
		        button_audioFile.addActionListener(new ActionListener() {
		            public void actionPerformed(ActionEvent e) {
		                showAudioFileChooserDialog();
		            }
		        });
		        button_audioFile.setPreferredSize(new Dimension(100,23));
		        
		        button_recordAudioFile = new JButton(internationalization.getString("button.audio.record"));
		        button_recordAudioFile.addActionListener(new ActionListener() {
		            public void actionPerformed(ActionEvent e) {
		                showRecordAudioDialog();
		            }
		        });
		        button_recordAudioFile.setPreferredSize(new Dimension(100,23));
		        button_recordAudioFile.setEnabled(true);
		        
		        button_deleteMusic = new JButton(internationalization.getString("button.audio.delete"));
		        button_deleteMusic.setPreferredSize(new Dimension(100,23));
		        button_deleteMusic.addActionListener(new ActionListener() {
		            public void actionPerformed(ActionEvent e) {
		                removeMusicFileFromElement();
		            }
		        });
		        button_deleteMusic.setEnabled(false);
	
		        if (folderImport) {
                	label_audioFile = new JLabel(internationalization.getString("label.audioFile.folderImport.text"));
                	label_audioFile.setEnabled(false);
                	textField_audioFile.setEditable(false);
                	button_audioFile.setEnabled(false);
                } else { 
                	textField_audioFile.setEditable(true);
                	button_audioFile.setEnabled(true);
                	if (isFolderPanel) {
                		label_audioFile = new JLabel(internationalization.getString("label.audioFile.folder.text"));
                	} else {
                		label_audioFile = new JLabel(internationalization.getString("label.audioFile.text"));
                	}
            	}
                
		        // add audio components for all panels
		        add(label_audioFile, FLGColumnLayout.LEFT);
		        JPanel audioButtonsPanel = new JPanel(new GridBagLayout());
		        audioButtonsPanel.add(textField_audioFile);
		        audioButtonsPanel.add(new JLabel(" "));
		        audioButtonsPanel.add(button_audioFile);
		        if(!folderImport) {
		        	audioButtonsPanel.add(button_recordAudioFile);
		        	audioButtonsPanel.add(button_deleteMusic);
		        }
		        add(audioButtonsPanel, FLGColumnLayout.LEFTEND);
		    	if(isFolderPanel) {
		        	// create and add audio comp for folder
		        	checkBox_repeatAudioFile = new JCheckBox(internationalization.getString("FLGSlideShowSpecificElementDialogPane.folderImportPanel.repeatCheckbox"));
		        	checkBox_repeatAudioFile.addActionListener(new ActionListener() {
			            public void actionPerformed(ActionEvent e) {
			            	repeatAudio = checkBox_repeatAudioFile.isSelected();
			            }
			        });
		        	add(new JLabel(" "), FLGColumnLayout.LEFT);
		        	add(checkBox_repeatAudioFile, FLGColumnLayout.LEFTEND);
		        } else {
		        	// create and add components for normal slide and folder import
			        checkBox_waitForAudioEnd = new JCheckBox(internationalization.getString("checkBox.waitForAudioEnd.text"));
			        checkBox_waitForAudioEnd.setSelected(false);
			        checkBox_waitForAudioEnd.addActionListener(new ActionListener() {
			        	public void actionPerformed(ActionEvent e) {
			        		if (checkBox_waitForAudioEnd.isSelected()) { 
			        			textField_delayTime.setText(""); 
			        			textField_delayTime.setEnabled(false);
			        			label_delayTime.setEnabled(false);
			        		} else {
			        			textField_delayTime.setText("3"); 
			        			textField_delayTime.setEnabled(true);
			        			textField_delayTime.setEditable(true);
			        			label_delayTime.setEnabled(true);
			        		}
			        	}
			        });
			        label_delayTime = new JLabel(internationalization.getString("label.delayTime.text"));
			        textField_delayTime = new JTextField(3);
			        textField_delayTime.setHorizontalAlignment(JTextField.CENTER);
			        textField_delayTime.setText("3");
			        textField_delayTime.setDocument(new FLGDigitDocument());
			        
			        
			        if(folderImport) {
			        	checkBox_waitForAudioEnd.setEnabled(false);
			        	label_delayTime.setEnabled(false);
			        	textField_delayTime.setEnabled(false);
			        } else {
			        	checkBox_waitForAudioEnd.setEnabled(true);
			        	label_delayTime.setEnabled(true);
			        	textField_delayTime.setEnabled(true);
			        }
			        
			        JPanel delayTimePanel = new JPanel(new GridBagLayout());
			        delayTimePanel.add(label_delayTime);
			        delayTimePanel.add(new JLabel(" "));
			        delayTimePanel.add(textField_delayTime);
		            add(new JLabel(" "), FLGColumnLayout.LEFT);
			        add(checkBox_waitForAudioEnd, FLGColumnLayout.LEFTEND);
			        add(new JLabel(" "), FLGColumnLayout.LEFT);
			        add(delayTimePanel, FLGColumnLayout.LEFTEND);
		        }    
		     }
            
            public void enableMusicDeleteButton(boolean enable) {
            	button_deleteMusic.setEnabled(enable);
            }
            
            public void setDoAntialiazing(boolean doAntialiazing) {
            	checkBox_smoothImages.setSelected(doAntialiazing);
            }
            
            public void setBackgroundColor(Color color) {
            	panel_backroundColor.setBackground(color);
            }
            
            public Color getBackgroundColor() {
            	return panel_backroundColor.getBackground();
            }
            
            public void scaleImages(boolean scaleImg) {
            	checkBox_scaleImages.setSelected(scaleImg);
            }
            
            public String getImageFileName() {
            	return textField_imageFile.getText();
            }
            
            public void setImageFileName(String fileName) {
            	textField_imageFile.setText(fileName);
            }
            
            public String getImageFileExtension() {
            	String imageFileExtension = null;
                if (textField_imageFile.getText().lastIndexOf(".") > 0) {
                    imageFileExtension = textField_imageFile.getText().substring(
                    textField_imageFile.getText().lastIndexOf("."));
                }
            	return imageFileExtension;
            }
            
            public String getAudioFileName() {
            	return textField_audioFile.getText();
            }
            
            public void setAudioFileName(String fileName) {
            	textField_audioFile.setText(fileName);
            }
            
            public String getAudioFileExtension() {
                String audioFileExtension = null;
            	if (textField_audioFile.getText().lastIndexOf(".") > 0) {
                    audioFileExtension = textField_audioFile.getText().substring(
                    textField_audioFile.getText().lastIndexOf("."));
                }
            	return audioFileExtension;
            }
            
            public String getDelayTime() {
            	return textField_delayTime.getText();
            }
            
            public void setDelayTime(String time) {
            	textField_delayTime.setText(time);
            }
            
            public boolean isWaitForAudioEnd() {
            	return checkBox_waitForAudioEnd.isSelected(); 
            }
            
            public void setRepeatAudio(boolean repeat) {
            	checkBox_repeatAudioFile.setSelected(repeat);
            }
            
            public void setWaitForAudioEnd(boolean isWaitForAudioEnd) {
            	if(checkBox_waitForAudioEnd != null) { checkBox_waitForAudioEnd.setSelected(isWaitForAudioEnd); }
            	if(textField_delayTime != null) textField_delayTime.setEnabled(!isWaitForAudioEnd);
            	if(textField_delayTime != null) textField_delayTime.setEditable(!isWaitForAudioEnd);
            	if(label_delayTime != null) label_delayTime.setEnabled(!isWaitForAudioEnd);
            }
            
            public void enableAudioComponents(boolean enable) {
            	button_audioFile.setEnabled(enable);
                textField_audioFile.setEnabled(enable);
                label_audioFile.setEnabled(enable);
                textField_audioFile.setEditable(enable);
                if (checkBox_waitForAudioEnd != null) { checkBox_waitForAudioEnd.setEnabled(enable); }
                if (textField_delayTime != null) { textField_delayTime.setEnabled(enable); }
                setWaitForAudioEnd(!enable);
            }
        }
        
        private void showElementBachgroundColorDialog() {
        	JColorChooser colorChooser =  new JColorChooser();
        	Color color = (Color)UIManager.get("FSLMainFrameColor1");
        	if (slidePanel.getBackground() != null) {
        		color = slidePanel.getBackground();
        	}
        	backgroundColor = colorChooser.showDialog(null, internationalization.getString("dialog.colorChooser.title"), color);
        	if(tabbedPane.getSelectedIndex() == 2) {
        		slidePanel.setBackgroundColor(backgroundColor);
        	} else {
        		folderImportPanel.setBackgroundColor(backgroundColor);
        	}
        	
        }
        
        private void showRecordAudioDialog() {
        	FLGSlideShowElement activeElement = (FLGSlideShowElement)learningUnitViewElementsManager.getLearningUnitViewElement(activeLearningUnitViewElementId, false);
        	if(activeElement != null) {
        		if(recordFile == null) {
	       			// no recorded file
        			if (activeElement.getAudioFileName() != null && modifyViewElement) {
		        		audioFile = new File(learningUnitViewElementsManager.getLearningUnitViewDataDirectory() + "/" + activeElement.getAudioFileName());
		        		// enable play button and volume bar
		        		if (activeElement.hasVolume()) {
		        			volume = activeElement.getVolume();
		        		}
	       			} else { audioFile = null; }
	        	} else { 
	        		if(getAudioFileName() == null) {
	        			audioFile = null;
	        		} else {
	        			audioFile = recordFile;
	        		}
	        	}
        		recordPanel.initButtons(audioFile);
        	}
        	
        	// open audio file edit dialog and wait for users action
        	int returnValue = FLGOptionPane.showConfirmDialog(recordPanel, internationalization.getString("dialog.recording.title"),
                FLGOptionPane.OK_CANCEL_OPTION, FLGOptionPane.PLAIN_MESSAGE);
            
        	// stop player, if it is still running or recording after user closed edit dialog
        	if (recordPanel.isPlaying() || recordPanel.isRecording()) {
        		recordPanel.stop();
        	}
        	
        	if (returnValue == FLGOptionPane.OK_OPTION) {
            	if (modifyViewElement) {
            		if (recordFile != null) {
            			activeElement.setAudioFileName(recordFile.getName());
            			activeElement.setVolume(volume);
            			activeElement.setModified(true);
               		}
            	}      			
            	if(recordFile != null) {
            		audioFile = recordFile;
            	}
                // update file name in dialog
    			if(tabbedPane.getSelectedIndex() == 1) {
    				if (audioFile != null) {
    					folderPanel.setAudioFileName(audioFile.getAbsolutePath());
    				}
    			}
    			if(tabbedPane.getSelectedIndex() == 2) {
    				if (audioFile != null) {
    					slidePanel.setAudioFileName(audioFile.getAbsolutePath());
    				}
    			}
    			/*
				if(tabbedPane.getSelectedIndex() == 0) {
					if (audioFile != null) {
						folderImportPanel.setAudioFileName(audioFile.getAbsolutePath());
					}
				}*/
            } else {
            	if(modifyViewElement) {
            		if (recordFile != null) {
            			recordFile = null;
            		}
            	}
            }
        }
        
        /**
         * @return <code>File</code> image file
         */
        public File getImageFile() {
        	File imageFile = null;
        	String imageFileName = null;
        	if (tabbedPane.getSelectedIndex() == 2) {
        		imageFileName = slidePanel.getImageFileName();
        	}
        	if (tabbedPane.getSelectedIndex() == 0) {
        		imageFileName = folderImportPanel.getImageFileName();
        	}
        	if (imageFileName.length() > 0) {
    			imageFile = new File(imageFileName);
    		}
            return imageFile;
        }
        
        /**
         * @return <code>File</code> audio file
         */
        public File getAudioFileName() {
        	File audioFile = null;
        	String audioFileName = null;
        	if (tabbedPane.getSelectedIndex() == 1) {
        		audioFileName = folderPanel.getAudioFileName();
        	}
        	if (tabbedPane.getSelectedIndex() == 2) {
        		audioFileName = slidePanel.getAudioFileName();
        	}
        	if (tabbedPane.getSelectedIndex() == 0) {
        		audioFileName = folderImportPanel.getAudioFileName();
        	}
        	if (audioFileName.length() > 0) {
        		audioFile = new File(audioFileName);
    		}
            return audioFile;
        }
        
        /**
         * @return <code>int</code> milliseconds
         */
        public int getDelayTime() {
        	int milliseconds = 0;
        	if (tabbedPane.getSelectedIndex() == 2) {
        		if (slidePanel.getDelayTime().length() > 0) {
        			// convert input (seconds) into milliseconds
        			String seconds = slidePanel.getDelayTime();
                	milliseconds = Integer.parseInt(seconds) * 1000;
        		} else {
        			milliseconds = -1;
        		}
        	}
        	if (tabbedPane.getSelectedIndex() == 0) {
        		if(folderImportPanel.getDelayTime().length() > 0) {
        			// convert input (seconds) into milliseconds
        			String seconds = folderImportPanel.getDelayTime();
                	milliseconds = Integer.parseInt(seconds) * 1000;
        		} else {
        			milliseconds = -1;
        		}
        	}
        	return milliseconds;
        }
        
        /**
         * @return <code>boolean</code> isWaitForAudioEnd
         */
        public boolean isWaitForAudioEnd() {
        	boolean isWaitForAudioEnd = false;
        	if (tabbedPane.getSelectedIndex() == 2) {
        		isWaitForAudioEnd = slidePanel.isWaitForAudioEnd();
        	}
        	if (tabbedPane.getSelectedIndex() == 0) {
        		isWaitForAudioEnd = folderImportPanel.isWaitForAudioEnd();
        	}
        	return isWaitForAudioEnd;
        }
        
        /**
         * @return <code>String</code> imageFileExtension
         */
        public String getImageFileExtension() {
        	String imageFileExtension = null;
        	if (tabbedPane.getSelectedIndex() == 2) {
        		imageFileExtension = slidePanel.getImageFileExtension(); 
        	}
        	if (tabbedPane.getSelectedIndex() == 0) {
        		imageFileExtension = folderImportPanel.getImageFileExtension();
        	}
        	return imageFileExtension;
        }
        
        /**
         * @return <code>String</code> audioFileExtension
         */
        public String getAudioFileExtension() {
        	String audioFileExtension = null;
        	if(tabbedPane.getSelectedIndex() == 1) {
        		audioFileExtension = folderPanel.getAudioFileExtension();
        	}
        	if (tabbedPane.getSelectedIndex() == 2) {
        		audioFileExtension = slidePanel.getAudioFileExtension(); 
        	}
        	if (tabbedPane.getSelectedIndex() == 0) {
        		audioFileExtension = folderImportPanel.getAudioFileExtension();
        	}
            return audioFileExtension;
        }
        
        public Color getBackgroungColor() {
        	Color color  = null;
          	if (tabbedPane.getSelectedIndex() == 2) {
        		color = slidePanel.getBackground(); 
        	}
        	if (tabbedPane.getSelectedIndex() == 0) {
        		color = folderImportPanel.getBackground();
        	}
        	return color;
        }
        
        /**
         * <code>String</code> verify string
         */
        public String verifyInput(FSLLearningUnitViewElement editedLearningUnitViewElement,
        		FSLLearningUnitViewElement referenceLearningUnitViewElement, boolean asFolder, int insertPosition) {
            return null;
        }
        
        private void removeMusicFileFromElement() {
        	String activeId = learningUnitViewManager.getActiveLearningUnitViewElementId();
        	if(activeId != null) {
        		FLGSlideShowElement element = (FLGSlideShowElement) learningUnitViewElementsManager.getLearningUnitViewElement(activeId, true);
        		element.setAudioFileName(null);
        		element.setModified(true);
        		learningUnitViewElementsManager.setModified(true);
        		recordFile = null;
        	}
        	if (tabbedPane.getSelectedIndex() == 0) {
        		folderImportPanel.setAudioFileName("");
        	}
        	if (tabbedPane.getSelectedIndex() == 1) {
        		folderPanel.setAudioFileName("");
        	}
        	if (tabbedPane.getSelectedIndex() == 2) {
        		slidePanel.setAudioFileName("");
        	}
        }
        
        /**
         * Sets Input Fields Defaults.
         * @param <code>FSLLearningUnitViewElement</code> learningUnitViewElement
         */
        public void setInputFieldsDefaults(FSLLearningUnitViewElement learningUnitViewElement) {
         	backgroundColor = (Color)UIManager.get("FSLMainFrameColor1");
         	doAntialiazing = false;
       	 	scaleImages = false;
       	 	slidePanel.setBackgroundColor((Color)UIManager.get("FSLMainFrameColor1"));
       	 	folderImportPanel.setBackgroundColor((Color)UIManager.get("FSLMainFrameColor1"));
        	FLGSlideShowElement slideShowElement = (FLGSlideShowElement)learningUnitViewElement;
        	if (slideShowElement != null){
        		modifyViewElement = true;
        		if(slideShowElement.hasRepeatAudio()) {
        			folderPanel.setRepeatAudio(slideShowElement.getRepeatAudio());
        			repeatAudio = slideShowElement.getRepeatAudio();
        		}
        		if(!slideShowElement.getFolder()) {
        			// background color
        			if(slideShowElement.getBackgroundColor() != null) {
        				Color color = new Color(Integer.valueOf(slideShowElement.getBackgroundColor()));
        				backgroundColor = color;
        				slidePanel.setBackgroundColor(color);
        			} else {
        				// default backgroud color
        				slidePanel.setBackgroundColor((Color)UIManager.get("FSLMainFrameColor1"));
        			}
        			if (slideShowElement.hasDoAntialiazing()) {
    					slidePanel.setDoAntialiazing(slideShowElement.getDoAntialiazing());
    				} else {
    					slidePanel.setDoAntialiazing(false);
    				}
        			slidePanel.scaleImages(false);
            		// set image file name
        			if (slideShowElement.getImageFileName() != null) {
        				slidePanel.setImageFileName("" + 
        						learningUnitViewElementsManager.resolveRelativeFileName(slideShowElement.getImageFileName(), slideShowElement));
                  	} else { slidePanel.setImageFileName(""); }
            	 } else { slidePanel.setImageFileName(""); }
                 if (slideShowElement.getAudioFileName() != null) {                
                	 if(slideShowElement.getFolder()) {
                		 folderPanel.setAudioFileName("" + learningUnitViewElementsManager.resolveRelativeFileName(slideShowElement.getAudioFileName(), 
                				 slideShowElement));
                		 folderPanel.enableMusicDeleteButton(true);
                		 tabbedPane.setSelectedIndex(1);
                		 tabbedPane.setEnabledAt(1, true);
                		 tabbedPane.setEnabledAt(2, false);
                		 tabbedPane.setEnabledAt(0, false);
                  	 } else {
                		 tabbedPane.setSelectedIndex(2);
                		 tabbedPane.setEnabledAt(2, true);
                		 tabbedPane.setEnabledAt(1, false);
                		 tabbedPane.setEnabledAt(0, false);
                  		 slidePanel.setAudioFileName("" + learningUnitViewElementsManager.resolveRelativeFileName(slideShowElement.getAudioFileName(), 
                  				 slideShowElement));
                   		 slidePanel.setWaitForAudioEnd(slideShowElement.getWaitForAudioEnd());
                   		 slidePanel.enableMusicDeleteButton(true);
                    	 	if (slideShowElement.getWaitForAudioEnd()) {	
                    	 		slidePanel.setDelayTime("");
                       	 	} else {
                       	 		slidePanel.setDelayTime("" + slideShowElement.getDelayTime() / 1000);
                       	 	}
                	 }
                  	 // set audio volume
                	 if (slideShowElement.hasVolume()) {
                		 volume = slideShowElement.getVolume(); 
                	 } else {
                		 // default value
                		 volume = 3;
                	 }
                 } else {
                	 if(slideShowElement.getFolder()) {
                		 // deselect repeat checkbox
                		 tabbedPane.setSelectedIndex(1);
                		 tabbedPane.setEnabledAt(1, true);
                		 tabbedPane.setEnabledAt(2, false);
                		 tabbedPane.setEnabledAt(0, false);
                		 folderPanel.enableMusicDeleteButton(false);
                	 } else {
                		 tabbedPane.setSelectedIndex(2);
                		 tabbedPane.setEnabledAt(2, true);
                		 tabbedPane.setEnabledAt(1, false);
                		 tabbedPane.setEnabledAt(0, false);
                		 slidePanel.setWaitForAudioEnd(false);
         
                		 folderImportPanel.setWaitForAudioEnd(false);
                    	 
                    	 slidePanel.enableMusicDeleteButton(false);
                		 if(slideShowElement.hasDelayTime()) {
                			 slidePanel.setDelayTime("" + slideShowElement.getDelayTime() / 1000);
                		 } else {
                			 if(modifyViewElement) {
                				 slidePanel.setDelayTime("");
                				 slidePanel.setWaitForAudioEnd(slideShowElement.hasWaitForAudioEnd());
                			 } else {
                				 slidePanel.setDelayTime("3");
                			 }
                		 }
           			 }
                	 folderPanel.setAudioFileName("");
                	 slidePanel.setAudioFileName("");
                	 folderImportPanel.setAudioFileName("");
                	 folderImportPanel.enableAudioComponents(false);
                 }
           	} else {
            	modifyViewElement = false;
           	 	folderPanel.setAudioFileName("");
           	 	slidePanel.setAudioFileName("");
           	 	folderImportPanel.setAudioFileName("");
           	 	slidePanel.setImageFileName("");
           	 	folderImportPanel.setImageFileName("");
           	 	slidePanel.setDelayTime("3");
           	 	slidePanel.setWaitForAudioEnd(false);
           	 	folderImportPanel.setDelayTime("3");
          	 	folderImportPanel.setWaitForAudioEnd(false);
          	 	folderImportPanel.enableAudioComponents(false);
           	 	tabbedPane.setEnabledAt(2, true);
           	 	tabbedPane.setEnabledAt(1, true);
           	 	tabbedPane.setEnabledAt(0, true);
           	 	tabbedPane.setSelectedIndex(0);
           	 	folderPanel.setRepeatAudio(false);
           	 	slidePanel.setDoAntialiazing(false);
           	 	folderImportPanel.setDoAntialiazing(false);
           	 	slidePanel.scaleImages(true);
           	 	folderImportPanel.scaleImages(true);
           	 	slidePanel.enableMusicDeleteButton(false);
           	 	folderImportPanel.enableMusicDeleteButton(false);
           	}
        } 
        
        private void showImageFileChooserDialog() {
            File imageFile;
            File defaultDir = new File("");
            if (tabbedPane.getSelectedIndex() == 2) {
            	// insert slide image
	            FLGMediaFileChooser mediaFileChooser = new FLGMediaFileChooser(FLGMediaFileChooser.PICTURE);
	            if (mediaFileChooser.showDialog(defaultDir)) {
	                imageFile = mediaFileChooser.getSelectedFile();
	                if (imageFile.exists()) {
	                    slidePanel.setImageFileName(imageFile.getAbsolutePath());
	                    defaultDir = imageFile.getParentFile();
	                    // enable audio components
	                    slidePanel.enableAudioComponents(true);
	                    folderImport = false;
	                }
	            }
            }
            if (tabbedPane.getSelectedIndex() == 0) {
            	// import image folder
            	FLGMediaFileChooser mediaFileChooser = new FLGMediaFileChooser(FLGMediaFileChooser.FOLDER);
            	if (mediaFileChooser.showDialog(defaultDir)) {
            		imageFile = mediaFileChooser.getSelectedFile();
            		if (imageFile.exists()) {
            			folderImportPanel.setImageFileName(imageFile.getAbsolutePath());
            			defaultDir = imageFile.getParentFile();
            			// enable audio components
            			folderImportPanel.enableAudioComponents(true);
            			selectedMediaType = "image";
    	                folderImport = true;
                        String folderTitle = imageFile.getName();
                        editToolBar.setLearningUnitViewElementTitle(folderTitle);
                        // get files
                        DefaultTreeModel treeModel = FLGFileUtility.loadDirectoryContent(imageFile);
                        // filter files
                        TreeNode root = (TreeNode) treeModel.getRoot();
                        nodesToDelete.clear();
                        importedFolderFilesStructure = deleteNodes(treeModel,filterFiles(treeModel,root));
            		}
            	}
            }
        }	
         
        private void showAudioFileChooserDialog() {
            File defaultDir = new File("");
        	if (tabbedPane.getSelectedIndex() == 1) {
        		// create new folder with audio file
        		FLGMediaFileChooser mediaFileChooser = new FLGMediaFileChooser(FLGMediaFileChooser.AUDIO);
        		if (mediaFileChooser.showDialog(defaultDir)) {
        			recordFile = mediaFileChooser.getSelectedFile();
    				// enable audio components
    				folderPanel.setAudioFileName(recordFile.getAbsolutePath());
    				folderPanel.enableAudioComponents(true);
                    recordPanel.initButtons(recordFile);
                    if(recordFile != null) {
                    	folderPanel.enableMusicDeleteButton(true);
                    }
                    defaultDir = recordFile.getParentFile();
         			folderImport = false;
        		}
        	}
        	if (tabbedPane.getSelectedIndex() == 2) {
        		// create new slide with audio file
        		FLGMediaFileChooser mediaFileChooser = new FLGMediaFileChooser(FLGMediaFileChooser.AUDIO);
        		if (mediaFileChooser.showDialog(defaultDir)) {
    				// enable audio components
        			recordFile = mediaFileChooser.getSelectedFile();
    				slidePanel.setAudioFileName(recordFile.getAbsolutePath());
    				slidePanel.enableAudioComponents(true);
                    recordPanel.initButtons(recordFile);
                    if(recordFile != null) {
                    	slidePanel.enableMusicDeleteButton(true);
                    }
                    defaultDir = recordFile.getParentFile();
                    folderImport = false;
        		}
        	}
        	if (tabbedPane.getSelectedIndex() == 0) {
        		// import audio folder
        		FLGMediaFileChooser mediaFileChooser = new FLGMediaFileChooser(FLGMediaFileChooser.FOLDER);
        		if (mediaFileChooser.showDialog(defaultDir)) {
        			recordFile = mediaFileChooser.getSelectedFile();
        			if (recordFile.exists()) {
        				// enable audio components
        				folderImportPanel.setAudioFileName(recordFile.getAbsolutePath());
        				folderImportPanel.enableAudioComponents(true);
        				defaultDir = recordFile.getParentFile();
        				selectedMediaType = "audio";
    	                folderImport = true;
                        // set title
    	                editToolBar.setLearningUnitViewElementTitle(recordFile.getName());
    	                // get files
                        DefaultTreeModel treeModel = FLGFileUtility.loadDirectoryContent(recordFile);
                        // filter files
                        TreeNode root = (TreeNode) treeModel.getRoot();
                        nodesToDelete.clear();
                        importedFolderFilesStructure_audioFiles = deleteNodes(treeModel,filterFiles(treeModel,root));
        			}
        		}
        	}
       }
    }
    
    private DefaultTreeModel deleteNodes(DefaultTreeModel treeModel, java.util.List nodeList) {
        for (int i=0; i<nodeList.size(); i++) {
            // get node and remove it
            MutableTreeNode nodeToDelete = (MutableTreeNode) nodeList.get(i);
            treeModel.removeNodeFromParent(nodeToDelete);
        }
        return treeModel;
    }
    
    private java.util.List filterFiles(DefaultTreeModel treeModel, TreeNode nodeToCheck) {
        for (int i=0; i<treeModel.getChildCount(nodeToCheck);i++) {
            TreeNode child = (TreeNode)treeModel.getChild(nodeToCheck,i);
            File fileToCheck = (File) ((DefaultMutableTreeNode)child).getUserObject();
            if (fileToCheck.isDirectory()) {
                // get children and filter them
                filterFiles(treeModel, child);
            } else {
                // check file extension
                String fileExtension = FLGFileUtility.getExtension(fileToCheck.getName());
                // images
                if (selectedMediaType.equals("image")) {
                    if (!fileExtension.equals("gif")
                    	&& !fileExtension.equals("jpg")
                    	&& !fileExtension.equals("png")) {
                        	nodesToDelete.add((MutableTreeNode)child);
                    }
                }
                // audio files
                if (selectedMediaType.equals("audio")) {
                	if (!fileExtension.equals("mp2")
                		&& !fileExtension.equals("wav")
                		&& !fileExtension.equals("mp3")
                		&& !fileExtension.equals("midi")) {
                        	nodesToDelete.add((MutableTreeNode)child);
                    }
                } 
            }
        }
        return nodesToDelete;
    }
    
    /**
     * Creates new Learning Unit View Elements.
     * @param <code>String</code> parentId, the element to add new children
     * @param <code>int</code> position
     * @param <code>String</code> selectedLearningUnitViewElementId
     * @return <code>java.util.List</code> newElements
     */
    public java.util.List createElements(String parentId, int position, String selectedLearningUnitViewElementId) {
    
    	ArrayList newElements = new ArrayList();
    	
    	if (importedFolderFilesStructure==null) {
    		FLGOptionPane.showMessageDialog(internationalization.getString("folderImport.dialog.missingImageElements.message"), 
                    internationalization.getString("folderImport.dialog.missingImageElements.title"), FLGOptionPane.PLAIN_MESSAGE);
    	} else {
    		
    		if (importedFolderFilesStructure_audioFiles==null) {
    			// --------------------- only insert images ---------------------
    			
    			System.out.println("No audio files found in directory. Only images will be imported...");
    			
    			importedFileList.clear();
		        TreeNode root = (TreeNode)importedFolderFilesStructure.getRoot();
    			root.getChildCount();
		        
    			// insert root, create new FSL-Element
    			String elementId = learningUnitViewElementsManager.createLearningUnitViewElementId();
    			File rootFile = (File)((DefaultMutableTreeNode)root).getUserObject();
    			
    			// set root tilte
    			editToolBar.getLearningUnitViewElementTitle();
    			
    			String title = FLGFileUtility.removeExtension(editToolBar.getLearningUnitViewElementTitle());
    			FSLLearningUnitViewElement newElement = createLearningUnitViewElement(elementId, parentId, title, true);
    				switch (position) {
		            	case FSLLearningUnitViewNewElementDialog.INSERT_BEFORE:
		            		learningUnitViewElementsManager.insertLearningUnitViewElementBefore(newElement,
		            				selectedLearningUnitViewElementId);
		            		break;
		            	case FSLLearningUnitViewNewElementDialog.INSERT_AFTER:
		            		learningUnitViewElementsManager.insertLearningUnitViewElementAfter(newElement,
		            				selectedLearningUnitViewElementId);
		            		break;
		            	default:
		            		learningUnitViewElementsManager.addLearningUnitViewElement(newElement,
		            				learningUnitViewElementsManager.isOriginalElementsOnly());
		                	break;
    			}
    			newElement.setModified(true);
    			newElements.add(newElement);
		        // add image file to root
    			importedFileList.add(rootFile);
    			
    			// insert children
    			for (int i=0; i<root.getChildCount(); i++) {
    				// get child
    				TreeNode child = (TreeNode)importedFolderFilesStructure.getChild(root,i);
    				File file = (File) ((DefaultMutableTreeNode)child).getUserObject();
    				if (file.isDirectory()) {
    					System.out.println("Checking subdirectory...");
    					// check for elements in folder
    					newElements.addAll(createElements(child, null, elementId));
    				} else {
    					// create new FSL-Element and insert as child
    					parentId = elementId;
    					String id = learningUnitViewElementsManager.createLearningUnitViewElementId();
    					File childFile = (File)((DefaultMutableTreeNode)child).getUserObject();
    					title = FLGFileUtility.removeExtension(childFile.getName());
    					newElement = createLearningUnitViewElement(id, parentId, title, false);
    					learningUnitViewElementsManager.addLearningUnitViewElement(newElement,
    							learningUnitViewElementsManager.isOriginalElementsOnly());
    					newElement.setModified(true);
    					newElements.add(newElement);
    					importedFileList.add(childFile);
		            }
		        }
    			importedFolderFilesStructure_audioFiles=null;
				importedFolderFilesStructure = null;
				learningUnitViewManager.setElementSpecififcFileProperties(importedFileList,newElements,FLGSlideShowElement.ELEMENT_TYPE_SLIDE);
    			
    		} else {
    			// --------------------- insert images and audio files ---------------------
    			
    			System.out.println("Inserting images and audie files...");
    			
    			TreeNode imageRoot = (TreeNode)importedFolderFilesStructure.getRoot();
    			TreeNode audioRoot = (TreeNode)importedFolderFilesStructure_audioFiles.getRoot();
    			// first check, if there are audio or image files missing
    			if (importedFolderFilesStructure.getChildCount(imageRoot)
	    			!=importedFolderFilesStructure_audioFiles.getChildCount(audioRoot)) {
    					FLGOptionPane.showMessageDialog(internationalization.getString("folderImport.dialog.missingElements.message"), 
    							internationalization.getString("folderImport.dialog.missingElements.title"), FLGOptionPane.PLAIN_MESSAGE);
    			} else{
    				// import files
    				importedFileList.clear();
		        	TreeNode root = (TreeNode)importedFolderFilesStructure.getRoot();
    				root.getChildCount();
		        
    				// insert root, create new FSL-Element
    				String elementId = learningUnitViewElementsManager.createLearningUnitViewElementId();
    				File rootFile = (File)((DefaultMutableTreeNode)root).getUserObject();
    				String title = FLGFileUtility.removeExtension(rootFile.getName());
    				FSLLearningUnitViewElement newElement = createLearningUnitViewElement(elementId, parentId, title, true);
    				switch (position) {
		            	case FSLLearningUnitViewNewElementDialog.INSERT_BEFORE:
		            		learningUnitViewElementsManager.insertLearningUnitViewElementBefore(newElement,
		            				selectedLearningUnitViewElementId);
		            		break;
		            	case FSLLearningUnitViewNewElementDialog.INSERT_AFTER:
		            		learningUnitViewElementsManager.insertLearningUnitViewElementAfter(newElement,
		            				selectedLearningUnitViewElementId);
		            		break;
		            	default:
		            		learningUnitViewElementsManager.addLearningUnitViewElement(newElement,
		            				learningUnitViewElementsManager.isOriginalElementsOnly());
		                	break;
    				}
    				newElement.setModified(true);
    				newElements.add(newElement);
		        
    				// add image file to root
    				importedFileList.add(rootFile);
    				
    				// add audio file to root
    				audioRoot = (TreeNode)importedFolderFilesStructure_audioFiles.getRoot();
    				File audioFile = (File)((DefaultMutableTreeNode)audioRoot).getUserObject();
    				importedFileList.add(audioFile);
		        
    				// insert children
    				for (int i=0; i<root.getChildCount(); i++) {
    					// get child
    					TreeNode child = (TreeNode)importedFolderFilesStructure.getChild(root,i);
    					File file = (File) ((DefaultMutableTreeNode)child).getUserObject();
    					TreeNode child_audio = (TreeNode)importedFolderFilesStructure_audioFiles.getChild(audioRoot,i);
    					//File file_audioFile = (File) ((DefaultMutableTreeNode)child_audio).getUserObject();
    					if (file.isDirectory()) {
    						// check for elements in folder
    						newElements.addAll(createElements(child, child_audio, elementId));
    					} else {
    						// create new FSL-Element and insert as child
    						parentId = elementId;
    						String id = learningUnitViewElementsManager.createLearningUnitViewElementId();
    						File childFile = (File)((DefaultMutableTreeNode)child).getUserObject();
    						File child_audioFile = (File)((DefaultMutableTreeNode)child_audio).getUserObject();
    						title = FLGFileUtility.removeExtension(childFile.getName());
    						newElement = createLearningUnitViewElement(id, parentId, title, false);
    						learningUnitViewElementsManager.addLearningUnitViewElement(newElement,
    								learningUnitViewElementsManager.isOriginalElementsOnly());
    						newElement.setModified(true);
    						newElements.add(newElement);
    						importedFileList.add(childFile);
    						importedFileList.add(child_audioFile);
    					}
		            }
    				importedFolderFilesStructure_audioFiles=null;
    				importedFolderFilesStructure = null;
    				learningUnitViewManager.setElementSpecififcFileProperties(importedFileList,newElements,FLGSlideShowElement.ELEMENT_TYPE_SLIDE);
    			}
    		}
    	}
        return newElements;
    }
    
    private java.util.List createElements(TreeNode directory, TreeNode directory_audio, String parentId) { 
        ArrayList newElements = new ArrayList();
        if (directory_audio!=null) {
	        // insert directory
	        String elementId = learningUnitViewElementsManager.createLearningUnitViewElementId();
	        File directoryFile = (File)((DefaultMutableTreeNode)directory).getUserObject();
	        String title = FLGFileUtility.removeExtension(directoryFile.getName());
	        FSLLearningUnitViewElement newElement = createLearningUnitViewElement(elementId, parentId, title, true);
	        learningUnitViewElementsManager.addLearningUnitViewElement(newElement,
	        learningUnitViewElementsManager.isOriginalElementsOnly());
	        newElement.setModified(true);
	        newElements.add(newElement);
	        importedFileList.add(directoryFile);
	        // add audio file
	        File directory_audioFile = (File)((DefaultMutableTreeNode)directory_audio).getUserObject();
	        importedFileList.add(directory_audioFile);
	        
	        // check for children and add them
	        parentId = elementId;
	        for (int i=0; i<directory.getChildCount(); i++) {
	            if (directory.getChildCount()!=0) {
		        	// get child
		            TreeNode child = (TreeNode)importedFolderFilesStructure.getChild(directory,i);
		            File childFile = (File) ((DefaultMutableTreeNode)child).getUserObject();
		            
			            TreeNode child_audio = (TreeNode)importedFolderFilesStructure_audioFiles.getChild(directory_audio,i);
			            //File childFile_audio = (File) ((DefaultMutableTreeNode)child_audio).getUserObject();
			            
			            if (childFile.isDirectory()) {
			                // check for elements in folder
			                newElements.addAll(createElements(child,child_audio,elementId));
			            } else {
			                // create new FSL-Element and insert as child
			                String id = learningUnitViewElementsManager.createLearningUnitViewElementId();
			                File file = (File)((DefaultMutableTreeNode)child).getUserObject();
			                title = FLGFileUtility.removeExtension(file.getName());
			                newElement = createLearningUnitViewElement(id, parentId, title, false);
			                learningUnitViewElementsManager.insertLearningUnitViewElementAfter(newElement,parentId);
			                newElement.setModified(true);
			                newElements.add(newElement);
			                importedFileList.add(file);
			                // add audio file
			                File file_audio = (File)((DefaultMutableTreeNode)child_audio).getUserObject();
			                importedFileList.add(file_audio);
			            }
		       
		        }
	        }
        } else{
            // insert directory
            String elementId = learningUnitViewElementsManager.createLearningUnitViewElementId();
            File directoryFile = (File)((DefaultMutableTreeNode)directory).getUserObject();
            String title = FLGFileUtility.removeExtension(directoryFile.getName());
            FSLLearningUnitViewElement newElement = createLearningUnitViewElement(elementId, parentId, title, true);
            learningUnitViewElementsManager.addLearningUnitViewElement(newElement,
            		learningUnitViewElementsManager.isOriginalElementsOnly());
            newElement.setModified(true);
            newElements.add(newElement);
            importedFileList.add(directoryFile);
            // check for children and add them
            parentId = elementId;
            for (int i=0; i<directory.getChildCount(); i++) {
                if (directory.getChildCount()!=0) {
    	        	// get child
    	            TreeNode child = (TreeNode)importedFolderFilesStructure.getChild(directory,i);
    	            File childFile = (File) ((DefaultMutableTreeNode)child).getUserObject();
    	            
    	            if (childFile.isDirectory()) {
    	                // check for elements in folder
    	                newElements.addAll(createElements(child,null,elementId));
    	            } else {
    	                // create new FSL-Element and insert as child
    	                String id = learningUnitViewElementsManager.createLearningUnitViewElementId();
    	                File file = (File)((DefaultMutableTreeNode)child).getUserObject();
    	                title = FLGFileUtility.removeExtension(file.getName());
    	                newElement = createLearningUnitViewElement(id, parentId, title, false);
    	                learningUnitViewElementsManager.insertLearningUnitViewElementAfter(newElement,parentId);
    	                newElement.setModified(true);
    	                newElements.add(newElement);
    	                importedFileList.add(file);
    	            }
    	        }
            }
        }
        return newElements;
    }
    
    class FLGSlideShowElementsStructurePanel_LearningUnitViewAdapter extends FSLLearningUnitViewAdapter {
        public void learningUnitViewElementActivated(FSLLearningUnitViewEvent event) {
            if (event.getActiveLearningUnitViewElementId() != null) {
                FLGSlideShowElement element = (FLGSlideShowElement)(learningUnitViewElementsManager.getLearningUnitViewElement(event.getActiveLearningUnitViewElementId(), false));
                if (element.getAudioFileName() != null && !element.getAudioFileName().equals("")) {
                    audioFile = learningUnitViewElementsManager.resolveRelativeFileName(element.getAudioFileName(), element);
                }
            }
        }    
    }
}

