/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.ImageObserver;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.xml.bind.Dispatcher;

import freestyleLearning.learningUnitViewAPI.FSLAbstractLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElement;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewPrimaryActivationButton;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewXMLDocument;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewsActivator;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitsActivator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEvent;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.data.xmlBinding.SlideShowDescriptor;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.data.xmlBinding.ViewElement;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.data.xmlBinding.ViewElementLink;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.data.xmlBinding.ViewElementLinkTarget;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.data.xmlBindingSubclasses.FLGSlideShowDescriptor;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.data.xmlBindingSubclasses.FLGSlideShowElement;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.data.xmlBindingSubclasses.FLGSlideShowElementLink;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.data.xmlBindingSubclasses.FLGSlideShowElementLinkTarget;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.elementInteractionPanel.FLGSlideShowElementInteractionPanel;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.elementsContentsPanel.FLGSlideShowElementsContentsPanel;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.elementsStructurePanel.FLGSlideShowElementsStructurePanel;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.statusPanel.FLGSlideShowStatusPanel;
import freestyleLearningGroup.independent.gui.FLGImageProgressDialog;
import freestyleLearningGroup.independent.gui.FLGImageUtility;
import freestyleLearningGroup.independent.gui.FLGOptionPane;
import freestyleLearningGroup.independent.gui.FLGUIUtilities;
import freestyleLearningGroup.independent.util.FLGFileUtility;
import freestyleLearningGroup.independent.util.FLGInternationalization;
import freestyleLearningGroup.independent.util.FLGLongLastingOperationStatus;

public class FLGSlideShowManager extends FSLAbstractLearningUnitViewManager {
    private FSLLearningUnitViewPrimaryActivationButton primaryActivationButton;
    private FLGInternationalization internationalization;
    
    /**
     * Inits Slide Show Manager.
     * @param <code>FSLLearningUnitsActivator</code> learningUnitsActivator
     * @param <code>FSLLearningUnitViewsActivator</code> learningUnitViewsActivator
     * @param <code>FSLLearningUnitEventGenerator</code> learningUnitEventGenerator
     * @param <code>String</code> learningUnitViewManagerId 
     * @param <code>String</code> learningUnitViewManagerTitle
     * @param <code>File</code> learningUnitViewManagerCodeDirectory
     * @param <code>boolean</code> editMode
     * @param <code>boolean</code> originalElementsOnly
     * @param <code>FLGLongLastingOperationStatus</code> progressStatus
     */
    public void init(FSLLearningUnitsActivator learningUnitsActivator,
    		FSLLearningUnitViewsActivator learningUnitViewsActivator, FSLLearningUnitEventGenerator learningUnitEventGenerator,
    		String learningUnitViewManagerId, String learningUnitViewManagerTitle, File learningUnitViewManagerCodeDirectory,
    		boolean editMode, boolean originalElementsOnly, FLGLongLastingOperationStatus progressStatus) {
        super.init(learningUnitsActivator, learningUnitViewsActivator, learningUnitEventGenerator,
        learningUnitViewManagerId, learningUnitViewManagerTitle, learningUnitViewManagerCodeDirectory, editMode,
        originalElementsOnly, progressStatus);
        int stepSize = progressStatus.getStepSize();
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
        internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.internationalization",
        getClass().getClassLoader());
        primaryActivationButton = new FSLLearningUnitViewPrimaryActivationButton(loadImage("primaryActivationButton.gif"));
        primaryActivationButton.setToolTipText(internationalization.getString("button.primaryActivation.toolTipText"));
        elementsStructurePanel = new FLGSlideShowElementsStructurePanel();
        elementsStructurePanel.init(this, learningUnitEventGenerator, editMode);
        elementsStructurePanel.setAutomaticActivation(true);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
        elementInteractionPanel = new FLGSlideShowElementInteractionPanel();
        elementInteractionPanel.init(this, learningUnitEventGenerator, editMode);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
        elementsContentsPanel = new FLGSlideShowElementsContentsPanel();
        elementsContentsPanel.init(this, learningUnitEventGenerator, editMode);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
        statusPanel = new FLGSlideShowStatusPanel();
        statusPanel.init(this, learningUnitEventGenerator, editMode);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
        folderImportSupported=true;
    }
        
    public java.net.URL getMainHelpPageUrl() {
        return getClass().getClassLoader().getResource("freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/slideShow/help");
    }
    
    protected void removeUnnecessaryExternalElementFiles(boolean originalElements) {
        File directoryToClean;
        List learningUnitViewElements;
        if (originalElements) {
            directoryToClean = learningUnitViewElementsManager.getLearningUnitViewOriginalDataDirectory();
            learningUnitViewElements = learningUnitViewElementsManager.getLearningUnitViewOriginalElements();
        } else {
            directoryToClean = learningUnitViewElementsManager.getLearningUnitViewUserDataDirectory();
            learningUnitViewElements = learningUnitViewElementsManager.getLearningUnitViewUserElements();
        }
         List absoluteFilesToKeep = new ArrayList();
        absoluteFilesToKeep.add(new File(directoryToClean, LEARNING_UNIT_VIEW_DATA_FILENAME));
        for (int i = 0; i < learningUnitViewElements.size(); i++) {
            FLGSlideShowElement learningUnitViewElement = (FLGSlideShowElement)learningUnitViewElements.get(i);
            String[] relativePathsToKeep = learningUnitViewElement.getLearningUnitViewElementExternalFilesRelativePaths(learningUnitViewElementsManager);
            if (relativePathsToKeep != null) {
                for (int j = 0; j < relativePathsToKeep.length; j++) {
                    absoluteFilesToKeep.add(new File(directoryToClean, relativePathsToKeep[j]));
                }
            }
            if (learningUnitViewElement.getFolder() && learningUnitViewElement.getAudioFileName()!=null) {
            	absoluteFilesToKeep.add(new File(directoryToClean, learningUnitViewElement.getAudioFileName()));
            }
        }
        FLGFileUtility.cleanDirectory(directoryToClean, (File[]) absoluteFilesToKeep.toArray(new File[]{}));
    }
    
    
    public boolean getFolderImportComponent() {
    	return false;
    }
    
    public boolean getFolderComponent() {
    	return false;
    }
    
    /**
     * Method for setting type for imported folder files in learning unit view element descriptor.
     * @param <code>java.util.List</code> importedFiles: folder, image, audio, image, audio...
     * @param <code>java.util.List</code> newElements
     * @param <code>String</code> fileType
     */
    public void setElementSpecififcFileProperties(java.util.List importedFiles, java.util.List newElements, String fileType) {
    	String[] newElementIds = new String[newElements.size()];
	    // check if there are audio files included
	    // get file extension of second file
	    if(importedFiles.size() > 3) {	
	    	File fileToCheck = (File) importedFiles.get(2);
	    	String fileExtension = FLGFileUtility.getExtension(fileToCheck.getName()); 
	        if (!fileExtension.equals("mp2")
	        		&& !fileExtension.equals("wav")
	        		&& !fileExtension.equals("mp3")
	        		&& !fileExtension.equals("midi")) {
	        	insertImages(importedFiles, newElements, fileType);
		    } else { 
		    	mergeAudioAndImageFiles(importedFiles, newElements, newElementIds);
	        }
    	} else {
    		insertImages(importedFiles, newElements, fileType);
    	}
        learningUnitViewElementsManager.setModified(true);
        FSLLearningUnitViewEvent event = FSLLearningUnitViewEvent.createElementsCreatedEvent(
        getLearningUnitViewManagerId(),newElementIds);
        fireLearningUnitViewEvent(event);
    }
    
    private void mergeAudioAndImageFiles(java.util.List importedFiles, java.util.List newElements, String[] newElementIds) {
    	// set file type and copy file into learning unit directory
        int fileIndex = 0;
        for (int i = 0; i < newElements.size(); i++) {
            // get image and corresponding audio file from list 
            FLGSlideShowElement element = (FLGSlideShowElement)newElements.get(i);
            File importedImageFile = (File) importedFiles.get(fileIndex);
            File importedAudioFile = (File) importedFiles.get(fileIndex+1);
            newElementIds[i] = element.getId();
            if(!element.getFolder()) {
            	boolean isWaitForAudioEnd = ((FLGSlideShowElementsStructurePanel) elementsStructurePanel).getIsWaitForAudioEnd();
            	int delayTime = ((FLGSlideShowElementsStructurePanel) elementsStructurePanel).getDelayTime();
                element.setWaitForAudioEnd(isWaitForAudioEnd);
                if (!isWaitForAudioEnd) {
                    if(delayTime == 0) {
                    	element.setDelayTime(3000);
                    } else {
                    	element.setDelayTime(delayTime);
                    }
                }
                element.setType(FLGSlideShowElement.ELEMENT_TYPE_SLIDE);
            	// --- copy files ---
                // image file
            	String sourceMediaFileExtension = "." + FLGFileUtility.getExtension(importedImageFile.getName());
            	File destinationFile = learningUnitViewElementsManager.createNewFileForElementsExternalData("image",
                sourceMediaFileExtension, element.getId());
                element.setImageFileName(destinationFile.getName());
                FLGFileUtility.copyFile(importedImageFile, destinationFile);
                // audio file
                sourceMediaFileExtension = "." + FLGFileUtility.getExtension(importedAudioFile.getName());
                destinationFile = learningUnitViewElementsManager.createNewFileForElementsExternalData("audio",
                sourceMediaFileExtension, element.getId());
                element.setAudioFileName(destinationFile.getName());
                FLGFileUtility.copyFile(importedAudioFile, destinationFile);
            }
            fileIndex = fileIndex + 2;
        }
    }
    
    private void insertImages(java.util.List impFiles, java.util.List newElem, String fileType) {
    	System.out.println("FLGSlideShowManager: Inserting " + Integer.valueOf(impFiles.size() - 1) +  " images...");
	    final java.util.List newElements = newElem;
	    final java.util.List importedFiles = impFiles;
    	// set file type and copy (scaled) image file into learning unit directory
        FLGUIUtilities.startLongLastingOperation();
        Thread copyThread = new Thread() {
        	public void run() {
	    		FLGImageProgressDialog progressDialog = new FLGImageProgressDialog("title",0,newElements.size()*10,0,
                    getClass().getClassLoader().getResource("freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/slideShow/images/fsl.gif"),
                    (Color)UIManager.get("FSLColorBlue"),(Color)UIManager.get("FSLColorRed"),
                    internationalization.getString("slideShow.setElementSpecififcFileProperties.progressDialog"));
        		int fileIndex = 0;
        		for (int i = 0; i < newElements.size(); i++) {
		            FLGSlideShowElement element = (FLGSlideShowElement) newElements.get(i);
		            File importedImageFile = (File) importedFiles.get(fileIndex);
		            if(!element.getFolder()) {
		            	boolean isWaitForAudioEnd = ((FLGSlideShowElementsStructurePanel) elementsStructurePanel).getIsWaitForAudioEnd();
		            	int delayTime = ((FLGSlideShowElementsStructurePanel) elementsStructurePanel).getDelayTime();
		                element.setWaitForAudioEnd(isWaitForAudioEnd);
		                if (!isWaitForAudioEnd) {
		                    if(delayTime <= 0) {
		                    	element.setDelayTime(3000);
		                    } else {
		                    	element.setDelayTime(delayTime);
		                    }
		                }
		                element.setType(FLGSlideShowElement.ELEMENT_TYPE_SLIDE);
		            	String sourceMediaFileExtension = "." + FLGFileUtility.getExtension(importedImageFile.getName());
		            	File destinationFile = learningUnitViewElementsManager.createNewFileForElementsExternalData("image", sourceMediaFileExtension, element.getId());
		                element.setImageFileName(destinationFile.getName());
		                // scaling selected ?
		                if (((FLGSlideShowElementsStructurePanel)elementsStructurePanel).scaledImages()) {
			                if (!importedImageFile.isDirectory()) {
			                	// load and scale image
				                URL imageUrl = null;
				                try {
				                	System.out.println("Image: " + importedImageFile.getName());
				                	imageUrl = importedImageFile.toURL();
				                } catch (Exception e) { e.printStackTrace(); }
				                Image image = scaleImage(FLGImageUtility.loadImageAndWait(imageUrl), 1024, 768);
				                new JPanel().add(new JLabel(new ImageIcon(image)));
				                // save scaled image
				                FLGUIUtilities.saveImage(FLGUIUtilities.createBufferedImage(image),destinationFile.getAbsolutePath());
			                }
		                } else {
		                	// just copy images in original size
		                	FLGFileUtility.copyFile(importedImageFile, destinationFile);
		                }
		            }
		            progressDialog.setBarValue((i+1)*10);
		            fileIndex++;
		        }
		        progressDialog.dispose();
        	}
        };
        copyThread.start();
        FLGUIUtilities.stopLongLastingOperation();
    }
    
    private Image scaleImage(Image imageToScale, int w, int h) {
        Image newImage = imageToScale;
        ImageObserver observer = new ImageObserver() {
            public boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height) {
                return false;
            }
        };
        int height = newImage.getHeight(observer);
        int width  = newImage.getWidth(observer);
        if(imageToScale.getHeight(observer) >= imageToScale.getWidth(observer)) {
            newImage = imageToScale.getScaledInstance(-1, h, Image.SCALE_SMOOTH);
        } else {
            newImage = imageToScale.getScaledInstance(w, -1, Image.SCALE_SMOOTH);
        }
        return newImage;
    }
    
    /**
     * Returns primary activation button.
     * @return <code>FSLLearningUnitViewPrimaryActivationButton</code> primary activation button
     **/
    public FSLLearningUnitViewPrimaryActivationButton getPrimaryActivationButton() {
        return primaryActivationButton;
    }
    
    protected Dispatcher createDispatcher() {
        Dispatcher d = FLGSlideShowDescriptor.newDispatcher();
        d.register(SlideShowDescriptor.class, FLGSlideShowDescriptor.class);
        d.register(ViewElement.class, FLGSlideShowElement.class);
        d.register(ViewElementLink.class, FLGSlideShowElementLink.class);
        d.register(ViewElementLinkTarget.class, FLGSlideShowElementLinkTarget.class);
        return d;
    }
    
    protected FSLLearningUnitViewXMLDocument createLearningUnitViewXMLDocument() {
        return new FLGSlideShowDescriptor();
    }
    
    private Image loadImage(String imageFileName) {
        return FLGImageUtility.loadImageAndWait(getClass().getClassLoader().getResource("freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/slideShow/images/" +
        imageFileName));
    }
    
}
