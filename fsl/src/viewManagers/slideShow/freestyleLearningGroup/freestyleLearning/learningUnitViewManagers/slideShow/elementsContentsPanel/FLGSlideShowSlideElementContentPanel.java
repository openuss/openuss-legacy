/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.elementsContentsPanel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.UIManager;

import com.sun.media.MediaPlayer;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.FSLAbstractLearningUnitViewElementContentPanel;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitVetoableAdapter;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewVetoableAdapter;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.data.xmlBindingSubclasses.FLGSlideShowElement;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.events.learningUnitViewEvent.FLGSlideShowEvent;
import freestyleLearningGroup.independent.gui.FLGImageComponent;
import freestyleLearningGroup.independent.gui.FLGImageUtility;
import freestyleLearningGroup.independent.media.FLGMediaListener;
import freestyleLearningGroup.independent.media.FLGMediaPlayer;

/**
 * FLGSlideShowSlideElementContentPanel.
 * @author Freestyle Learning Group
 */
public class FLGSlideShowSlideElementContentPanel extends FSLAbstractLearningUnitViewElementContentPanel {
    private FLGImageComponent imageComponent;
    // default player
    private FLGMediaPlayer audioPlayer;
    // player for background
    private FLGMediaPlayer audioPlayer2;
    private String activeLearningUnitViewElementId;
    private String currentSlideShowRootElementId;
    private FLGSlideShowThread slideShowThread;
    private boolean activatedBySlideShowThread;
    private boolean isFullScreenMode;
    private FLGSlideShowElement previousElement;
    private int currentSlideIndex = 0;
    private int maxSlideIndex = 0;

    /**
     * Inits FLGSlideShowSlideElementContentPanel.
     * @param <code>FSLLearningUnitViewManager</code> learningUnitViewManager
     * @param <code>FSLLearningUnitEventGenerator</code> learningUnitEventGenerator
     * @param <code>boolean</code> editModeParam
     */
    public void init(FSLLearningUnitViewManager learningUnitViewManager,
        FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editModeParam) {
            audioPlayer = new FLGMediaPlayer();
            audioPlayer.addMediaListener(new FLGSlideShowSlideElementMediaListener());
            audioPlayer2 = new FLGMediaPlayer();
            super.init(learningUnitViewManager, learningUnitEventGenerator, editModeParam);
            learningUnitViewManager.addLearningUnitViewListener(new FLGSlideShowLearningUnitViewAdapter());
            learningUnitEventGenerator.addLearningUnitListener(new FLGSlideShowLearningUnitAdapter());
    }

    /**
     * @return <code>java.awt.Component</code> imageComponent 
     */
    protected java.awt.Component getPrintableComponent() {
        return imageComponent;
    }

    /**
     * @return <code>boolean</code> true if view element is modified by user input
     */
    public boolean isModifiedByUserInput() {
        return false;
    }

    public void saveUserChanges() {}

    /**
     * @return <code>JComponent</code> array with edit tool bar components
     */
    protected JComponent[] getEditToolBarComponents() {
        return null;
    }

    protected void buildIndependentUI() {
        setLayout(new BorderLayout());
        imageComponent = new FLGImageComponent(true);
        add(imageComponent);
    }
    
    /** 
     * @param <code>boolean</code> reloadIfAlreadyLoaded
     */
    protected void buildDependentUI(boolean reloadIfAlreadyLoaded) {
    	setBackground((Color)UIManager.get("FSLMainFrameColor1"));
        boolean contentAvailable = false;
        if (learningUnitViewElementsManager != null && learningUnitViewElementId != null) {
            FLGSlideShowElement learningUnitViewElement =
                (FLGSlideShowElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
            if (learningUnitViewElement != null) {
            	if(learningUnitViewElement.getBackgroundColor() != null) {
            		setBackground(new Color(Integer.valueOf(learningUnitViewElement.getBackgroundColor())));
            	} else {
            		// default color
            		setBackground((Color)UIManager.get("FSLMainFrameColor1"));
            	}
            	if(learningUnitViewElement.getImageFileName() != null) {
            		File imageFile = learningUnitViewElementsManager.resolveRelativeFileName(learningUnitViewElement.getImageFileName(),
            				learningUnitViewElement);
            		try {
            			Image image = FLGImageUtility.loadImageAndWait(imageFile.toURL());
            			if(learningUnitViewElement.hasDoAntialiazing()) {
            				imageComponent.setDoAntialiazing(learningUnitViewElement.getDoAntialiazing());
            			} else {
            				imageComponent.setDoAntialiazing(false);
            			}
            			imageComponent.setImage(image);
            			contentAvailable = true;
            		} catch (Exception e) {
            			System.out.println("FLGSlideShowSlideElementContentPanel: " + e);
                	}
            	}
            }
        }
        if (!contentAvailable) imageComponent.setImage(null);
    }

    private void play() {        
        if (slideShowThread != null && slideShowThread.isPausing()) {
            slideShowThread.continueShow();
        } else {
            if (learningUnitViewElementId != null) {
                currentSlideShowRootElementId = activeLearningUnitViewElementId;
                slideShowThread = new FLGSlideShowThread();
                slideShowThread.start();
            }
        }
    }

    private void pause() {
        if (slideShowThread != null) slideShowThread.pauseShow();
    }

    private void stop() {
        currentSlideShowRootElementId = null;
        if (slideShowThread != null) slideShowThread.stopShow();
    }

    private void previousSlide() {
        if (slideShowThread != null) slideShowThread.previousSlide();
    }

    private void nextSlide() {
        if (slideShowThread != null) slideShowThread.nextSlide();
    }

    class FLGSlideShowThread extends Thread {
        private boolean isPausing = false;
        private boolean isStopped;
        private boolean gotoNextSlideButtonPressed;
        private boolean gotoPreviousSlideButtonPressed;
        private Vector slideShowSlideElementIds;

        public void pauseShow() {
        	isPausing = true;
        	isStopped = false;
        	if(audioPlayer2.isPlaying()) {
        		audioPlayer2.pause();
        	}
        	if(audioPlayer.isPlaying()) {
        		audioPlayer.pause();
        	}
        }

        public void continueShow() {
        	isPausing = false;
        	isStopped = false;
        	if (audioPlayer.isPausing()) {
        		audioPlayer.start();
        	}
  	    	if (audioPlayer2.isPausing()) {
  	    		audioPlayer2.start();
  	    	}
        }

        public void stopShow() {
            isStopped = true;
            isPausing = false;
            if(audioPlayer.isPlaying() || audioPlayer.isPausing()) {
            	audioPlayer.stop();
            }
            if(audioPlayer2.isPlaying() || audioPlayer2.isPlaying()) {
             	audioPlayer2.stop();
            }
        }

        public void previousSlide() {
            gotoPreviousSlideButtonPressed = true;
            if (audioPlayer2.isPlaying()) audioPlayer2.stop();
        }

        public void nextSlide() {
            if (audioPlayer2.isPlaying()) audioPlayer2.stop();
            gotoNextSlideButtonPressed = true;
        }

        public boolean isPausing() {
            return isPausing;
        }

        public void run() {
        	// get slide show elements
        	slideShowSlideElementIds = getSlideShowSlideElementIds(currentSlideShowRootElementId);
            // get amount of elements to play
        	maxSlideIndex = slideShowSlideElementIds.size();
        	
        	//System.out.println("maxSlideIndex: " + maxSlideIndex);
        	
        	// play slides
        	for (currentSlideIndex = 0; currentSlideIndex < slideShowSlideElementIds.size(); currentSlideIndex++) {
        		
        		//System.out.println("currentSlideIndex: " + currentSlideIndex);
        		
        		// maybe user did not choose wait for audio end -> close audio 2 before loading next element
        		if (audioPlayer2.isPlaying()) {
        			audioPlayer2.stop();
        		}
        		// get next element
        		FLGSlideShowElement currentSlideShowSlideElement = (FLGSlideShowElement)
        			learningUnitViewElementsManager.getLearningUnitViewElement((String)slideShowSlideElementIds.get(currentSlideIndex), false);
	            // activate element
        		activateSlideShowSlideElement(currentSlideShowSlideElement.getId());
	            // get audio file and set play time
        		if (currentSlideShowSlideElement.getAudioFileName() != null) {
	            	playAudio(currentSlideShowSlideElement);
	            }
	            if (currentSlideShowSlideElement.hasWaitForAudioEnd() && currentSlideShowSlideElement.getWaitForAudioEnd()) {
	            	// slide has wait for audio end
	            	if (audioPlayer2.isPlaying()) { 
	            		audioPlayer2.waitForEnd(true); 
	            	} else if (audioPlayer.isPlaying()) { 
	            		audioPlayer.waitForEnd(true); 
	            	}
                    while (isPausing) {
                      	try { Thread.sleep(10); }
                        catch (Exception e) {}
                    }
                } else {
		        	// slide has delay time
		        	if (currentSlideShowSlideElement.hasDelayTime()) {
		        		int iterations = currentSlideShowSlideElement.getDelayTime() / 100;
		                for (int i = 0; i < iterations; i++) {
		                	if (isStopped || gotoNextSlideButtonPressed || gotoPreviousSlideButtonPressed) break;
		                    
		                	try { Thread.sleep(100); }
		                    catch (Exception e) {}
		                        
		                    while (isPausing) {
		                      	try { Thread.sleep(10); }
		                        catch (Exception e) {}
		                    }
		                }
		            }
	            }
	            if (isStopped) break;
	            if (gotoPreviousSlideButtonPressed) {
	            	if (currentSlideIndex > 0) currentSlideIndex -= 2;
	            }
	            gotoPreviousSlideButtonPressed = false;
	            gotoNextSlideButtonPressed = false;
            }
        	// all slides are shown -> stop players and fire event
        	if(audioPlayer.isPlaying()) {
        		audioPlayer.stop();
        	}
        	if(audioPlayer2.isPlaying()) {
        		audioPlayer2.stop();
        	}
            FSLLearningUnitViewEvent slideShowEvent = FLGSlideShowEvent.createViewSpecificEvent(FLGSlideShowEvent.SLIDE_SHOW_STOPPED);
            learningUnitViewManager.fireLearningUnitViewEvent(slideShowEvent);
        }

        private Vector getSlideShowSlideElementIds(String slideShowRootElementId) {
            Vector slideShowSlideElementIds = new Vector();
            FLGSlideShowElement slideShowSlideElement = (FLGSlideShowElement) learningUnitViewElementsManager.getLearningUnitViewElement(slideShowRootElementId, false);
            if (slideShowSlideElement.getFolder() && slideShowSlideElement.getAudioFileName() != null) {
            	// folder with music
            	slideShowSlideElementIds.add(slideShowRootElementId);
            	
            	//System.out.println("adding folder: " + slideShowSlideElement.getTitle());
            	
            	slideShowSlideElement = getNextSlideShowSlideElement(slideShowSlideElement);
            } else if (!slideShowSlideElement.getType().equals(FLGSlideShowElement.ELEMENT_TYPE_SLIDE)) {
            	// slide 
                slideShowSlideElement = getNextSlideShowSlideElement(slideShowSlideElement);
            }
            while (slideShowSlideElement != null) {
            	// get children for element
            	
            	//System.out.println("adding slide: " + slideShowSlideElement.getTitle() );
                
            	slideShowSlideElementIds.add(slideShowSlideElement.getId());
                slideShowSlideElement = getNextSlideShowSlideElement(slideShowSlideElement);
            }
            return slideShowSlideElementIds;
        }

        private void activateSlideShowSlideElement(String elementId) {
            
            activatedBySlideShowThread = true;
            // create activate event for selected element
            FSLLearningUnitViewEvent event = FSLLearningUnitViewEvent.createElementActivatedEvent(
            		learningUnitViewManager.getLearningUnitViewManagerId(), elementId, null, false);
            
            learningUnitViewManager.fireLearningUnitViewEvent(event);
            // create event to update status panel etc.
            
            FLGSlideShowEvent slideShowEvent = (FLGSlideShowEvent)FLGSlideShowEvent.createViewSpecificEvent(
            		FLGSlideShowEvent.SLIDE_SHOW_SLIDE_DISPLAYED);

         
            
            slideShowEvent.setCurrentSlideIndex(currentSlideIndex);
            

            
            slideShowEvent.setMaxSlideIndex(slideShowSlideElementIds.size() - 1);
            
       
            
            
            learningUnitViewManager.fireLearningUnitViewEvent(slideShowEvent);
            // if fullScreenMode update full screen panel
            if (isFullScreenMode) {
            	FLGSlideShowEvent slideShowEvent2 = (FLGSlideShowEvent)FLGSlideShowEvent.createViewSpecificEvent(
            		FLGSlideShowEvent.UPDATE_FULLSCREEN_WINDOW);
            	learningUnitViewManager.fireLearningUnitViewEvent(slideShowEvent2);
            }
            activatedBySlideShowThread = false;
        }

        private FLGSlideShowElement getNextSlideShowSlideElement(FLGSlideShowElement currentSlideShowSlideElement) {
            FLGSlideShowElement nextSlideShowSlideElement = null;
            String nextSlideId = learningUnitViewElementsManager.getNextElementIdInDepthFirstOrder(currentSlideShowSlideElement.getId());
            if (nextSlideId != null) {
                nextSlideShowSlideElement = (FLGSlideShowElement)learningUnitViewElementsManager.getLearningUnitViewElement(nextSlideId, false);
                // check if element hast image to present
                while (nextSlideShowSlideElement.getImageFileName() == null) {
                	nextSlideId = learningUnitViewElementsManager.getNextElementIdInDepthFirstOrder(nextSlideId);
                	if (nextSlideId == null) {
                        break;
                    }
                    nextSlideShowSlideElement = (FLGSlideShowElement)learningUnitViewElementsManager.getLearningUnitViewElement(nextSlideId, false);
                }
                if (nextSlideId == null 
                		|| !learningUnitViewElementsManager.isLearningUnitViewElementAncestor(currentSlideShowRootElementId, nextSlideId)) {
                	nextSlideShowSlideElement = null;
                }
            }
            return nextSlideShowSlideElement;
        }

        private void playAudio(FLGSlideShowElement currentSlideShowSlideElement) {
            	try {
                    if (audioPlayer.isPlaying()) {
                    	// open second audio stream
                    	if(audioPlayer2.isPlaying()) {
                    		audioPlayer2.stop();
                    	}
                    	if (currentSlideShowSlideElement.hasVolume()) {
                    		audioPlayer2.setVolume(currentSlideShowSlideElement.getVolume());
                    	}
                    	if (currentSlideShowSlideElement.hasRepeatAudio()) {
                    		audioPlayer2.setPlaybackLoop(currentSlideShowSlideElement.getRepeatAudio());
                    	} else {
                    		audioPlayer2.setPlaybackLoop(false);
                    	}
                        File audioFile = learningUnitViewElementsManager.resolveRelativeFileName(currentSlideShowSlideElement.getAudioFileName(), currentSlideShowSlideElement);
                    	if(audioFile != null) {
                    		audioPlayer2.loadMedia(audioFile);
                    		audioPlayer2.start();
                    	}
                    } else {
                    	// open audio stream for single slide or for folder
                    	if(audioPlayer.isPlaying()) {
                    		audioPlayer.stop();
                    	}
                    	if(audioPlayer2.isPlaying()) {
                    		audioPlayer2.stop();
                    	}
                    	if (currentSlideShowSlideElement.hasVolume()) {
                    		audioPlayer.setVolume(currentSlideShowSlideElement.getVolume());
                    	}
                    	if (currentSlideShowSlideElement.hasRepeatAudio()) {
                    		audioPlayer.setPlaybackLoop(currentSlideShowSlideElement.getRepeatAudio());
                    	} else {
                    		audioPlayer.setPlaybackLoop(false);
                    	}
                        File audioFile = learningUnitViewElementsManager.resolveRelativeFileName(currentSlideShowSlideElement.getAudioFileName(), currentSlideShowSlideElement);
                        if(audioFile != null) {
                        	audioPlayer.loadMedia(audioFile);    
                        	audioPlayer.start();
                        }
                        //System.out.println("FLGSlideShowElementContentPanel, playAudio: AudioPlayer 1 started.");
                    }
                } catch (Exception e) {
                    System.out.println("FLGSlideShowElementContentPanel: " + e);
                }
        }
    }

    /**
     * Sets boolean to indicate fullscreen mode.
     * @param <code>boolean</code> isFullScreen
     */
    public void setFullScreenMode(boolean isFullScreen) {
		isFullScreenMode = isFullScreen;
	}

    class FLGSlideShowSlideElementMediaListener implements FLGMediaListener {
        public void endOfMediaReached() {
        	if(currentSlideIndex >= maxSlideIndex) {
        		audioPlayer.stop();
        	} 
        }
    }

    class FLGSlideShowLearningUnitViewAdapter extends FSLLearningUnitViewVetoableAdapter {
        public void learningUnitViewElementActivated(FSLLearningUnitViewEvent event) {
            activeLearningUnitViewElementId = event.getActiveLearningUnitViewElementId();
            learningUnitViewElementId = activeLearningUnitViewElementId;
            if (!activatedBySlideShowThread && slideShowThread != null) {
               	String activeId = learningUnitViewManager.getActiveLearningUnitViewElementId();
            	if(activeId != null) {
            		FLGSlideShowElement learningUnitViewElement =
            			(FLGSlideShowElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
            		if (learningUnitViewElement != null) {
            			if(learningUnitViewElement.getBackgroundColor() != null) {
            				Color c = new Color(Integer.valueOf(learningUnitViewElement.getBackgroundColor()));
            				setBackground(c);
            			} else {
            				// repaint content panel with default background
                    		setBackground((Color)UIManager.get("FSLMainFrameColor1"));
            			}
            		}
            	} else {
                 	// repaint content panel with default background
            		setBackground((Color)UIManager.get("FSLMainFrameColor1"));
            	}
            }
        }

        public void learningUnitViewDeactivated(FSLLearningUnitViewEvent event) {
            if (!activatedBySlideShowThread && slideShowThread != null) {
                slideShowThread.stopShow();
            }
        }
            
        public void learningUnitViewSpecificEventOccurred(FSLLearningUnitViewEvent e) {
            FLGSlideShowEvent slideShowEvent = (FLGSlideShowEvent)e;
            int slideShowEventType = slideShowEvent.getEventSpecificType();
            if (slideShowEventType == FLGSlideShowEvent.SLIDE_SHOW_PLAY_BUTTON_PRESSED) {
                play();
            }
            else if (slideShowEventType == FLGSlideShowEvent.SLIDE_SHOW_PAUSE_BUTTON_PRESSED) {
                pause();
            }
            else if (slideShowEventType == FLGSlideShowEvent.SLIDE_SHOW_STOP_BUTTON_PRESSED) {
                stop();
            }
            else if (slideShowEventType == FLGSlideShowEvent.SLIDE_SHOW_NEXT_SLIDE_BUTTON_PRESSED) {
            	nextSlide();
            }
            else if (slideShowEventType == FLGSlideShowEvent.SLIDE_SHOW_PREVIOUS_SLIDE_BUTTON_PRESSED) {
                previousSlide();
            }
        }
    }
    
    class FLGSlideShowLearningUnitAdapter extends FSLLearningUnitVetoableAdapter {
        public void learningUnitEditModeChanged(FSLLearningUnitEvent event) {
        	stop();
        }
    }
}
