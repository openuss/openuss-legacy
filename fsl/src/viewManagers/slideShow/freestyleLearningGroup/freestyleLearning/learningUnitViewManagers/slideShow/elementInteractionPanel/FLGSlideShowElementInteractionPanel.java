/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.elementInteractionPanel;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.elementInteractionPanel.FSLAbstractLearningUnitViewElementInteractionPanel;
import freestyleLearning.learningUnitViewAPI.elementInteractionPanel.FSLLearningUnitViewElementInteractionButton;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitVetoableAdapter;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewAdapter;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEvent;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.events.learningUnitViewEvent.FLGSlideShowEvent;
import freestyleLearningGroup.independent.gui.FLGImageUtility;
import freestyleLearningGroup.independent.util.FLGInternationalization;

/**
 * FLGSlideShowElementInteractionPanel.
 * @author Freestyle Learning Group
 */
public class FLGSlideShowElementInteractionPanel extends FSLAbstractLearningUnitViewElementInteractionPanel {
    private FLGInternationalization internationalization;
    private FSLLearningUnitViewElementInteractionButton playButton;
    private FSLLearningUnitViewElementInteractionButton pauseButton;
    private FSLLearningUnitViewElementInteractionButton stopButton;
    private FSLLearningUnitViewElementInteractionButton nextSlideButton;
    private FSLLearningUnitViewElementInteractionButton previousSlideButton;
    private boolean isPlaying;
    private boolean isEditMode = false;

    /**
     * Constructor.
     */
    public FLGSlideShowElementInteractionPanel() {
    	setFullScreenModeAllowed(true);
        internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.elementInteractionPanel.internationalization",
            getClass().getClassLoader());
        playButton = new FSLLearningUnitViewElementInteractionButton(loadImage("buttonPlay.gif"));
        playButton.setToolTipText(internationalization.getString("button.play.toolTipText"));
        pauseButton = new FSLLearningUnitViewElementInteractionButton(loadImage("buttonPause.gif"));
        pauseButton.setToolTipText(internationalization.getString("button.pause.toolTipText"));
        stopButton = new FSLLearningUnitViewElementInteractionButton(loadImage("buttonStop.gif"));
        stopButton.setToolTipText(internationalization.getString("button.stop.toolTipText"));
        previousSlideButton = new FSLLearningUnitViewElementInteractionButton(loadImage("buttonPreviousSlide.gif"));
        previousSlideButton.setToolTipText(internationalization.getString("button.previousSlide.toolTipText"));
        nextSlideButton = new FSLLearningUnitViewElementInteractionButton(loadImage("buttonNextSlide.gif"));
        nextSlideButton.setToolTipText(internationalization.getString("button.nextSlide.toolTipText"));
        enableButtons(false);
        playButton.setEnabled(true);
        playButton.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    play();
                }
            });
        pauseButton.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    pause();
                }
            });
        stopButton.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    stop();
                }
            });
        previousSlideButton.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    previousSlide();
                }
            });
        nextSlideButton.addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    nextSlide();
                }
            });
    }

    public void init(FSLLearningUnitViewManager learningUnitViewManager, FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
            super.init(learningUnitViewManager, learningUnitEventGenerator, editMode);
            learningUnitViewManager.addLearningUnitViewListener(new FLGSlideShowElementInteractionPanel_LearningUnitViewAdapter());
            learningUnitEventGenerator.addLearningUnitListener(new FLGSlideShowLearningUnitAdapter());
    }

    protected void buildIndependentUI() {
        super.buildIndependentUI();
    }

    protected void buildDependentUI() {
        super.buildDependentUI();
        if (learningUnitViewElementsManager != null) {
            if (!isPlaying) resetButtonStatus();
        } else { enableButtons(false); }
    }
    
    private void resetButtonStatus() {
        if (activeLearningUnitViewElementId != null && !isPlaying) {
        	playButton.setEnabled(!isEditMode);
        	enableButtons(false);
        } 
        
        if(activeLearningUnitViewElementId == null) {
        	playButton.setEnabled(false);
        	enableButtons(false);
        }
    }

    private void enableButtons(boolean enabled) {
        pauseButton.setEnabled(enabled);
        stopButton.setEnabled(enabled);
        nextSlideButton.setEnabled(enabled);
        previousSlideButton.setEnabled(enabled);
    }

    protected void insertViewSpecificInteractionComponents() {
        add(playButton);
        add(pauseButton);
        add(stopButton);
        //add(previousSlideButton);
        //add(nextSlideButton);
    }

    private void play() {
        isPlaying = true;
        playButton.setEnabled(false);
        enableButtons(true);
        FSLLearningUnitViewEvent slideShowEvent = FLGSlideShowEvent.createViewSpecificEvent(FLGSlideShowEvent.SLIDE_SHOW_PLAY_BUTTON_PRESSED);
        learningUnitViewManager.fireLearningUnitViewEvent(slideShowEvent);
    }

    private void pause() {
        isPlaying = false;
        playButton.setEnabled(true);
        pauseButton.setEnabled(false);
        stopButton.setEnabled(true);
        previousSlideButton.setEnabled(false);
        nextSlideButton.setEnabled(false);
        FSLLearningUnitViewEvent slideShowEvent = FLGSlideShowEvent.createViewSpecificEvent(FLGSlideShowEvent.SLIDE_SHOW_PAUSE_BUTTON_PRESSED);
        learningUnitViewManager.fireLearningUnitViewEvent(slideShowEvent);
    }

    private void stop() {
        isPlaying = false;
        playButton.setEnabled(true);
        enableButtons(false);
        FSLLearningUnitViewEvent slideShowEvent = FLGSlideShowEvent.createViewSpecificEvent(FLGSlideShowEvent.SLIDE_SHOW_STOP_BUTTON_PRESSED);
        learningUnitViewManager.fireLearningUnitViewEvent(slideShowEvent);
    }

    private void previousSlide() {
        FSLLearningUnitViewEvent slideShowEvent = FLGSlideShowEvent.createViewSpecificEvent(FLGSlideShowEvent.SLIDE_SHOW_PREVIOUS_SLIDE_BUTTON_PRESSED);
        learningUnitViewManager.fireLearningUnitViewEvent(slideShowEvent);
    }

    private void nextSlide() {
        FSLLearningUnitViewEvent slideShowEvent = FLGSlideShowEvent.createViewSpecificEvent(FLGSlideShowEvent.SLIDE_SHOW_NEXT_SLIDE_BUTTON_PRESSED);
        learningUnitViewManager.fireLearningUnitViewEvent(slideShowEvent);
    }

    private Image loadImage(String imageFileName) {
        return FLGImageUtility.loadImageAndWait(getClass().getResource("images/" + imageFileName));
    }

    class FLGSlideShowElementInteractionPanel_LearningUnitViewAdapter extends FSLLearningUnitViewAdapter {
        public void learningUnitViewActivated(FSLLearningUnitViewEvent event) {
            resetButtonStatus();
       }
        
        public void learningUnitViewDeactivated(FSLLearningUnitViewEvent event) {
            isPlaying = false;
        }
        
        public void learningUnitViewElementActivated(FSLLearningUnitViewEvent event) {
            if (!isPlaying) { resetButtonStatus(); }
            fullScreenModeButton.setEnabled(!isEditMode);
        }

        public void learningUnitViewSpecificEventOccurred(FSLLearningUnitViewEvent e) {
            FLGSlideShowEvent slideShowEvent = (FLGSlideShowEvent)e;
            int slideShowEventType = slideShowEvent.getEventSpecificType();
            if (slideShowEventType == FLGSlideShowEvent.SLIDE_SHOW_STOPPED) {
                playButton.setEnabled(true);
                enableButtons(false);
            }
            if (slideShowEventType == FLGSlideShowEvent.SLIDE_SHOW_SLIDE_DISPLAYED) {
                previousSlideButton.setEnabled(slideShowEvent.getCurrentSlideIndex() > 0);
                nextSlideButton.setEnabled(slideShowEvent.getCurrentSlideIndex() < slideShowEvent.getMaxSlideIndex());
            }
        }
    }
    
    class FLGSlideShowLearningUnitAdapter extends FSLLearningUnitVetoableAdapter {
        public void learningUnitEditModeChanged(FSLLearningUnitEvent event) {
        	stop();
        	isEditMode = event.isEditMode();
        	playButton.setEnabled(!isEditMode);
        	fullScreenModeButton.setEnabled(!isEditMode);
        }
    }
}
