/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.elementsContentsPanel;

import java.awt.Color;

import javax.swing.JPanel;
import javax.swing.UIManager;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElementsManager;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.FSLAbstractLearningUnitViewElementContentPanel;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.FSLAbstractLearningUnitViewElementsContentsPanel;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewVetoableAdapter;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.data.xmlBindingSubclasses.FLGSlideShowElement;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.slideShow.events.learningUnitViewEvent.FLGSlideShowEvent;

/**
 * FLGSlideShowElementsContentsPanel.
 * @author Freestyle Learning Group
 */
public class FLGSlideShowElementsContentsPanel extends FSLAbstractLearningUnitViewElementsContentsPanel {
    private FLGSlideShowSlideElementContentPanel slideElementContentPanel;

    /**
     * Inits FLGSlideShowElementsContentsPanel.
     * @param <code>FSLLearningUnitViewManager</code> learningUnitViewManager
     * @param <code>FSLLearningUnitEventGenerator</code> learningUnitEventGenerator
     * @param <code>boolean</code> editMode
     */
    public void init(FSLLearningUnitViewManager learningUnitViewManager,
        FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
            super.init(learningUnitViewManager, learningUnitEventGenerator, editMode);
            slideElementContentPanel = new FLGSlideShowSlideElementContentPanel();
            slideElementContentPanel.init(learningUnitViewManager, learningUnitEventGenerator, editMode);
            learningUnitViewManager.addLearningUnitViewListener(new FLGSlideShowLearningUnitViewAdapter());
    }

    /**
     * Sets learningUnitViewElementsManager.
     * @param <code>FSLLearningUnitViewElementsManager</code> learningUnitViewElementsManager
     */
    public void setLearningUnitViewElementsManager(FSLLearningUnitViewElementsManager learningUnitViewElementsManager) {
    	slideElementContentPanel.setLearningUnitViewElementsManager(learningUnitViewElementsManager);
        super.setLearningUnitViewElementsManager(learningUnitViewElementsManager);
    }

    /**
     * Updates UI from active content panel.
     */
    public void updateUI() {
    	if (slideElementContentPanel != null) slideElementContentPanel.updateUI();
        super.updateUI();
    }

    /**
     * Returns content panel to learning unit view element id.
     * @param <code>int</code> index
     * @param <code>String<code> learningUnitViewElementId 
     */
    protected FSLAbstractLearningUnitViewElementContentPanel getElementContentPanel(int index, String learningUnitViewElementId) {
            FLGSlideShowElement learningUnitViewElement =
                (FLGSlideShowElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
            if (learningUnitViewElement != null) {
                if (learningUnitViewElement.getFolder()) {
                    return null;
                } else {
                	slideElementContentPanel.setFullScreenMode(fullScreenMode);
                    return slideElementContentPanel;
                }
            }
            return null;
    }
   
    class FLGSlideShowLearningUnitViewAdapter extends FSLLearningUnitViewVetoableAdapter {
    	// updates full screen panel in full screen mode   	
        public void learningUnitViewSpecificEventOccurred(FSLLearningUnitViewEvent event) {
            FLGSlideShowEvent slideShowEvent = (FLGSlideShowEvent)event;
            if (slideShowEvent.getEventSpecificType() == FLGSlideShowEvent.UPDATE_FULLSCREEN_WINDOW) {
            	JPanel contentPanel = (JPanel) fullScreenWindow.getContentPane().getComponent(0);
               	fullScreenWindow.remove(contentPanel);
               	contentPanel.removeAll();
                contentPanel.add(slideElementContentPanel);
              	fullScreenWindow.getContentPane().add(contentPanel);
              	fullScreenWindow.setVisible(true);
            }
            if (slideShowEvent.getEventSpecificType() == FLGSlideShowEvent.SLIDE_SHOW_PLAY_BUTTON_PRESSED) {
            	slideElementContentPanel.setFullScreenMode(false);
            }
        }
    }
}
