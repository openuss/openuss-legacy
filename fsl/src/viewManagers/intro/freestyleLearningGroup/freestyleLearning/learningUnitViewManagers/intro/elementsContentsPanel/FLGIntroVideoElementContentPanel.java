/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.intro.elementsContentsPanel;

import java.awt.Color;
import java.awt.GridLayout;
import java.io.File;
import java.util.*;
import javax.swing.JComponent;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.FSLAbstractLearningUnitViewElementContentPanel;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewVetoableAdapter;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.intro.data.xmlBindingSubclasses.FLGIntroElement;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.intro.events.learningUnitViewEvent.FLGIntroViewEvent;
import freestyleLearningGroup.independent.gui.FLGUIUtilities;
import freestyleLearningGroup.independent.media.FLGMediaException;
import freestyleLearningGroup.independent.media.FLGMediaListener;
import freestyleLearningGroup.independent.media.FLGMediaPlayer;

public class FLGIntroVideoElementContentPanel extends FSLAbstractLearningUnitViewElementContentPanel {
    private FLGMediaPlayer videoPlayer;
    private FSLLearningUnitViewManager learningUnitViewManager;
    private String lastLoadedLearningUnitViewElementId;
    private boolean scaleToFit = false;
    private boolean paused = false;

    public void init(FSLLearningUnitViewManager learningUnitViewManager_local,
        FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
            learningUnitViewManager = learningUnitViewManager_local;
            super.init(learningUnitViewManager, learningUnitEventGenerator, editMode);
            learningUnitViewManager.addLearningUnitViewListener(
                new FLGIntroVideoElementContentPanel_LearningUnitViewAdapter());
    }

    protected java.awt.Component getPrintableComponent() {
        return null;
    }

    protected void setActiveLearningUnitViewElementPanel(boolean active) {
        super.setActiveLearningUnitViewElementPanel(active);
    }

    protected JComponent[] getEditToolBarComponents() {
        return null;
    }

    protected void buildIndependentUI() {
        setOpaque(false);
        setLayout(new GridLayout(1, 1));
    }

    public boolean isModifiedByUserInput() {
        return false;
    }

    public void saveUserChanges() {
    	FLGIntroElement learningUnitViewElement =
            (FLGIntroElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewManager.getActiveLearningUnitViewElementId(), false);
    	learningUnitViewElement.setLastModificationDate(String.valueOf(new Date().getTime()));
    }

    private void loadVideoToCurrentElement() {
        if (learningUnitViewElementsManager != null && learningUnitViewElementId != null) {
            FLGIntroElement learningUnitViewElement =
                (FLGIntroElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
            if (learningUnitViewElement != null) {
                File videoFile = learningUnitViewElementsManager.resolveRelativeFileName(((FLGIntroElement)learningUnitViewElement).getVideoFileName(),
                    learningUnitViewElement);
                try {
                    FLGUIUtilities.startLongLastingOperation();
                    videoPlayer.loadMedia(videoFile);
                    lastLoadedLearningUnitViewElementId = learningUnitViewElementId;
                }
                catch (FLGMediaException me) {
                    System.out.println("FLGIntroVideoElementContentPanel.loadVideoToCurrentElement(): " + me);
                }
                finally {
                    FLGUIUtilities.stopLongLastingOperation();
                }
            }
        }
    }

    protected void buildDependentUI(boolean reloadIfAlreadyLoaded) {
    }

    private void play() {
        Thread timeSetter;
        if(!paused) {
	        removeAll();
	        createPlayer();
	        add(videoPlayer);
        }
        //int actualPlayingTime;
        videoPlayer.start();
        timeSetter = new Thread() {
            public void run() {
                while (videoPlayer.isPlaying()) {
                    SwingUtilities.invokeLater(
                        new Runnable() {
                            public void run() {
                                int time = (int)videoPlayer.getActualPlayingTime();
                                FSLLearningUnitViewEvent introViewEvent =
                                    FLGIntroViewEvent.createViewSpecificEvent(FLGIntroViewEvent.INTRO_VIDEO_PLAYING_TIME_PROGRESS);
                                ((FLGIntroViewEvent)introViewEvent).actualVideoPlayingTime = time;
                                ((FLGIntroViewEvent)introViewEvent).maximumVideoPlayingTime = videoPlayer.getMaximumPlayingTime();
                                learningUnitViewManager.fireLearningUnitViewEvent(introViewEvent);
                            }
                        });
                    try {
                        sleep(1000);
                    }
                    catch (InterruptedException e) {
                        break;
                    }
                }
            }
        };
        timeSetter.start();
    }

    private void createPlayer() {
        if (videoPlayer != null) {
            videoPlayer.stop();
        }
        else {
            videoPlayer = new FLGMediaPlayer();
        }
        videoPlayer.setScaleToFit(scaleToFit);
        // if (lastLoadedLearningUnitViewElementId != learningUnitViewElementId)
        loadVideoToCurrentElement();
        videoPlayer.addMediaListener(
            new FLGMediaListener() {
                public void endOfMediaReached() {
                    FSLLearningUnitViewEvent introViewEvent =
                        FLGIntroViewEvent.createViewSpecificEvent(FLGIntroViewEvent.INTRO_END_OF_VIDEO_REACHED);
                    learningUnitViewManager.fireLearningUnitViewEvent(introViewEvent);
                }
            });
    }

    private void clearPanel() {
        removeAll();
        updateUI();
    }

    class FLGIntroVideoElementContentPanel_LearningUnitViewAdapter extends FSLLearningUnitViewVetoableAdapter {
        public void learningUnitViewSpecificEventOccurred(FSLLearningUnitViewEvent e) {
            FLGIntroViewEvent introViewEvent = (FLGIntroViewEvent)e;
            int introViewEventType = introViewEvent.getEventSpecificType();
            if (videoPlayer != null) {
                if (introViewEventType == FLGIntroViewEvent.INTRO_PLAY_BUTTON_PRESSED) {
 //                    if (paused) {
//                        paused = false;
//                        videoPlayer.start();
//                    }
//                    else {
                        play();
                    //}
                }
                else if (introViewEventType == FLGIntroViewEvent.INTRO_PAUSE_BUTTON_PRESSED) {
                    paused = true;
                    videoPlayer.pause();
                }
                else if (introViewEventType == FLGIntroViewEvent.INTRO_STOP_BUTTON_PRESSED) {
                    (
                        new Thread() {
                            public void run() {
                                videoPlayer.stop();
                            }
                        }).start();
                    clearPanel();
                    paused = false;
                }
                else if (introViewEventType == FLGIntroViewEvent.INTRO_END_OF_VIDEO_REACHED) {
                    (
                        new Thread() {
                            public void run() {
                                videoPlayer.stop();
                            }
                        }).start();
                    clearPanel();
                    paused = false;
                }
            }
        }

        public void learningUnitViewElementActivated(FSLLearningUnitViewEvent event) {
            if (!event.isFullScreenModeChanged()) {
                clearPanel();
                createPlayer();
            }
            else {
                buildIndependentUI();
                removeAll();
                add(videoPlayer);
            }
        }

        public void learningUnitViewFullScreenModeSelected(FSLLearningUnitViewEvent event) {
            if (event.isFullScreenModeRequested()) {
                setOpaque(true);
                setBackground(Color.black);
            }
            else {
                setOpaque(false);
                setBackground((Color)UIManager.get("FSLDefaultHtmlPaneBackground"));
            }
        }

        public void learningUnitViewScaleModeChanged(FSLLearningUnitViewEvent event) {
            scaleToFit = event.isScaleToFit();
            if (videoPlayer != null) {
                videoPlayer.setScaleToFit(scaleToFit);
            }
        }
    }
}
