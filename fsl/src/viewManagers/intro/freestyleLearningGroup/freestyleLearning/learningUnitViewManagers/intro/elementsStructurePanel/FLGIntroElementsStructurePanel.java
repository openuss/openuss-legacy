/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.intro.elementsStructurePanel;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElement;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.elementsStructurePanel.FSLAbstractLearningUnitViewElementsStructurePanel;
import freestyleLearning.learningUnitViewAPI.elementsStructurePanel.dialogs.FSLLearningUnitViewNewAndModifyElementDialogViewSpecificPane;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.intro.data.xmlBindingSubclasses.FLGIntroElement;
import freestyleLearningGroup.independent.gui.FLGMediaFileChooser;
import freestyleLearningGroup.independent.gui.FLGUIUtilities;
import freestyleLearningGroup.independent.util.FLGFileUtility;
import freestyleLearningGroup.independent.util.FLGInternationalization;

public class FLGIntroElementsStructurePanel extends FSLAbstractLearningUnitViewElementsStructurePanel {
    private FLGIntroNewAndModifyDialogViewSpecificPanel learningUnitViewNewAndModifyElementDialogViewSpecificPane;
    private FLGInternationalization internationalization;

    public void init(FSLLearningUnitViewManager learningUnitViewManager,
        FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
            super.init(learningUnitViewManager, learningUnitEventGenerator, editMode);
            internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.intro.elementsStructurePanel.internationalization",
                getClass().getClassLoader());
            learningUnitViewNewAndModifyElementDialogViewSpecificPane = new FLGIntroNewAndModifyDialogViewSpecificPanel();
    }

    public FSLLearningUnitViewNewAndModifyElementDialogViewSpecificPane
        getLearningUnitViewNewAndModifyElementDialogViewSpecificPane() {
            return learningUnitViewNewAndModifyElementDialogViewSpecificPane;
    }

    public void modifyLearningUnitViewElement(FSLLearningUnitViewElement element) {
        FLGIntroElement introElement = (FLGIntroElement)element;
        String introElementID = introElement.getId();
        if (!introElement.getFolder()) {
            introElement.setType("video");
            File sourceVideoFile = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getSourceVideoFile();
            String sourceVideoFileExtension = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getSourceVideoFileExtension();
            File destinationVideoFile = learningUnitViewElementsManager.createNewFileForElementsExternalData("video",
                sourceVideoFileExtension, introElementID);
            if (sourceVideoFile != null) {
                if (!sourceVideoFile.equals(destinationVideoFile)) {
                    FLGUIUtilities.startLongLastingOperation();
                    FLGFileUtility.copyFile(sourceVideoFile, destinationVideoFile);
                    introElement.setVideoFileName(destinationVideoFile.getName());
                    FLGUIUtilities.stopLongLastingOperation();
                }
            }
        }
        else {
            introElement.setType("folder");
            introElement.setVideoFileName("");
        }
    }

    public FSLLearningUnitViewElement createLearningUnitViewElement(String id, String parentId, String title, boolean folder) {
        FLGIntroElement newElement = new FLGIntroElement();
        newElement.setId(id);
        newElement.setParentId(parentId);
        newElement.setTitle(title);
        newElement.setFolder(folder);
        if (!folder) newElement.setType("video");
        else
            newElement.setType("folder");
        if (folder) {
            newElement.setVideoFileName("");
        }
        else {
            File sourceVideoFile = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getSourceVideoFile();
            String sourceVideoFileExtension = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getSourceVideoFileExtension();
            File destinationVideoFile = learningUnitViewElementsManager.createNewFileForElementsExternalData("video",
                sourceVideoFileExtension, id);
            FLGUIUtilities.startLongLastingOperation();
            FLGFileUtility.copyFile(sourceVideoFile, destinationVideoFile);
            newElement.setVideoFileName(destinationVideoFile.getName());
            FLGUIUtilities.stopLongLastingOperation();
        }
        return newElement;
    }

    class FLGIntroNewAndModifyDialogViewSpecificPanel extends JPanel implements
        FSLLearningUnitViewNewAndModifyElementDialogViewSpecificPane {
            private JLabel fileSelectLabel;
            private JButton fileSelectButton;
            private JTextField fileSelectTextField;
            private File videoFile, lastSelectedDir;
            private String videoFileExtension;

            public FLGIntroNewAndModifyDialogViewSpecificPanel() {
                fileSelectLabel = new JLabel(internationalization.getString("label.filename.text"));
                fileSelectTextField = new JTextField("", 20);
                fileSelectButton = new JButton(internationalization.getString("button.label.browse"));
                fileSelectButton.addActionListener(
                    new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            showFileChooserDialog();
                        }
                    });
                setLayout(new FlowLayout());
                add(fileSelectLabel);
                add(fileSelectTextField);
                add(fileSelectButton);
            }

            public boolean overwriteDefaultEntries() {
            	return false;
            }
            
            public void setEnabled(boolean enabled) {
                fileSelectTextField.setEnabled(enabled);
                fileSelectButton.setEnabled(enabled);
            }

            public String verifyInput(FSLLearningUnitViewElement editedLearningUnitViewElement,
                FSLLearningUnitViewElement referenceLearningUnitViewElement, boolean asFolder, int insertPosition) {
                    if (!asFolder) {
                        File fileToVerify = new File(fileSelectTextField.getText());
                        if (fileToVerify.exists()) return null;
                        else
                            return internationalization.getString("label.filename.text") + ": " +
                                internationalization.getString("text.missingValue");
                    }
                    else
                        return null;
            }

            public void setInputFieldsDefaults(FSLLearningUnitViewElement learningUnitViewElement) {
                if (learningUnitViewElement != null) {
                    if (!learningUnitViewElement.getFolder()) {
                        String id = ((FLGIntroElement)learningUnitViewElement).getId();
                        fileSelectTextField.setText("" +
                            learningUnitViewElementsManager.resolveRelativeFileName(((FLGIntroElement)learningUnitViewElement).getVideoFileName(),
                            learningUnitViewElement));
                    }
                    else
                        setEnabled(false);
                }
                else
                    fileSelectTextField.setText("");
            }

            public String getSourceVideoFileExtension() {
                return videoFileExtension;
            }

            public File getSourceVideoFile() {
                return videoFile;
            }

            public void showFileChooserDialog() {
                FLGMediaFileChooser mediaFileChooser = new FLGMediaFileChooser(FLGMediaFileChooser.VIDEO);
                if (mediaFileChooser.showDialog(lastSelectedDir)) {
                    videoFile = mediaFileChooser.getSelectedFile();
                    lastSelectedDir = videoFile.getParentFile();
                    if (videoFile.exists()) {
                        fileSelectTextField.setText(videoFile.getAbsolutePath());
                        videoFileExtension = mediaFileChooser.getFileExtension();
                    }
                }
            }
    }
}
