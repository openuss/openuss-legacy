/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementsContentsPanel;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.LayoutManager2;
import java.util.Vector;

public class FLGCheckUpRelatorLayoutManager implements LayoutManager2 {
	public static final String STARTPOINT_PANE = "startpointPane";

	public static final String ENDPOINT_PANE = "endpointPane";

	public static final String STARTPOINT_BUTTON = "startpointButton";

	public static final String ENDPOINT_BUTTON = "endpointButton";

	private int verticalGap = 10;

	private int horizontalGap = 10;

	private int buttonWidth = 36;

	private int relationsAreaWidth = 100;

	private int minPaneHeight = 36;

	private Vector startPointPanes;

	private Vector startPointButtons;

	private Vector endPointPanes;

	private Vector endPointButtons;

	public FLGCheckUpRelatorLayoutManager() {
		startPointPanes = new Vector();
		startPointButtons = new Vector();
		endPointPanes = new Vector();
		endPointButtons = new Vector();
	}

	public void addLayoutComponent(Component comp, Object constraint) {
		String str = (String) constraint;
		if (str == STARTPOINT_PANE)
			startPointPanes.add(comp);
		if (str == STARTPOINT_BUTTON)
			startPointButtons.add(comp);
		if (str == ENDPOINT_PANE)
			endPointPanes.add(comp);
		if (str == ENDPOINT_BUTTON)
			endPointButtons.add(comp);
	}

	public void layoutContainer(Container target) {
		Insets insets = target.getInsets();
		Component kid;
		int x = insets.left;
		int y = insets.top;
		int totalWidth = target.getSize().width - insets.left - insets.right;
		int paneWidth = (totalWidth - relationsAreaWidth - 2 * buttonWidth) / 2;
		// layout the start points
		for (int i = 0; i < startPointPanes.size(); i++) {
			Component startPointPane = (Component) startPointPanes.get(i);
			int paneHeight = startPointPane.getPreferredSize().height;
			if (minPaneHeight > paneHeight)
				paneHeight = minPaneHeight;
			startPointPane.setBounds(x, y, paneWidth, paneHeight);
			Component startPointButton = (Component) startPointButtons.get(i);
			int buttonHeight = startPointButton.getPreferredSize().height;
			int buttonWidth = startPointButton.getPreferredSize().width;
			startPointButton.setBounds(x + paneWidth + horizontalGap, y,
					buttonWidth, buttonHeight);
			y += startPointPane.getSize().height + verticalGap;
		}
		// layout the end points
		x = insets.left + totalWidth - paneWidth;
		y = insets.top;
		for (int i = 0; i < endPointPanes.size(); i++) {
			Component endPointPane = (Component) endPointPanes.get(i);
			int paneHeight = endPointPane.getPreferredSize().height;
			if (minPaneHeight > paneHeight)
				paneHeight = minPaneHeight;
			endPointPane.setBounds(x, y, paneWidth, paneHeight);
			Component endPointButton = (Component) endPointButtons.get(i);
			int buttonHeight = endPointButton.getPreferredSize().height;
			int buttonWidth = endPointButton.getPreferredSize().width;
			endPointButton.setBounds(x - horizontalGap - buttonWidth, y,
					buttonWidth, buttonHeight);
			y += endPointPane.getSize().height + verticalGap;
		}
	}

	public Dimension preferredLayoutSize(Container target) {
		Dimension preferredSize = new Dimension();
		Insets insets = target.getInsets();
		preferredSize.width = target.getSize().width - insets.left
				- insets.right;
		// determine the height of the start points
		int startPointsPreferredHeight = 0;
		for (int i = 0; i < startPointPanes.size(); i++) {
			Component startPointPane = (Component) startPointPanes.get(i);
			int startPointPanePreferredHeight = startPointPane
					.getPreferredSize().height;
			startPointsPreferredHeight += startPointPanePreferredHeight;
		}
		startPointsPreferredHeight += (startPointPanes.size() - 1)
				* verticalGap;
		// determine the height of the end points
		int endPointsPreferredHeight = 0;
		for (int i = 0; i < endPointPanes.size(); i++) {
			Component endPointPane = (Component) endPointPanes.get(i);
			int endPointPanePreferredHeight = endPointPane.getPreferredSize().height;
			endPointsPreferredHeight += endPointPanePreferredHeight;
		}
		endPointsPreferredHeight += (endPointPanes.size() - 1) * verticalGap;
		preferredSize.height = Math.max(startPointsPreferredHeight,
				endPointsPreferredHeight)
				+ insets.top + insets.bottom;
		return preferredSize;
	}

	public Dimension minimumLayoutSize(Container target) {
		return preferredLayoutSize(target);
	}

	public Dimension maximumLayoutSize(Container target) {
		return preferredLayoutSize(target);
	}

	public void addLayoutComponent(String constraint, Component comp) {
	}

	public void removeLayoutComponent(Component comp) {
		startPointPanes.remove(comp);
		startPointButtons.remove(comp);
		endPointPanes.remove(comp);
		endPointButtons.remove(comp);
	}

	public void invalidateLayout(Container target) {
	}

	public float getLayoutAlignmentX(Container target) {
		return 0.5f;
	}

	public float getLayoutAlignmentY(Container target) {
		return 0.5f;
	}
}
