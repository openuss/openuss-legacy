/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementsContentsPanel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.io.File;
import java.util.*;

import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.text.Element;
import javax.swing.text.html.HTML;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElement;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.FSLAbstractLearningUnitViewElementContentPanel;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitVetoableAdapter;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewVetoableAdapter;
import freestyleLearning.learningUnitViewAPI.util.FSLLearningUnitViewUtilities;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.FLGCheckUpElement;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.FLGCheckUpElementGapText;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.FLGCheckUpElementGapTextGap;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementsContentsPanel.dialogs.FLGCheckUpGapTextGapEditDialog;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.events.learningUnitViewEvent.FLGCheckUpEvent;
import freestyleLearningGroup.independent.gui.FLGEditToolBarButton;
import freestyleLearningGroup.independent.gui.FLGHtmlPane;
import freestyleLearningGroup.independent.gui.FLGHtmlPaneEditButtonsFactory;
import freestyleLearningGroup.independent.gui.FLGHtmlUtilities;
import freestyleLearningGroup.independent.gui.FLGUIUtilities;
import freestyleLearningGroup.independent.util.FLGFileUtility;
import freestyleLearningGroup.independent.util.FLGInternationalization;
import freestyleLearningGroup.independent.util.FLGUtilities;

public class FLGCheckUpGapTextElementContentPanel extends
		FSLAbstractLearningUnitViewElementContentPanel {
	private FLGHtmlPane elementContentHtmlPane;

	private boolean active, checkUpPlaying;

	private JComponent[] editToolBarComponents;

	private FLGCheckUpGapTextGapEditDialog editDialog;

	private FLGInternationalization internationalization;

	private FocusListener inputTagFocusListener;

	private MouseListener inputTagMouseListener;

	private Hashtable answerSelectionHistory;

	private Color defaultGapBackgroundColor;

	private String activatedElementId;

	public void init(FSLLearningUnitViewManager learningUnitViewManager,
			FSLLearningUnitEventGenerator learningUnitEventGenerator,
			boolean editModeParam) {
		internationalization = new FLGInternationalization(
				"freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementsContentsPanel.internationalization",
				getClass().getClassLoader());
		super.init(learningUnitViewManager, learningUnitEventGenerator,
				editModeParam);
		learningUnitEventGenerator
				.addLearningUnitListener(new FLGCheckUpLearningUnitAdapter());
		learningUnitViewManager
				.addLearningUnitViewListener(new FLGCheckUpLearningUnitViewAdapter());
		answerSelectionHistory = new Hashtable();
		editDialog = new FLGCheckUpGapTextGapEditDialog();
		inputTagFocusListener = new FocusAdapter() {
			public void focusGained(FocusEvent e) {
				if (e.getSource() instanceof FLGHtmlPane.FLGHtmlPaneInputTagTextComponent
						&& editMode)
					((FLGHtmlPane.FLGHtmlPaneInputTagTextComponent) e
							.getSource()).setBackground(Color.yellow);
			}

			public void focusLost(FocusEvent e) {
				if (e.getSource() instanceof FLGHtmlPane.FLGHtmlPaneInputTagTextComponent
						&& editMode)
					((FLGHtmlPane.FLGHtmlPaneInputTagTextComponent) e
							.getSource()).setBackground(Color.white);
			}
		};
		inputTagMouseListener = new MouseAdapter() {
		};
	}

	protected java.awt.Component getPrintableComponent() {
		FLGHtmlPane printableContentHtmlPane = new FLGHtmlPane();
		printableContentHtmlPane.setBase(elementContentHtmlPane.getBase());
		printableContentHtmlPane.setEditable(false);
		FSLLearningUnitViewElement viewElement = learningUnitViewElementsManager
				.getLearningUnitViewElement(learningUnitViewElementId, false);
		printableContentHtmlPane.setText(FLGHtmlUtilities
				.createPrintableHtmlText(elementContentHtmlPane.getText()));
		printableContentHtmlPane.setSize(elementContentHtmlPane.getSize());
		return printableContentHtmlPane;
	}

	public boolean isModifiedByUserInput() {
		return elementContentHtmlPane.isModifiedByUserInput();
	}

	public void saveUserChanges() {
		File htmlFile;
		FLGCheckUpElement gapTextElement = (FLGCheckUpElement) learningUnitViewElementsManager
				.getLearningUnitViewElement(learningUnitViewElementId, true);
		gapTextElement.setLastModificationDate(String.valueOf(new Date()
				.getTime()));
		if (gapTextElement.getGapText().getHtmlFormularFileName() == null) {
			htmlFile = learningUnitViewElementsManager
					.createNewFileForElementsExternalData(
							FLGCheckUpElement.ELEMENT_TYPE_GAPTEXT, ".html",
							learningUnitViewElementId);
			gapTextElement.getGapText().setHtmlFormularFileName(
					htmlFile.getName());
		} else {
			String relativeFileName = learningUnitViewElementsManager
					.getRelativeFileNameVersionForWriting(gapTextElement
							.getGapText().getHtmlFormularFileName(),
							gapTextElement,
							FLGCheckUpElement.ELEMENT_TYPE_GAPTEXT, ".html");
			gapTextElement.getGapText().setHtmlFormularFileName(
					relativeFileName);
			htmlFile = learningUnitViewElementsManager.resolveRelativeFileName(
					gapTextElement.getGapText().getHtmlFormularFileName(),
					gapTextElement);
		}
		// check if only GapTextElement only contains gaps which are referenced
		// by the HTML content
		String elementHtmlContent = elementContentHtmlPane.getText();
		for (int i = 0; i < gapTextElement.getGapText().getGapTextGaps().size(); i++) {
			FLGCheckUpElementGapTextGap gapTextGap = (FLGCheckUpElementGapTextGap) gapTextElement
					.getGapText().getGapTextGaps().get(i);
			if (!(elementHtmlContent.indexOf(gapTextGap.getId()) > 0)) {
				gapTextElement.getGapText().getGapTextGaps().remove(i);
			}
		}
		// renumbering
		for (int i = 0; i < gapTextElement.getGapText().getGapTextGaps().size(); i++) {
			FLGCheckUpElementGapTextGap gapTextGap = (FLGCheckUpElementGapTextGap) gapTextElement
					.getGapText().getGapTextGaps().get(i);
			String idToCheck = gapTextGap.getId();
			if (!idToCheck.equals("g" + (i + 1))) {
				gapTextGap.setId("g" + (i + 1));
				int startIndexOfCurrentGapId = elementHtmlContent
						.indexOf(idToCheck);
				String htmlContentBeforeCurrentGapId = elementHtmlContent
						.substring(0, startIndexOfCurrentGapId);
				String htmlContentAfterCurrentGapId = elementHtmlContent
						.substring(startIndexOfCurrentGapId
								+ idToCheck.length(), elementHtmlContent
								.length());
				elementHtmlContent = htmlContentBeforeCurrentGapId + "g"
						+ (i + 1) + htmlContentAfterCurrentGapId;
				elementContentHtmlPane.setText(elementHtmlContent);
			}
		}
		FLGFileUtility.writeStringIntoFile(elementContentHtmlPane.getText(),
				htmlFile);
	}

	public void updateUI() {
		super.updateUI();
		if (elementContentHtmlPane != null)
			FSLLearningUnitViewUtilities
					.updateHtmlPaneUI(elementContentHtmlPane);
	}

	protected void setActiveLearningUnitViewElementPanel(boolean active) {
		super.setActiveLearningUnitViewElementPanel(active);
		elementContentHtmlPane.setEditable(editMode
				&& activeLearningUnitViewElementPanel);
	}

	protected JComponent[] getEditToolBarComponents() {
		return editToolBarComponents;
	}

	protected void buildIndependentUI() {
		setLayout(new BorderLayout());
		elementContentHtmlPane = new FLGHtmlPane();
		elementContentHtmlPane.setEditable(editMode);
		elementContentHtmlPane
				.addHyperlinkListener(new FSLLearningUnitViewElementContentPanel_HyperlinkAdapter());
		JScrollPane scrollPane = new JScrollPane(elementContentHtmlPane);
		scrollPane
				.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		add(scrollPane, BorderLayout.CENTER);
		// toolbar
		FLGHtmlPaneEditButtonsFactory.FLGFileCreator fileCreator = new FLGHtmlPaneEditButtonsFactory.FLGFileCreator() {
			public File createFile(String fileExtension) {
				return learningUnitViewElementsManager
						.createNewFileForElementsExternalData("image",
								fileExtension, learningUnitViewElementId);
			}
		};
		FLGHtmlPaneEditButtonsFactory.FLGLinkEditor linkEditor = new FLGHtmlPaneEditButtonsFactory.FLGLinkEditor() {
			public String linkSelectedToEdit(String htmlAttributeValue) {
				return learningUnitViewManager.editLearningUnitViewElementLink(
						htmlAttributeValue, learningUnitViewElementId);
			}
		};
		Vector editToolBarComponentsVector = FLGUtilities
				.createVectorFromArray(FLGHtmlPaneEditButtonsFactory
						.createDefaultHtmlPaneEditComponents(fileCreator,
								linkEditor));
		editToolBarComponentsVector.add(new FLGEditToolBarButton(
				loadImage("images/editToolBarButtonInsertGap.gif"),
				internationalization.getString("button.editGap.toolTipText"),
				new EditGapAction()));
		editToolBarComponents = (JComponent[]) editToolBarComponentsVector
				.toArray(new JComponent[] {});
		updateUI();
	}

	protected void buildDependentUI(boolean reloadIfAlreadyLoaded) {
		boolean contentAvailable = false;
		if (learningUnitViewElementsManager != null
				&& learningUnitViewElementId != null) {
			FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(learningUnitViewElementId,
							false);
			if (learningUnitViewElement != null) {
				String htmlRelativeFileName = learningUnitViewElement
						.getGapText().getHtmlFormularFileName();
				if (htmlRelativeFileName != null)
					elementContentHtmlPane.loadFile(
							learningUnitViewElementsManager
									.resolveRelativeFileName(
											htmlRelativeFileName,
											learningUnitViewElement),
							reloadIfAlreadyLoaded);
				else {
					elementContentHtmlPane
							.setBase(learningUnitViewElementsManager
									.resolveRelativeFileName("dummyFileName",
											learningUnitViewElement));
					elementContentHtmlPane
							.setText("<html><body><p></p></body></html>");
				}
				contentAvailable = true;
			}
		}
		if (!contentAvailable) {
			elementContentHtmlPane.setText("<html><body><p></p></body></html>");
		}
		elementContentHtmlPane.setEditable(editMode
				&& activeLearningUnitViewElementPanel && contentAvailable);
		// input tag fields
		buildInputTagFields(editMode);
	}

	private void buildInputTagFields(boolean editMode) {
		if (learningUnitViewElementsManager != null
				&& learningUnitViewElementId != null) {
			FLGHtmlPane.FLGHtmlPaneInputTagTextComponent[] tagTextComponents = elementContentHtmlPane
					.getInputTagTextComponents();
			FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(learningUnitViewElementId,
							false);
			if (learningUnitViewElement != null) {
				for (int i = 0; i < tagTextComponents.length; i++) {
					FLGCheckUpElementGapTextGap gapTextGap = learningUnitViewElement
							.getGapText().getGapTextGap(
									tagTextComponents[i].getId());
					if (editMode) {
						tagTextComponents[i].setText(internationalization
								.getString("text.solutions")
								+ ": "
								+ gapTextGap.getGapTextSolutions().size());
					} else {
						tagTextComponents[i].setText("");
					}
					tagTextComponents[i].setEditable(!editMode);
					tagTextComponents[i].setBackground(Color.white);
					tagTextComponents[i]
							.removeFocusListener(inputTagFocusListener);
					tagTextComponents[i]
							.removeMouseListener(inputTagMouseListener);
					tagTextComponents[i]
							.addFocusListener(inputTagFocusListener);
					tagTextComponents[i]
							.addMouseListener(inputTagMouseListener);
					tagTextComponents[i].setRequestFocusEnabled(false);
				}
			}
		}
	}

	class EditGapAction extends HTMLEditorKit.StyledTextAction {
		public EditGapAction() {
			super("editGap");
		}

		public int calculateGapTextGapSize(
				FLGCheckUpElementGapTextGap gapTextGap) {
			int size = 10;
			for (int i = 0; i < gapTextGap.getGapTextSolutions().size(); i++) {
				String solution = (String) gapTextGap.getGapTextSolutions()
						.get(i);
				size = Math.max(size, solution.length());
			}
			return size;
		}

		public void actionPerformed(ActionEvent e) {
			Component focusOwner = (new java.awt.DefaultKeyboardFocusManager())
					.getFocusOwner();
			if (focusOwner != null
					&& focusOwner instanceof FLGHtmlPane.FLGHtmlPaneInputTagTextComponent) {
				// edit an existing gap
				FLGHtmlPane.FLGHtmlPaneInputTagTextComponent inputField = (FLGHtmlPane.FLGHtmlPaneInputTagTextComponent) focusOwner;
				FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
						.getLearningUnitViewElement(learningUnitViewElementId,
								true);
				FLGCheckUpElementGapTextGap gapTextGap = learningUnitViewElement
						.getGapText().getGapTextGap(inputField.getId());
				if (editDialog.showDialog(gapTextGap)) {
					editDialog.saveUserInput(gapTextGap);
					int textFieldSize = calculateGapTextGapSize(gapTextGap);
					HTMLDocument doc = (HTMLDocument) elementContentHtmlPane
							.getDocument();
					Element inputElement = doc.getElement(inputField.getId());
					try {
						elementContentHtmlPane.getUndoManager()
								.startComplexEdit();
						doc.remove(inputElement.getStartOffset(), inputElement
								.getEndOffset()
								- inputElement.getStartOffset());
						String inputTag = "<INPUT ID=\"" + inputField.getId()
								+ "\" TYPE=\"TEXT\" SIZE=\"" + textFieldSize
								+ "\">";
						((HTMLEditorKit) elementContentHtmlPane.getEditorKit())
								.insertHTML(doc, inputElement.getStartOffset(),
										inputTag, 0, 0, HTML.Tag.INPUT);
						elementContentHtmlPane.getUndoManager()
								.endComplexEdit();
					} catch (Exception ex) {
						System.out.println(ex);
					}
					buildInputTagFields(editMode);
				}
			} else if (getEditor(e) != null
					&& getEditor(e) instanceof FLGHtmlPane) {
				FLGHtmlPane editor = (FLGHtmlPane) getEditor(e);
				int p0 = Math.min(editor.getCaret().getDot(), editor.getCaret()
						.getMark());
				// insert a new gap
				if (editDialog.showDialog(null)) {
					FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
							.getLearningUnitViewElement(
									learningUnitViewElementId, true);
					FLGCheckUpElementGapTextGap gapTextGap = learningUnitViewElement
							.getGapText().addNewGapTextGap();
					editDialog.saveUserInput(gapTextGap);
					HTMLEditorKit editorKit = (HTMLEditorKit) editor
							.getEditorKit();
					String id = gapTextGap.getId();
					int size = calculateGapTextGapSize(gapTextGap);
					String inputTag = "<INPUT ID=\"" + id
							+ "\" TYPE=\"TEXT\" SIZE=\"" + size + "\">";
					try {
						editorKit.insertHTML((HTMLDocument) editor
								.getDocument(), p0, inputTag, 0, 0,
								HTML.Tag.INPUT);
					} catch (Exception ex) {
						System.out.println(ex);
					}
					buildInputTagFields(editMode);
				}
			}
		}
	}

	/*
	 * class FLGCheckUpHyperlinkListener implements HyperlinkListener { public
	 * void hyperlinkUpdate(HyperlinkEvent e) { if (e.getEventType() ==
	 * HyperlinkEvent.EventType.ACTIVATED) { String url = e.getURL().toString();
	 * String linkId = url.substring(url.lastIndexOf("/") + 1);
	 * learningUnitViewManager.followLearningUnitViewElementLink(linkId,
	 * learningUnitViewElementId); } } }
	 */

	class FLGCheckUpLearningUnitAdapter extends FSLLearningUnitVetoableAdapter {
		public void learningUnitEditModeChanged(FSLLearningUnitEvent event) {
			if (!event.isEditMode()) {
				elementContentHtmlPane.select(0, 0);
			}
			buildInputTagFields(event.isEditMode());
		}
	}

	class FLGCheckUpLearningUnitViewAdapter extends
			FSLLearningUnitViewVetoableAdapter {
		private Vector currentGapTextContents = new Vector();

		private Vector correctGapTextContents = new Vector();

		public void learningUnitViewElementActivated(
				FSLLearningUnitViewEvent event) {
			activatedElementId = event.getActiveLearningUnitViewElementId();
			if (activatedElementId != null) {
				String[] selectionHistory = (String[]) answerSelectionHistory
						.get(activatedElementId);
				if (selectionHistory != null) {
					preSelectAnswers(selectionHistory);
				}
			}
		}

		private void preSelectAnswers(String[] selectionHistory) {
			if (checkUpPlaying) {
				FLGCheckUpElement activeCheckUpElement = (FLGCheckUpElement) learningUnitViewElementsManager
						.getLearningUnitViewElement(activatedElementId, false);
				FLGCheckUpElementGapText gapTextElement = activeCheckUpElement
						.getGapText();
				FLGHtmlPane.FLGHtmlPaneInputTagTextComponent[] tagTextComponents = elementContentHtmlPane
						.getInputTagTextComponents();
				for (int i = 0; i < tagTextComponents.length; i++) {
					tagTextComponents[i].setText(selectionHistory[i]);
				}
			}
		}

		public void learningUnitViewSpecificEventOccurred(
				FSLLearningUnitViewEvent event) {
			FLGCheckUpEvent checkUpEvent = (FLGCheckUpEvent) event;
			switch (checkUpEvent.getEventSpecificType()) {
			case FLGCheckUpEvent.CHECKUP_PLAY_MODE_ENTERED: {
				answerSelectionHistory = new Hashtable();
				checkUpPlaying = true;
				break;
			}
			case FLGCheckUpEvent.CHECKUP_PLAY_MODE_EXITED: {
				checkUpPlaying = false;
				break;
			}
			}
			String activeElementId = checkUpEvent
					.getActivatedLearningUnitViewElementId();
			if (activeElementId != null) {
				FLGCheckUpElement activeCheckUpElement = (FLGCheckUpElement) learningUnitViewElementsManager
						.getLearningUnitViewElement(activeElementId, false);
				if ((activeCheckUpElement != null)
						&& (activeCheckUpElement.getType())
								.equals(FLGCheckUpElement.ELEMENT_TYPE_GAPTEXT)) {
					FLGCheckUpElementGapText gapTextElement = activeCheckUpElement
							.getGapText();
					FLGHtmlPane.FLGHtmlPaneInputTagTextComponent[] tagTextComponents = elementContentHtmlPane
							.getInputTagTextComponents();
					java.util.List gaps = gapTextElement.getGapTextGaps();
					switch (checkUpEvent.getEventSpecificType()) {
					case FLGCheckUpEvent.CHECKUP_RESOLVE_MODE_ENTERED: {
						currentGapTextContents.removeAllElements();
						correctGapTextContents.removeAllElements();
						for (int i = 0; i < tagTextComponents.length; i++) {
							currentGapTextContents.add(tagTextComponents[i]
									.getText());
							FLGCheckUpElementGapTextGap gapTextGap = activeCheckUpElement
									.getGapText().getGapTextGap(
											tagTextComponents[i].getId());
							correctGapTextContents.add(gapTextGap
									.getGapTextSolutions().get(0));
						}
						if (tagTextComponents.length > 0)
							defaultGapBackgroundColor = tagTextComponents[0]
									.getBackground();
						for (int i = 0; i < tagTextComponents.length; i++) {
							FLGCheckUpElementGapTextGap gapTextGap = activeCheckUpElement
									.getGapText().getGapTextGap(
											tagTextComponents[i].getId());
							String userText = tagTextComponents[i].getText();
							if (getAnswerIsCorrect(gapTextGap, userText))
								tagTextComponents[i]
										.setBackground((Color) UIManager
												.get("FSLColorGreen"));
							else {
								tagTextComponents[i]
										.setBackground((Color) UIManager
												.get("FSLColorRed"));
								tagTextComponents[i]
										.setText((String) gapTextGap
												.getGapTextSolutions().get(0));
							}
						}
						break;
					}
					case FLGCheckUpEvent.CHECKUP_RESOLVE_MODE_EXITED: {
						for (int i = 0; i < tagTextComponents.length; i++) {
							FLGCheckUpElementGapTextGap gapTextGap = activeCheckUpElement
									.getGapText().getGapTextGap(
											tagTextComponents[i].getId());
							String userText = "";
							if (currentGapTextContents.size() > i
									&& currentGapTextContents.get(i) != null)
								userText = currentGapTextContents.get(i)
										.toString();
							tagTextComponents[i].setText(userText);
							tagTextComponents[i]
									.setBackground(defaultGapBackgroundColor);
						}
						break;
					}
					case FLGCheckUpEvent.CHECKUP_CHECK_ANSWER_REQUESTED: {
						double correctAnswers = 0;
						int maxNoAnswers = tagTextComponents.length;
						String[] answersSelected = new String[maxNoAnswers];
						for (int i = 0; i < tagTextComponents.length; i++) {
							FLGCheckUpElementGapTextGap gapTextGap = activeCheckUpElement
									.getGapText().getGapTextGap(
											tagTextComponents[i].getId());
							answersSelected[i] = tagTextComponents[i].getText();
							if (getAnswerIsCorrect(gapTextGap,
									answersSelected[i]))
								correctAnswers++;
						}
						if (answersSelected != null)
							answerSelectionHistory.put(activeElementId,
									answersSelected);
						FSLLearningUnitViewEvent checkUpSpectificEvent;
						if (checkUpEvent.getPlayVideo()) {
							checkUpSpectificEvent = FLGCheckUpEvent
									.createViewSpecificEvent(
											FLGCheckUpEvent.CHECKUP_ANSWER_CHECKED,
											activeElementId,
											(int) correctAnswers, maxNoAnswers,
											checkUpEvent.getPlayVideo());
						} else {
							checkUpSpectificEvent = FLGCheckUpEvent
									.createViewSpecificEvent(
											FLGCheckUpEvent.CHECKUP_ANSWER_CHECKED,
											activeElementId, correctAnswers
													/ maxNoAnswers,
											checkUpEvent.getPlayVideo());
						}
						learningUnitViewManager
								.fireLearningUnitViewEvent(checkUpSpectificEvent);
						break;
					}
					}
				}
			}
		}

		private boolean isRepeatedAnswer(Vector userTexts,
				FLGCheckUpElementGapTextGap[] gapTextGaps) {
			for (int i = 0; i < userTexts.size(); i++) {
				String userText = (String) userTexts.get(i);
			}
			return false;
		}

		private boolean getAnswerIsCorrect(
				FLGCheckUpElementGapTextGap gapTextGap, String userText) {
			boolean answerIsCorrect = false;
			String[] solutions = new String[gapTextGap.getGapTextSolutions()
					.size()];
			for (int solutionIx = 0; solutionIx < solutions.length; solutionIx++) {
				solutions[solutionIx] = (String) gapTextGap
						.getGapTextSolutions().get(solutionIx);
				if (gapTextGap.hasIgnoreCase()) {
					answerIsCorrect = solutions[solutionIx]
							.equalsIgnoreCase(userText);
				} else
					answerIsCorrect = solutions[solutionIx].equals(userText);
				if (answerIsCorrect)
					break;
			}
			return answerIsCorrect;
		}

		public void learningUnitViewElementsUserVersionCreated(
				FSLLearningUnitViewEvent event) {
			if (event.getLearningUnitViewManagerId().equals(
					learningUnitViewManager.getLearningUnitViewManagerId())) {
				for (int i = 0; i < event.getLearningUnitViewElementIds().length; i++) {
					if (event.getLearningUnitViewElementIds()[i]
							.equals(learningUnitViewElementId)) {
						String htmlFileName = ((FLGCheckUpElement) learningUnitViewElementsManager
								.getLearningUnitViewElement(
										learningUnitViewElementId, false))
								.getGapText().getHtmlFormularFileName();
						if (htmlFileName != null) {
							File file = learningUnitViewElementsManager
									.resolveRelativeFileName(
											htmlFileName,
											learningUnitViewElementsManager
													.getLearningUnitViewElement(
															learningUnitViewElementId,
															false));
							try {
								((HTMLDocument) elementContentHtmlPane
										.getDocument()).setBase(file
										.getParentFile().toURL());
							} catch (Exception e) {
								System.out.println(e);
							}
						}
					}
				}
			}
		}
	}
}
