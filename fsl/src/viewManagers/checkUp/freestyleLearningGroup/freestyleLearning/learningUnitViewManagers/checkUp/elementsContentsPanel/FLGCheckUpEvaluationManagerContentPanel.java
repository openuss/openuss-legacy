/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementsContentsPanel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.*;

import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.ScrollPaneConstants;
import javax.swing.UIManager;
import javax.xml.bind.Dispatcher;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.FSLAbstractLearningUnitViewElementContentPanel;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitAdapter;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewVetoableAdapter;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.FLGCheckUpManager;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBinding.EvaluationDescriptor;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBinding.EvaluationsDescriptor;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.FLGCheckUpElement;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.FLGCheckUpEvaluationDescriptor;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.FLGCheckUpEvaluationsDescriptor;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.events.learningUnitViewEvent.FLGCheckUpEvent;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.learningByDoing.data.xmlBindingSubclasses.FLGLearningByDoingElement;
import freestyleLearningGroup.independent.gui.FLGColumnLayout;
import freestyleLearningGroup.independent.gui.FLGHtmlPane;
import freestyleLearningGroup.independent.gui.FLGScrollPane;
import freestyleLearningGroup.independent.plotter.FLGBarChartPiled2D;
import freestyleLearningGroup.independent.plotter.FLGData2D;
import freestyleLearningGroup.independent.plotter.FLGDataGroup2D;
import freestyleLearningGroup.independent.util.FLGInternationalization;
import freestyleLearningGroup.independent.util.FLGMathExtension;

public class FLGCheckUpEvaluationManagerContentPanel extends
		FSLAbstractLearningUnitViewElementContentPanel {
	private FLGInternationalization internationalization;

	private FLGCheckUpEvaluationManagerSummaryPanel evaluationSummaryPanel;

	private JPanel barChartPanel;

	private JPanel scrollPaneView;

	private FLGHtmlPane summaryHtmlPane, nothingToDisplayHtmlPane;

	private int noQuestions, noQuestionsPerformed;

	private double meanSuccessQuota, quotaSum;

	private String activatedLearningUnitViewElementId;

	private Vector selectedNodeQuestionsList, questionAlternativesList,
			questionsList;

	private final int BORDER_WIDTH = 10;

	private boolean showAllResults;

	private double[][] totalQuotasArray;

	private FLGBarChartPiled2D barChart;

	private Vector questionsToDisplayList;

	private JRadioButton radioButtonLastRunResults, radioButtonAllResults;

	private JCheckBox checkBoxMultipleChoice, checkBoxGapText, checkBoxRelator,
			checkBoxShowLegend, checkBoxShowXLabels;

	private boolean multipleChoiceAllowed, gapTextAllowed, relatorAllowed;

	private Hashtable lastRunAnswerQuotas, allRunsAnswerQuotas;

	private File evaluationUserDataDirectory;

	private EvaluationsDescriptor evaluationsDescriptor;

	private JPanel graphicPanel;

	private boolean modifiedByUser;

	public void init(FSLLearningUnitViewManager learningUnitViewManager,
			FSLLearningUnitEventGenerator learningUnitEventGenerator,
			boolean editMode) {
		internationalization = new FLGInternationalization(
				"freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementsContentsPanel.internationalization",
				getClass().getClassLoader());
		super.init(learningUnitViewManager, learningUnitEventGenerator,
				editMode);
		selectedNodeQuestionsList = new Vector();
		questionAlternativesList = new Vector();
		multipleChoiceAllowed = true;
		gapTextAllowed = false;
		relatorAllowed = true;
		lastRunAnswerQuotas = new Hashtable();
		learningUnitEventGenerator
				.addLearningUnitListener(new FLGCheckUpEvaluationManagerLearningUnitAdapter());
		learningUnitViewManager
				.addLearningUnitViewListener(new FLGCheckUpEvaluationManagerLearningUnitViewAdapter());
	}

	protected java.awt.Component getPrintableComponent() {
		return scrollPaneView;
	}

	protected void buildDependentUI(boolean reloadIfAlreadyLoaded) {
	}

	protected void buildIndependentUI() {
		questionsList = new Vector();
		setLayout(new BorderLayout());
		scrollPaneView = new JPanel(new BorderLayout());
		FLGScrollPane scrollPane = new FLGScrollPane(scrollPaneView);
		scrollPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
		scrollPane
				.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane
				.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
		add(scrollPane, BorderLayout.CENTER);
		// nothingToDisplay panel
		nothingToDisplayHtmlPane = new FLGHtmlPane();
		nothingToDisplayHtmlPane.setText("<html><body><p>"
				+ internationalization.getString("message.nothingToDisplay")
				+ "</body></html>");
		// add summary to scrollpane
		JPanel summaryPanel = new JPanel(new BorderLayout());
		summaryHtmlPane = new FLGHtmlPane();
		summaryHtmlPane.setEditable(false);
		summaryHtmlPane.setText(getSummaryText());
		summaryPanel.add(summaryHtmlPane, BorderLayout.CENTER);
		// graphic pane
		graphicPanel = new JPanel(new BorderLayout());
		graphicPanel.setBackground((Color) UIManager.get("FSLMainFrameColor2"));
		barChartPanel = new JPanel();
		barChartPanel.setLayout(new BorderLayout());
		barChartPanel
				.setBackground((Color) UIManager.get("FSLMainFrameColor2"));
		graphicPanel.add(barChartPanel, BorderLayout.CENTER);
		// Panel for selection of displayed statistics
		JPanel questionsSelectPanel = new JPanel(new FLGColumnLayout());
		questionsSelectPanel.setBackground((Color) UIManager
				.get("FSLMainFrameColor2"));
		showAllResults = false;
		radioButtonLastRunResults = new JRadioButton(internationalization
				.getString("text.displayLastRun"));
		radioButtonAllResults = new JRadioButton(internationalization
				.getString("text.displayAll"));
		radioButtonLastRunResults.setBackground((Color) UIManager
				.get("FSLMainFrameColor2"));
		radioButtonAllResults.setBackground((Color) UIManager
				.get("FSLMainFrameColor2"));
		radioButtonLastRunResults.setSelected(true);
		radioButtonAllResults.setSelected(false);
		radioButtonLastRunResults.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				radioButtonLastRunResults.setSelected(true);
				showLastRunResults();
			}
		});
		radioButtonAllResults.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				radioButtonAllResults.setSelected(true);
				showAllResults();
			}
		});
		questionsSelectPanel.add(radioButtonLastRunResults,
				FLGColumnLayout.LEFTEND);
		questionsSelectPanel
				.add(radioButtonAllResults, FLGColumnLayout.LEFTEND);
		questionsSelectPanel.setBorder(BorderFactory.createEmptyBorder(
				BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH));
		// Panel for question alternatives selection
		JPanel questionsAlternativesPanel = new JPanel(new FLGColumnLayout());
		questionsAlternativesPanel.setBackground((Color) UIManager
				.get("FSLMainFrameColor2"));
		checkBoxMultipleChoice = new JCheckBox(internationalization
				.getString("text.displayMC"), true);
		checkBoxGapText = new JCheckBox(internationalization
				.getString("text.displayGapText"), false);
		checkBoxRelator = new JCheckBox(internationalization
				.getString("text.displayRelator"), true);
		checkBoxMultipleChoice.setBackground((Color) UIManager
				.get("FSLMainFrameColor2"));
		checkBoxGapText.setBackground((Color) UIManager
				.get("FSLMainFrameColor2"));
		checkBoxRelator.setBackground((Color) UIManager
				.get("FSLMainFrameColor2"));
		checkBoxMultipleChoice.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				multipleChoiceAllowed = checkBoxMultipleChoice.isSelected();
				updateBarChart();
			}
		});
		checkBoxRelator.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				relatorAllowed = checkBoxRelator.isSelected();
				updateBarChart();
			}
		});
		checkBoxGapText.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				gapTextAllowed = checkBoxGapText.isSelected();
				updateBarChart();
			}
		});
		questionsAlternativesPanel.add(checkBoxMultipleChoice,
				FLGColumnLayout.LEFTEND);

		// MW: temporarily disabled
		questionsAlternativesPanel
				.add(checkBoxGapText, FLGColumnLayout.LEFTEND);
		questionsAlternativesPanel
				.add(checkBoxRelator, FLGColumnLayout.LEFTEND);
		JPanel graphicOptionsPanel = new JPanel(new FLGColumnLayout());
		graphicOptionsPanel.setBackground((Color) UIManager
				.get("FSLMainFrameColor2"));
		graphicOptionsPanel.setBorder(BorderFactory.createEmptyBorder(
				BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH));
		checkBoxShowLegend = new JCheckBox(internationalization
				.getString("text.displayLegend"), false);
		checkBoxShowLegend.setBackground((Color) UIManager
				.get("FSLMainFrameColor2"));
		checkBoxShowLegend.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (barChart != null) {
					barChart.setShowLegend(checkBoxShowLegend.isSelected());
					barChart.invalidate();
					barChart.repaint();
				}
			}
		});
		checkBoxShowXLabels = new JCheckBox(internationalization
				.getString("text.displayLabels"), false);
		checkBoxShowXLabels.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				updateBarChart();
			}
		});
		checkBoxShowXLabels.setBackground((Color) UIManager
				.get("FSLMainFrameColor2"));
		graphicOptionsPanel.add(checkBoxShowLegend, FLGColumnLayout.LEFTEND);
		graphicOptionsPanel.add(checkBoxShowXLabels, FLGColumnLayout.LEFTEND);
		questionsAlternativesPanel.setBorder(BorderFactory.createEmptyBorder(
				BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH, BORDER_WIDTH));
		// add questionsSelectPanel and questionsAlternativesPanel to
		// selectionPanel
		JPanel displayPanel = new JPanel(new BorderLayout());
		JPanel selectionPanel = new JPanel(new FLGColumnLayout());
		selectionPanel.setBackground((Color) UIManager
				.get("FSLMainFrameColor2"));
		selectionPanel.add(questionsSelectPanel, FLGColumnLayout.LEFT);
		selectionPanel.add(questionsAlternativesPanel, FLGColumnLayout.LEFT);
		selectionPanel.add(graphicOptionsPanel, FLGColumnLayout.LEFTEND);
		// add selectionPanel and graphicPanel to displayPanel
		displayPanel.add(selectionPanel, BorderLayout.NORTH);
		displayPanel.add(graphicPanel, BorderLayout.CENTER);
		// add elements to scrollPane
		scrollPaneView.setBackground((Color) UIManager
				.get("FSLMainFrameColor2"));
		scrollPaneView.add(summaryPanel, BorderLayout.NORTH);
		scrollPaneView.add(displayPanel, BorderLayout.CENTER);
	}

	private void showAllResults() {
		radioButtonLastRunResults.setSelected(false);
		showAllResults = true;
		updateBarChart();
	}

	private void showLastRunResults() {
		radioButtonAllResults.setSelected(false);
		showAllResults = false;
		updateBarChart();
	}

	private void initBarChartPanel() {
		FLGDataGroup2D[] dataGroup = new FLGDataGroup2D[3];
		dataGroup[0] = new FLGDataGroup2D(); // correct answers
		dataGroup[1] = new FLGDataGroup2D(); // wrong answers
		dataGroup[2] = new FLGDataGroup2D(); // not performed
		String elementId, title;
		FLGCheckUpElement element;
		double multipleChoiceQuota, gapTextQuota, relatorQuota, quotaSummary, alternativesSelected, meanQuotaSummary, noQuotasInSummary;
		String[] quotaArray;
		questionsToDisplayList = createQuestionsToDisplayList();
		if (questionsList != null) {
			noQuestions = questionsList.size();
		} else {
			noQuestions = 0;
		}
		noQuestionsPerformed = questionsToDisplayList.size();
		meanQuotaSummary = 0;
		noQuotasInSummary = 0;
		meanSuccessQuota = 0;
		if (questionsList.size() > 0) {
			for (int i = 0; i < questionsToDisplayList.size(); i++) {
				element = (FLGCheckUpElement) learningUnitViewElementsManager
						.getLearningUnitViewElement(
								(String) questionsToDisplayList.get(i), false);
				if (element != null) {
					multipleChoiceQuota = 0;
					gapTextQuota = 0;
					relatorQuota = 0;
					if (showAllResults) {
						quotaArray = (String[]) allRunsAnswerQuotas.get(element
								.getId());
						if (quotaArray == null) {
							quotaArray = new String[FLGCheckUpManager.QUESTION_ALTERNATIVES];
							quotaArray[FLGCheckUpManager.MULTIPLECHOICE] = "-1";
							quotaArray[FLGCheckUpManager.GAPTEXT] = "-1";
							quotaArray[FLGCheckUpManager.RELATOR] = "-1";
						}
					} else {
						quotaArray = (String[]) lastRunAnswerQuotas.get(element
								.getId());
						if (quotaArray == null) {
							quotaArray = new String[FLGCheckUpManager.QUESTION_ALTERNATIVES];
							quotaArray[FLGCheckUpManager.MULTIPLECHOICE] = "-1";
							quotaArray[FLGCheckUpManager.GAPTEXT] = "-1";
							quotaArray[FLGCheckUpManager.RELATOR] = "-1";
						}
					}
					quotaSummary = 0;
					alternativesSelected = 0;
					if (multipleChoiceAllowed) {
						multipleChoiceQuota = Double
								.parseDouble(quotaArray[FLGCheckUpManager.MULTIPLECHOICE]);
						if (multipleChoiceQuota >= 0) {
							quotaSummary += multipleChoiceQuota;
							alternativesSelected++;
						}
					}
					if (gapTextAllowed) {
						gapTextQuota = Double
								.parseDouble(quotaArray[FLGCheckUpManager.GAPTEXT]);
						if (gapTextQuota >= 0) {
							quotaSummary += gapTextQuota;
							alternativesSelected++;
						}
					}
					if (relatorAllowed) {
						relatorQuota = Double
								.parseDouble(quotaArray[FLGCheckUpManager.RELATOR]);
						if (relatorQuota >= 0) {
							quotaSummary += relatorQuota;
							alternativesSelected++;
						}
					}
					if (checkBoxShowXLabels.isSelected())
						title = element.getTitle();
					else
						title = "";
					if (alternativesSelected > 0) {
						quotaSummary /= alternativesSelected;
						dataGroup[0].add(new FLGData2D(title,
								100 * quotaSummary));
						dataGroup[1].add(new FLGData2D("",
								100 * (1 - quotaSummary)));
						dataGroup[2].add(new FLGData2D("", 0));
					} else {
						dataGroup[0].add(new FLGData2D(title, 0));
						dataGroup[1].add(new FLGData2D("", 0));
						dataGroup[2].add(new FLGData2D(title, 100));
					}
					if (quotaSummary >= 0) {
						meanQuotaSummary += quotaSummary;
						noQuotasInSummary++;
					}
				}
			}
			if (noQuotasInSummary > 0)
				meanSuccessQuota = meanQuotaSummary / noQuotasInSummary;
			Color[] colors = { Color.green, Color.red, Color.white };
			String[] legendNames = {
					internationalization.getString("text.correctAnswers"),
					internationalization.getString("text.wrongAnswers"),
					internationalization.getString("text.notPerformed") };
			barChart = new FLGBarChartPiled2D(dataGroup, colors, legendNames,
					internationalization.getString("text.question"),
					internationalization.getString("text.percentage"), false,
					false, true);
			barChart.setPaintWithGradient(true);
			barChartPanel.removeAll();
			barChartPanel.add(barChart, BorderLayout.CENTER);
			barChart.setMaxNoAxisLabels(11);
			barChart.setDrawBarBorders(false);
			barChart.setShowLegend(checkBoxShowLegend.isSelected());
			barChart.invalidate();
			barChart.repaint();
		} else {
			barChartPanel.removeAll();
			barChartPanel.add(nothingToDisplayHtmlPane, BorderLayout.CENTER);
		}
		summaryHtmlPane.setText(getSummaryText());
	}

	private Vector createQuestionsToDisplayList() {
		Vector questionsToDisplayList = new Vector();
		if (questionsList != null) {
			if (showAllResults) {
				allRunsAnswerQuotas = loadAnswerQuotasFromFile();
				for (int i = 0; i < questionsList.size(); i++) {
					String elementId = (String) questionsList.get(i);
					questionsToDisplayList.add(questionsList.get(i));
				}
			} else {
				for (int i = 0; i < questionsList.size(); i++) {
					String elementId = (String) questionsList.get(i);
					questionsToDisplayList.add(questionsList.get(i));
				}
			}
		}
		return questionsToDisplayList;
	}

	private Hashtable loadAnswerQuotasFromFile() {
		Hashtable answerQuotas = new Hashtable();
		String elementId;
		String[] quotaArray;
		EvaluationDescriptor evaluationDescriptor = null;
		java.util.List evaluationDescriptorList = evaluationsDescriptor
				.getEvaluationsDescriptors();
		// loop all questions in selection
		for (int i = 0; i < questionsList.size(); i++) {
			elementId = (String) questionsList.get(i);
			// element already performed?
			for (int j = 0; j < evaluationDescriptorList.size(); j++) {
				evaluationDescriptor = (EvaluationDescriptor) evaluationDescriptorList
						.get(j);
				if (evaluationDescriptor.getId().equals(elementId)) {
					// yes, put to answer quotas result list
					quotaArray = new String[FLGCheckUpManager.QUESTION_ALTERNATIVES];
					quotaArray[FLGCheckUpManager.MULTIPLECHOICE] = evaluationDescriptor
							.getMultipleChoiceQuota();
					quotaArray[FLGCheckUpManager.RELATOR] = evaluationDescriptor
							.getRelatorQuota();
					quotaArray[FLGCheckUpManager.GAPTEXT] = evaluationDescriptor
							.getGapTextQuota();
					answerQuotas.put(elementId, quotaArray);
					break;
				}
			}
		}
		return answerQuotas;
	}

	private void updateQuestionsList(String elementId) {
		selectedNodeQuestionsList = new Vector();
		questionAlternativesList = new Vector();
		if (elementId != null) {
			FLGCheckUpElement checkUpElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(elementId, false);
			noQuestions = 0;
			if (checkUpElement != null) {
				if (checkUpElement.getType().equals(
						FLGCheckUpElement.ELEMENT_TYPE_QUESTION)
						|| checkUpElement.getType().equals(
								FLGCheckUpElement.ELEMENT_TYPE_FOLDER)) {
					// create List of all Question Elements which are child of
					// this node
					// (including THIS Question Element)
					selectedNodeQuestionsList = createSelectedNodeQuestionsList(checkUpElement);
					noQuestions = selectedNodeQuestionsList.size();
					questionsList = selectedNodeQuestionsList;
				}
				if (selectedNodeQuestionsList.size() < 1) {
					// no question elements used so find all question
					// alternatives
					questionAlternativesList = createQuestionAlternativesListOnly(checkUpElement);
					noQuestions = questionAlternativesList.size();
					questionsList = questionAlternativesList;
				}
			}
		}
	}

	private void updateBarChart() {
		updateQuestionsList(activatedLearningUnitViewElementId);
		initBarChartPanel();
	}

	private String getSummaryText() {
		return "<p>" + internationalization.getString("message.meanQuota")
				+ ": <b>"
				+ FLGMathExtension.roundDouble(meanSuccessQuota * 100, 1)
				+ "%</b>";
	}

	public void saveUserChanges() {
		FLGCheckUpElement element = (FLGCheckUpElement) learningUnitViewElementsManager
				.getLearningUnitViewElement(learningUnitViewManager
						.getActiveLearningUnitViewElementId(), false);
		element.setLastModificationDate(String.valueOf(new Date().getTime()));
		modifiedByUser = false;
	}

	public boolean isModifiedByUserInput() {
		return modifiedByUser;
	}

	protected JComponent[] getEditToolBarComponents() {
		return null;
	}

	private void saveEvaluationData(File evaluationDescriptorFile) {
		String elementId;
		String[] quotaArray;
		String presentNumberOfRuns = "0";
		String numberOfRuns;
		String multipleChoiceQuota = "-1";
		String relatorQuota = "-1";
		String gapTextQuota = "-1";
		for (int i = 0; i < questionsList.size(); i++) {
			elementId = (String) questionsList.get(i);
			quotaArray = (String[]) lastRunAnswerQuotas.get(elementId);
			multipleChoiceQuota = "-1";
			relatorQuota = "-1";
			gapTextQuota = "-1";
			int alternativesPerformed = 0;
			presentNumberOfRuns = "0";
			if (quotaArray != null) {
				java.util.List evaluationDescriptorList = evaluationsDescriptor
						.getEvaluationsDescriptors();
				FLGCheckUpEvaluationDescriptor evaluationDescriptor = new FLGCheckUpEvaluationDescriptor();
				evaluationDescriptor.setId(elementId);
				for (int j = 0; j < evaluationDescriptorList.size(); j++) {
					EvaluationDescriptor presentEvaluationDescriptor = (EvaluationDescriptor) evaluationDescriptorList
							.get(j);
					if (presentEvaluationDescriptor.getId().equals(elementId)) {
						// collect present data from descriptor file
						presentNumberOfRuns = presentEvaluationDescriptor
								.getNumberOfRuns();
						multipleChoiceQuota = presentEvaluationDescriptor
								.getMultipleChoiceQuota();
						relatorQuota = presentEvaluationDescriptor
								.getRelatorQuota();
						gapTextQuota = presentEvaluationDescriptor
								.getGapTextQuota();
						evaluationDescriptorList
								.remove(presentEvaluationDescriptor);
					}
				}
				// update number of runs
				numberOfRuns = "" + (Integer.parseInt(presentNumberOfRuns) + 1);
				evaluationDescriptor.setNumberOfRuns(numberOfRuns);
				// update quotas
				double quota = Double
						.parseDouble(quotaArray[FLGCheckUpManager.MULTIPLECHOICE]);
				if (quota >= 0) {
					evaluationDescriptor
							.setMultipleChoiceQuota(quotaArray[FLGCheckUpManager.MULTIPLECHOICE]);
					alternativesPerformed++;
				} else
					evaluationDescriptor
							.setMultipleChoiceQuota(multipleChoiceQuota);
				// gap text
				quota = Double
						.parseDouble(quotaArray[FLGCheckUpManager.GAPTEXT]);
				if (quota >= 0) {
					evaluationDescriptor
							.setGapTextQuota(quotaArray[FLGCheckUpManager.GAPTEXT]);
					alternativesPerformed++;
				} else
					evaluationDescriptor.setGapTextQuota(gapTextQuota);
				// relator
				quota = Double
						.parseDouble(quotaArray[FLGCheckUpManager.RELATOR]);
				if (quota >= 0) {
					evaluationDescriptor
							.setRelatorQuota(quotaArray[FLGCheckUpManager.RELATOR]);
					alternativesPerformed++;
				} else
					evaluationDescriptor.setRelatorQuota(relatorQuota);
				// add descriptor to descriptorsList
				if (alternativesPerformed > 0)
					evaluationsDescriptor.getEvaluationsDescriptors().add(
							evaluationDescriptor);
			}
		}
		try {
			FileOutputStream fileOutputStream = new FileOutputStream(
					evaluationDescriptorFile);
			evaluationsDescriptor.validate();
			evaluationsDescriptor.marshal(fileOutputStream);
			fileOutputStream.close();
		} catch (Exception e) {
			System.out.println("*** error saving evaluation descriptor! ***");
			System.out.println(e);
		}
	}

	private EvaluationsDescriptor loadEvaluationsDescriptor(
			File evaluationsDescriptorFile) {
		EvaluationsDescriptor evaluationsDescriptor = null;
		Dispatcher dispatcher = EvaluationsDescriptor.newDispatcher();
		dispatcher.register(EvaluationsDescriptor.class,
				FLGCheckUpEvaluationsDescriptor.class);
		dispatcher.register(EvaluationDescriptor.class,
				FLGCheckUpEvaluationDescriptor.class);
		FileInputStream evaluationsDescriptorFileInputStream = null;
		try {
			evaluationsDescriptorFileInputStream = new FileInputStream(
					evaluationsDescriptorFile);
			evaluationsDescriptor = (FLGCheckUpEvaluationsDescriptor) dispatcher
					.unmarshal(evaluationsDescriptorFileInputStream);
			evaluationsDescriptorFileInputStream.close();
		} catch (Exception e) {
			System.out.println("*** error loading evaluation descriptor! ***");
			System.out.println(e);
		}
		return evaluationsDescriptor;
	}

	private File getEvaluationDescriptorFile(File userDirectory) {
		// open evaluation history file
		File userEvaluationDescriptorFile = new File(userDirectory,
				"evaluationsDescriptor.xml");
		// not existing (yet)?
		if (!userEvaluationDescriptorFile.exists()) {
			File directory = userEvaluationDescriptorFile.getParentFile();
			if (!directory.exists())
				directory.mkdirs();
			try {
				// write new evaluation history file
				if (evaluationsDescriptor != null)
					evaluationsDescriptor.emptyEvaluationsDescriptors();
				else
					evaluationsDescriptor = new EvaluationsDescriptor();
				FileOutputStream fileOutputStream = new FileOutputStream(
						userEvaluationDescriptorFile);
				evaluationsDescriptor.validate();
				evaluationsDescriptor.marshal(fileOutputStream);
				fileOutputStream.close();
			} catch (Exception e) {
				System.out.println(e);
			}
		}
		return userEvaluationDescriptorFile;
	}

	/**
	 * This method creates a top-down-ordered list of all child questions of the
	 * selected element
	 */
	private Vector createSelectedNodeQuestionsList(
			FLGCheckUpElement checkUpElement) {
		Vector questionsList = new Vector();
		if (checkUpElement.getType().equals(
				FLGCheckUpElement.ELEMENT_TYPE_QUESTION)) {
			questionsList.add(checkUpElement.getId());
		}
		String[] childrenOfSelectedNodeIDs = learningUnitViewElementsManager
				.getDescendantIdsOfLearningUnitViewElement(checkUpElement
						.getId());
		for (int i = 0; i < childrenOfSelectedNodeIDs.length; i++) {
			FLGCheckUpElement childElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(childrenOfSelectedNodeIDs[i],
							false);
			if (childElement.getType().equals(
					FLGCheckUpElement.ELEMENT_TYPE_QUESTION)) {
				questionsList.add(childElement.getId());
			}
		}
		return questionsList;
	}

	/**
	 * This method creates a list containing only question alternatives
	 * according to the user preferences. This method is invoked when no
	 * question elements have been found in createSelectedNodeQuestionList()
	 */
	private Vector createQuestionAlternativesListOnly(
			FLGCheckUpElement checkUpElement) {
		Vector questionAlternativesList = new Vector();
		if (!checkUpElement.getType().equals(
				FLGCheckUpElement.ELEMENT_TYPE_FOLDER)
				&& !checkUpElement.getType().equals(
						FLGCheckUpElement.ELEMENT_TYPE_GAPTEXT)) {
			questionAlternativesList.add(checkUpElement.getId());
		}
		String[] childrenOfSelectedNodeIDs = learningUnitViewElementsManager
				.getDescendantIdsOfLearningUnitViewElement(checkUpElement
						.getId());
		for (int i = 0; i < childrenOfSelectedNodeIDs.length; i++) {
			FLGCheckUpElement childElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(childrenOfSelectedNodeIDs[i],
							false);
			if (!childElement.getFolder()
					&& !childElement.getType().equals(
							FLGCheckUpElement.ELEMENT_TYPE_GAPTEXT)) {
				questionAlternativesList.add(childElement.getId());
			}
		}
		return questionAlternativesList;
	}

	private void reloadEvaluationsDescriptor(File userDirectory) {
		File evaluationDescriptorFile = getEvaluationDescriptorFile(userDirectory);
		evaluationsDescriptor = loadEvaluationsDescriptor(evaluationDescriptorFile);
	}

	class FLGCheckUpEvaluationManagerSummaryPanel extends JPanel {
		FLGHtmlPane htmlPane;

		public FLGCheckUpEvaluationManagerSummaryPanel() {
			setLayout(new FLGColumnLayout(BORDER_WIDTH, BORDER_WIDTH));
			setBackground((Color) UIManager.get("FSLDefaultHtmlBackground"));
		}
	}

	class FLGCheckUpEvaluationManagerLearningUnitAdapter extends
			FSLLearningUnitAdapter {
		public void learningUnitActivated(FSLLearningUnitEvent event) {
			File userCheckUpDirectory = ((FLGCheckUpManager) learningUnitViewManager)
					.getUserDataDirectory();
			reloadEvaluationsDescriptor(userCheckUpDirectory);
		}
	}

	class FLGCheckUpEvaluationManagerLearningUnitViewAdapter extends
			FSLLearningUnitViewVetoableAdapter {
		public void learningUnitViewSpecificEventOccurred(
				FSLLearningUnitViewEvent event) {
			if (((FLGCheckUpManager) learningUnitViewManager).isActive()) {
				FLGCheckUpEvent checkUpEvent = (FLGCheckUpEvent) event;
				if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_UPDATE_LAST_RUN_RESULTS) {
					modifiedByUser = true;
					lastRunAnswerQuotas = checkUpEvent.getAnswerQuotas();
					if (lastRunAnswerQuotas == null)
						lastRunAnswerQuotas = new Hashtable();
					String topLevelElementId = checkUpEvent
							.getTopLevelElementId();
					updateQuestionsList(topLevelElementId);
					FSLLearningUnitViewEvent learningUnitViewEvent = FSLLearningUnitViewEvent
							.createElementActivatedEvent(
									learningUnitViewManager
											.getLearningUnitViewManagerId(),
									topLevelElementId, null, false);
					learningUnitViewManager
							.fireLearningUnitViewEvent(learningUnitViewEvent);
					saveEvaluationData(getEvaluationDescriptorFile(((FLGCheckUpManager) learningUnitViewManager)
							.getUserDataDirectory()));
				}
				if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_RESET_EVALUATION_HISTORY) {
					modifiedByUser = true;
					evaluationsDescriptor = new EvaluationsDescriptor();
					File evaluationDescriptorFile = getEvaluationDescriptorFile(((FLGCheckUpManager) learningUnitViewManager)
							.getUserDataDirectory());
					try {
						FileOutputStream fileOutputStream = new FileOutputStream(
								evaluationDescriptorFile);
						evaluationsDescriptor.validate();
						evaluationsDescriptor.marshal(fileOutputStream);
						fileOutputStream.close();
					} catch (Exception e) {
						System.out.println(e);
					}
					updateBarChart();
				}
				if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_LOAD_USER_DATA) {
					reloadEvaluationsDescriptor(((FLGCheckUpManager) learningUnitViewManager)
							.getUserDataDirectory());
					modifiedByUser = false;
				}
			}
		}

		public void learningUnitViewElementActivated(
				FSLLearningUnitViewEvent event) {
			if (evaluationsDescriptor == null) {
				reloadEvaluationsDescriptor(((FLGCheckUpManager) learningUnitViewManager)
						.getUserDataDirectory());
			}
			if (((FLGCheckUpManager) learningUnitViewManager).isActive()
					&& ((FLGCheckUpManager) learningUnitViewManager)
							.isEvaluationMode()) {
				activatedLearningUnitViewElementId = event
						.getActiveLearningUnitViewElementId();
				updateQuestionsList(activatedLearningUnitViewElementId);
				initBarChartPanel();
			}
		}

		public void learningUnitViewDeactivated(FSLLearningUnitViewEvent event) {
			lastRunAnswerQuotas = new Hashtable();
		}
	}
}
