/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses;

import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBinding.Relator;

public class FLGCheckUpElementRelator extends Relator {
	public FLGCheckUpElementRelator deepCopy() {
		FLGCheckUpElementRelator copy = new FLGCheckUpElementRelator();
		copy.setQuestionHtmlFileName(getQuestionHtmlFileName());
		copy.emptyRelatorStartPoints();
		copy.emptyRelatorEndPoints();
		copy.emptyRelatorRelations();
		for (int i = 0; i < this.getRelatorStartPoints().size(); i++) {
			FLGCheckUpElementRelatorStartPoint startPoint = (FLGCheckUpElementRelatorStartPoint) getRelatorStartPoints()
					.get(i);
			copy.getRelatorStartPoints().add(startPoint.deepCopy());
		}
		for (int i = 0; i < this.getRelatorEndPoints().size(); i++) {
			FLGCheckUpElementRelatorEndPoint endPoint = (FLGCheckUpElementRelatorEndPoint) getRelatorEndPoints()
					.get(i);
			copy.getRelatorEndPoints().add(endPoint.deepCopy());
		}
		for (int i = 0; i < this.getRelatorRelations().size(); i++) {
			FLGCheckUpElementRelatorRelation relation = (FLGCheckUpElementRelatorRelation) getRelatorRelations()
					.get(i);
			copy.getRelatorRelations().add(relation.deepCopy());
		}
		return copy;
	}

	public FLGCheckUpElementRelatorStartPoint addNewRelatorStartPoint() {
		FLGCheckUpElementRelatorStartPoint startPoint = new FLGCheckUpElementRelatorStartPoint();
		if (getRelatorStartPoints().isEmpty()) {
			startPoint.setId("rs1");
		} else {
			int maxRelatorStartPointIdValue = 0;
			for (int i = 0; i < getRelatorStartPoints().size(); i++) {
				String relatorStartPointId = ((FLGCheckUpElementRelatorStartPoint) getRelatorStartPoints()
						.get(i)).getId();
				int relatorStartPointIdValue = Integer
						.parseInt(relatorStartPointId.substring(2));
				maxRelatorStartPointIdValue = Math.max(
						maxRelatorStartPointIdValue, relatorStartPointIdValue);
			}
			startPoint.setId("rs" + (maxRelatorStartPointIdValue + 1));
		}
		getRelatorStartPoints().add(startPoint);
		return startPoint;
	}

	public FLGCheckUpElementRelatorEndPoint addNewRelatorEndPoint() {
		FLGCheckUpElementRelatorEndPoint endPoint = new FLGCheckUpElementRelatorEndPoint();
		if (getRelatorEndPoints().isEmpty()) {
			endPoint.setId("re1");
		} else {
			int maxRelatorEndPointIdValue = 0;
			for (int i = 0; i < getRelatorEndPoints().size(); i++) {
				String relatorEndPointId = ((FLGCheckUpElementRelatorEndPoint) getRelatorEndPoints()
						.get(i)).getId();
				int relatorEndPointIdValue = Integer.parseInt(relatorEndPointId
						.substring(2));
				maxRelatorEndPointIdValue = Math.max(maxRelatorEndPointIdValue,
						relatorEndPointIdValue);
			}
			endPoint.setId("re" + (maxRelatorEndPointIdValue + 1));
		}
		getRelatorEndPoints().add(endPoint);
		return endPoint;
	}

	public FLGCheckUpElementRelatorRelation addNewRelatorRelation() {
		FLGCheckUpElementRelatorRelation relation = new FLGCheckUpElementRelatorRelation();
		if (getRelatorRelations().isEmpty()) {
			relation.setId("rr1");
		} else {
			int maxRelatorRelationIdValue = 0;
			for (int i = 0; i < getRelatorRelations().size(); i++) {
				String relatorRelationId = ((FLGCheckUpElementRelatorRelation) getRelatorRelations()
						.get(i)).getId();
				int relatorRelationIdValue = Integer.parseInt(relatorRelationId
						.substring(2));
				maxRelatorRelationIdValue = Math.max(maxRelatorRelationIdValue,
						relatorRelationIdValue);
			}
			relation.setId("rr" + (maxRelatorRelationIdValue + 1));
		}
		getRelatorRelations().add(relation);
		return relation;
	}

	public FLGCheckUpElementRelatorStartPoint getRelatorStartPoint(
			String startPointId) {
		for (int i = 0; i < getRelatorStartPoints().size(); i++) {
			FLGCheckUpElementRelatorStartPoint startPoint = (FLGCheckUpElementRelatorStartPoint) getRelatorStartPoints()
					.get(i);
			if (startPoint.getId().equals(startPointId))
				return startPoint;
		}
		return null;
	}

	public FLGCheckUpElementRelatorEndPoint getRelatorEndPoint(String endPointId) {
		for (int i = 0; i < getRelatorEndPoints().size(); i++) {
			FLGCheckUpElementRelatorEndPoint endPoint = (FLGCheckUpElementRelatorEndPoint) getRelatorEndPoints()
					.get(i);
			if (endPoint.getId().equals(endPointId))
				return endPoint;
		}
		return null;
	}

	public void checkRelationsAfterRemovingPoint(String pointId) {
		for (int i = 0; i < getRelatorRelations().size(); i++) {
			FLGCheckUpElementRelatorRelation relation = (FLGCheckUpElementRelatorRelation) getRelatorRelations()
					.get(i);
			if (relation.getEndPointsIds().contains(pointId))
				relation.getEndPointsIds().remove(pointId);
			if (relation.getStartPointId().equals(pointId)
					|| relation.getEndPointsIds().isEmpty()) {
				getRelatorRelations().remove(relation);
				i = i - 1;
			}
		}
	}
}
