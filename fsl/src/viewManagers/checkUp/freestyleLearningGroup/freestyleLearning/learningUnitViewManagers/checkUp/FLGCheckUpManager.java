/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp;

import java.awt.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.xml.bind.*;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBinding.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBinding.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementInteractionPanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementsContentsPanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementsStructurePanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.events.learningUnitViewEvent.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.statusPanel.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.media.*;
import freestyleLearningGroup.independent.util.*;

public class FLGCheckUpManager extends FSLAbstractLearningUnitViewManager {
	public static final int MULTIPLECHOICE = 0;

	public static final int GAPTEXT = 1;

	public static final int RELATOR = 2;

	public static final int QUESTION_ALTERNATIVES = 3;

	private FSLLearningUnitViewPrimaryActivationButton primaryActivationButton;

	private FLGInternationalization internationalization;

	private Image assistantImage;

	private JPanel assistantPanel;

	private FLGImageComponent imageComponent;

	private FLGMediaPlayer videoPlayer;

	private String learningUnitDirectoryName;

	private boolean firstActivate;

	private boolean assistantMediaExisting;

	public void init(FSLLearningUnitsActivator learningUnitsActivator,
			FSLLearningUnitViewsActivator learningUnitViewsActivator,
			FSLLearningUnitEventGenerator learningUnitEventGenerator,
			String learningUnitViewManagerId,
			String learningUnitViewManagerTitle,
			File learningUnitViewManagerCodeDirectory, boolean editMode,
			boolean originalElementsOnly,
			FLGLongLastingOperationStatus progressStatus) {
		super.init(learningUnitsActivator, learningUnitViewsActivator,
				learningUnitEventGenerator, learningUnitViewManagerId,
				learningUnitViewManagerTitle,
				learningUnitViewManagerCodeDirectory, editMode,
				originalElementsOnly, progressStatus);
		internationalization = new FLGInternationalization(
				"freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.internationalization",
				getClass().getClassLoader());
		addLearningUnitViewListener(new FLGCheckUpManager_LearningUnitViewAdapter());
		learningUnitEventGenerator
				.addLearningUnitListener(new FLGCheckUpManager_LearningUnitAdapter());
		int stepSize = progressStatus.getStepSize();
		progressStatus.setStatusValue(progressStatus.getStatusValue()
				+ (int) (stepSize / 6.));
		assistantPanel = new JPanel();
		assistantPanel.setOpaque(false);
		assistantPanel.setLayout(new BorderLayout());
		videoPlayer = new FLGMediaPlayer();
		videoPlayer.addMediaListener(new FLGMediaListener() {
			public void endOfMediaReached() {
				showAssistantImage();
				if (firstActivate) {
					updateUI();
					firstActivate = false;
				}
			}
		});
		progressStatus.setStatusValue(progressStatus.getStatusValue()
				+ (int) (stepSize / 6.));
		primaryActivationButton = new FSLLearningUnitViewPrimaryActivationButton(
				loadImage("primaryActivationButton.gif"));
		primaryActivationButton.setToolTipText(internationalization
				.getString("button.primaryActivation.toolTipText"));
		elementsStructurePanel = new FLGCheckUpElementsStructurePanel();
		elementsStructurePanel.init(this, learningUnitEventGenerator, editMode);
		elementsStructurePanel.setAutomaticActivation(true);
		progressStatus.setStatusValue(progressStatus.getStatusValue()
				+ (int) (stepSize / 6.));
		elementInteractionPanel = new FLGCheckUpElementInteractionPanel();
		elementInteractionPanel
				.init(this, learningUnitEventGenerator, editMode);
		progressStatus.setStatusValue(progressStatus.getStatusValue()
				+ (int) (stepSize / 6.));
		elementsContentsPanel = new FLGCheckUpElementsContentsPanel();
		elementsContentsPanel.init(this, learningUnitEventGenerator, editMode);
		progressStatus.setStatusValue(progressStatus.getStatusValue()
				+ (int) (stepSize / 6.));
		statusPanel = new FLGCheckUpStatusPanel();
		statusPanel.init(this, learningUnitEventGenerator, editMode);
		progressStatus.setStatusValue(progressStatus.getStatusValue()
				+ (int) (stepSize / 6.));
		firstActivate = true;
	}

	public java.net.URL getMainHelpPageUrl() {
		return getClass()
				.getClassLoader()
				.getResource(
						"freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/checkUp/help");
	}

	public void activate(boolean followingHyperlink) {
		super.activate(followingHyperlink);
		createAssistantImage();
		showAssistantImage();
		if (firstActivate) {
			assistantMediaExisting = false;
			File videoFile = new File(learningUnitViewElementsManager
					.getLearningUnitViewOriginalDataDirectory()
					+ "/assistantMedia/assistantVideoWelcome.mpg");
			if (!videoFile.exists()) {
				videoFile = new File(learningUnitViewElementsManager
						.getLearningUnitViewOriginalDataDirectory()
						+ "/assistantMedia/assistantVideoWelcome.mov");
			}
			if (videoFile != null && videoFile.exists()) {
				assistantMediaExisting = true;
				try {
					FLGUIUtilities.startLongLastingOperation();
					videoPlayer.loadMedia(videoFile);
				} catch (FLGMediaException me) {
					System.out.println("FLGCheckUpManager.activate(): " + me);
				} finally {
					FLGUIUtilities.stopLongLastingOperation();
				}
				assistantPanel.removeAll();
				assistantPanel.add(videoPlayer, java.awt.BorderLayout.CENTER);
				videoPlayer.start();
			}
			FSLLearningUnitViewEvent checkUpEvent = (FSLLearningUnitViewEvent) FLGCheckUpEvent
					.createViewSpecificEvent(FLGCheckUpEvent.CHECKUP_FIRST_ACTIVATED);
			((FLGCheckUpEvent) checkUpEvent)
					.setAssistantMediaExisting(assistantMediaExisting);
			fireLearningUnitViewEvent(checkUpEvent);
		}
	}

	public boolean isActive() {
		return active;
	}

	public boolean isEvaluationMode() {
		return ((FLGCheckUpElementInteractionPanel) elementInteractionPanel)
				.isEvaluationMode();
	}

	private void createAssistantImage() {
		File imageFile = new File(learningUnitViewElementsManager
				.getLearningUnitViewOriginalDataDirectory()
				+ "//assistantMedia//assistant.gif");
		imageComponent = new FLGImageComponent(true);
		if (imageFile.exists()) {
			try {
				Image image = FLGImageUtility.loadImageAndWait(imageFile
						.toURL());
				imageComponent.setImage(image);
			} catch (Exception e) {
				System.out.println("FLGCheckUpManager.init(): " + e);
			}
		}
	}

	private void showAssistantImage() {
		assistantPanel.removeAll();
		assistantPanel.add(imageComponent);
	}

	public FSLLearningUnitViewPrimaryActivationButton getPrimaryActivationButton() {
		return primaryActivationButton;
	}

	protected Dispatcher createDispatcher() {
		Dispatcher d = FLGCheckUpDescriptor.newDispatcher();
		d.register(CheckUpDescriptor.class, FLGCheckUpDescriptor.class);
		d.register(ViewElement.class, FLGCheckUpElement.class);
		d.register(ViewElementLink.class, FLGCheckUpElementLink.class);
		d.register(ViewElementLinkTarget.class,
				FLGCheckUpElementLinkTarget.class);
		d.register(GapText.class, FLGCheckUpElementGapText.class);
		d.register(GapTextGap.class, FLGCheckUpElementGapTextGap.class);
		d.register(MultipleChoice.class, FLGCheckUpElementMultipleChoice.class);
		d.register(MultipleChoiceAnswer.class,
				FLGCheckUpElementMultipleChoiceAnswer.class);
		d.register(Relator.class, FLGCheckUpElementRelator.class);
		d.register(RelatorStartPoint.class,
				FLGCheckUpElementRelatorStartPoint.class);
		d.register(RelatorEndPoint.class,
				FLGCheckUpElementRelatorEndPoint.class);
		d.register(RelatorRelation.class,
				FLGCheckUpElementRelatorRelation.class);
		return d;
	}

	public File getUserDataDirectory() {
		return currentLearningUnitViewUserDataDirectory;
	}

	public void loadLearningUnitViewData(String learningUnitId,
			File learningUnitViewOriginalDataDirectory,
			File learningUnitViewUserDataDirectory) {
		super.loadLearningUnitViewData(learningUnitId,
				learningUnitViewOriginalDataDirectory,
				learningUnitViewUserDataDirectory);
		FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
				.createViewSpecificEvent(
						FLGCheckUpEvent.CHECKUP_LOAD_USER_DATA, null);
		fireLearningUnitViewEvent(checkUpEvent);
	}

	protected FSLLearningUnitViewXMLDocument createLearningUnitViewXMLDocument() {
		return new FLGCheckUpDescriptor();
	}

	private Image loadImage(String imageFileName) {
		return FLGImageUtility
				.loadImageAndWait(getClass()
						.getClassLoader()
						.getResource(
								"freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/checkUp/images/"
										+ imageFileName));
	}

	private void playAssistantVideo(FLGCheckUpElement checkUpElement,
			int noCorrectAnswers, int maxNoAnswers) {
		if (videoPlayer.isPlaying())
			videoPlayer.stop();
		// default: all wrong ;)
		File videoFile = learningUnitViewElementsManager
				.resolveRelativeFileName(
						"assistantMedia//assistantVideoRethink.mpg",
						checkUpElement);
		if (!videoFile.exists())
			videoFile = learningUnitViewElementsManager
					.resolveRelativeFileName(
							"assistantMedia//assistantVideoRethink.mov",
							checkUpElement);
		// all correct
		if (noCorrectAnswers == maxNoAnswers) {
			videoFile = learningUnitViewElementsManager
					.resolveRelativeFileName(
							"assistantMedia//assistantVideoCorrect.mpg",
							checkUpElement);
			if (!videoFile.exists())
				videoFile = learningUnitViewElementsManager
						.resolveRelativeFileName(
								"assistantMedia//assistantVideoCorrect.mov",
								checkUpElement);
		}
		// one wrong
		if (maxNoAnswers - noCorrectAnswers == 1 && noCorrectAnswers > 0) {
			videoFile = learningUnitViewElementsManager
					.resolveRelativeFileName(
							"assistantMedia//assistantVideoOneWrong.mpg",
							checkUpElement);
			if (!videoFile.exists())
				videoFile = learningUnitViewElementsManager
						.resolveRelativeFileName(
								"assistantMedia//assistantVideoOneWrong.mov",
								checkUpElement);
		}
		// some wrong
		if (noCorrectAnswers > 0 && noCorrectAnswers < maxNoAnswers - 1) {
			videoFile = learningUnitViewElementsManager
					.resolveRelativeFileName(
							"assistantMedia//assistantVideoSomeWrong.mpg",
							checkUpElement);
			if (!videoFile.exists())
				videoFile = learningUnitViewElementsManager
						.resolveRelativeFileName(
								"assistantMedia//assistantVideoSomeWrong.mov",
								checkUpElement);
		}
		if (videoFile != null && videoFile.exists()) {
			try {
				FLGUIUtilities.startLongLastingOperation();
				videoPlayer.loadMedia(videoFile);
			} catch (FLGMediaException me) {
				System.out.println("FLGCheckUpManager.playAssistentVideo(): "
						+ me);
			} finally {
				FLGUIUtilities.stopLongLastingOperation();
			}
			assistantPanel.removeAll();
			assistantPanel.add(videoPlayer, java.awt.BorderLayout.CENTER);
			videoPlayer.start();
		} else {
			FLGOptionPane
					.showMessageDialog(internationalization
							.getString("dialog.message.fileNotFound"),
							internationalization
									.getString("dialog.title.fileNotFound"),
							FLGOptionPane.ERROR_MESSAGE);
		}
	}

	public JPanel getAssistantPanel() {
		File imageFile = new File(learningUnitViewElementsManager
				.getLearningUnitViewOriginalDataDirectory()
				+ "//assistantMedia//assistant.gif");
		if (imageFile.exists())
			return assistantPanel;
		else
			return super.getAssistantPanel();
	}

	// override method from FSLAbstractLearningUnitViewManager to save Videos
	// and Evaluation Files
	protected void removeUnnecessaryExternalElementFiles(
			boolean originalElements) {
		File directoryToClean;
		Vector learningUnitViewElements;
		if (originalElements) {
			directoryToClean = learningUnitViewElementsManager
					.getLearningUnitViewOriginalDataDirectory();
			learningUnitViewElements = learningUnitViewElementsManager
					.getLearningUnitViewOriginalElements();
		} else {
			directoryToClean = learningUnitViewElementsManager
					.getLearningUnitViewUserDataDirectory();
			learningUnitViewElements = learningUnitViewElementsManager
					.getLearningUnitViewUserElements();
		}
		Vector absoluteFilesToKeep = new Vector();
		absoluteFilesToKeep.add(new File(directoryToClean,
				LEARNING_UNIT_VIEW_DATA_FILENAME));
		// absoluteFilesToKeep.add(new File(directoryToClean,
		// LEARNING_UNIT_VIEW_DATA_FILENAME + "~"));
		absoluteFilesToKeep.add(new File(directoryToClean, "/assistantMedia"));
		for (int i = 0; i < learningUnitViewElements.size(); i++) {
			FSLLearningUnitViewElement learningUnitViewElement = (FSLLearningUnitViewElement) learningUnitViewElements
					.get(i);
			String[] relativePathsToKeep = learningUnitViewElement
					.getLearningUnitViewElementExternalFilesRelativePaths(learningUnitViewElementsManager);
			if (relativePathsToKeep != null) {
				for (int j = 0; j < relativePathsToKeep.length; j++) {
					absoluteFilesToKeep.add(new File(directoryToClean,
							relativePathsToKeep[j]));
				}
			}
		}
		FLGFileUtility.cleanDirectory(directoryToClean,
				(File[]) absoluteFilesToKeep.toArray(new File[] {}));
	}

	public File getUserCheckUpDirectory(File userDirectory) {
		String fileSeparator = System.getProperty("file.separator");
		return new File(userDirectory.getAbsolutePath() + fileSeparator
				+ learningUnitDirectoryName + fileSeparator + "checkUp");
	}

	class FLGCheckUpManager_LearningUnitAdapter extends FSLLearningUnitAdapter {
		public void learningUnitActivated(FSLLearningUnitEvent event) {
			firstActivate = true;
			learningUnitDirectoryName = null;
			String learningUnitPath = event.getLearningUnitPath();
			String fileSeparator = System.getProperty("file.separator");
			if (learningUnitPath != null) {
				learningUnitDirectoryName = learningUnitPath
						.substring(learningUnitPath.lastIndexOf(fileSeparator) + 1);
			}
		}
	}

	class FLGCheckUpManager_LearningUnitViewAdapter extends
			FSLLearningUnitViewAdapter {
		public void learningUnitViewActivated(FSLLearningUnitViewEvent event) {
			if (event.getLearningUnitViewManagerId().equals(
					getLearningUnitViewManagerId())) {
				if (imageComponent == null)
					createAssistantImage();
				showAssistantImage();
			}
		}

		public void learningUnitViewSpecificEventOccurred(
				FSLLearningUnitViewEvent event) {
			FLGCheckUpEvent checkUpEvent = (FLGCheckUpEvent) event;
			if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_ANSWER_CHECKED) {
				if (checkUpEvent.getPlayVideo()) {
					String questionElementId = checkUpEvent
							.getActivatedLearningUnitViewElementId();
					FLGCheckUpElement checkUpElement = (FLGCheckUpElement) learningUnitViewElementsManager
							.getLearningUnitViewElement(questionElementId,
									false);
					int noCorrectAnswers = checkUpEvent.getCorrectAnswers();
					int maxNoAnswers = checkUpEvent.getMaxNoAnswers();
					playAssistantVideo(checkUpElement, noCorrectAnswers,
							maxNoAnswers);
				}
			}
		}
	}
}
