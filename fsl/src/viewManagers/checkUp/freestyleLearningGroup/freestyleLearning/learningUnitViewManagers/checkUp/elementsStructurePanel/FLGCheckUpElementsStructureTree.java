/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementsStructurePanel;

import javax.swing.tree.DefaultMutableTreeNode;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElementsManager;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.elementsStructurePanel.FSLLearningUnitViewElementStructureTree;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.FLGCheckUpElement;

public class FLGCheckUpElementsStructureTree extends
		FSLLearningUnitViewElementStructureTree {
	public void init(FSLLearningUnitViewManager learningUnitViewManager,
			FSLLearningUnitViewElementsManager learningUnitViewElementsManager,
			FSLLearningUnitEventGenerator learningUnitEventGenerator,
			boolean editMode) {
		super.init(learningUnitViewManager, learningUnitViewElementsManager,
				learningUnitEventGenerator, editMode);
	}

	protected void addChildNodes(DefaultMutableTreeNode parent, String elementId) {
		String[] childrenIds = learningUnitViewElementsManager
				.getChildrenIdsOfLearningUnitViewElement(elementId);
		for (int i = 0; i < childrenIds.length; i++) {
			FLGCheckUpElement element = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(childrenIds[i], false);
			// temporary do not add GapTextElements
			// if
			// (!element.getType().equals(FLGCheckUpElement.ELEMENT_TYPE_GAPTEXT))
			// {
			if (true) {
				DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(
						childrenIds[i]);
				parent.add(childNode);
				addChildNodes(childNode, childrenIds[i]);
			}
		}
	}
}
