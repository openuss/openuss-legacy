/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementInteractionPanel;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.elementInteractionPanel.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.events.learningUnitViewEvent.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.gui.documents.*;
import freestyleLearningGroup.independent.util.*;

public class FLGCheckUpElementInteractionPanel extends
		FSLAbstractLearningUnitViewElementInteractionPanel {
	private int MULTIPLECHOICE = FLGCheckUpManager.MULTIPLECHOICE;

	private int GAPTEXT = FLGCheckUpManager.GAPTEXT;

	private int RELATOR = FLGCheckUpManager.RELATOR;

	private int QUESTION_ALTERNATIVES = FLGCheckUpManager.QUESTION_ALTERNATIVES;

	private boolean multipleChoiceAllowed, gapTextAllowed, relatorAllowed,
			checkUpIsPlaying, questionAlternativesOnly, evaluationMode;

	private FSLLearningUnitViewElementInteractionButton playButton,
			stopAndEvaluationButton, forwardButton, backButton,
			exitEvaluationButton, tipButton, resetButton, resolveButton;

	private String activeCheckUpElementID, questionToActivateId;

	private java.util.List questionAlternativesList, questionList, playList;

	private Hashtable answerQuotas, questionIndexHistory;

	private int activeQuestionIndex, currentQuestionNo;

	private String topLevelElementId;

	private JCheckBox checkBoxMultipleChoice, checkBoxGapText, checkBoxRelator,
			checkBoxRandomOrder;

	private JRadioButton radioButtonExamMode, radioButtonTrainingMode,
			radioButtonAllQuestions, radioButtonAllQuestionsSelectedElement,
			radioButtonNoQuestions;

	private FLGCheckUpRunConfigurationPanel selectAlternativesDialogContentComponent;

	private JTextField tf_noQuestions;

	private Image evaluationImage;

	private Image stopImage;

	private boolean resolveMode;

	private boolean examinationModeSelected;

	private boolean assistantMediaExisting;

	private FLGCheckUpElement checkUpStartElement;

	public FLGCheckUpElementInteractionPanel() {
		internationalization = new FLGInternationalization(
				"freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementInteractionPanel.internationalization",
				getClass().getClassLoader());
	}

	public void init(FSLLearningUnitViewManager learningUnitViewManager,
			FSLLearningUnitEventGenerator learningUnitEventGenerator,
			boolean editMode) {
		super.init(learningUnitViewManager, learningUnitEventGenerator,
				editMode);
		selectAlternativesDialogContentComponent = new FLGCheckUpRunConfigurationPanel();
		learningUnitViewManager
				.addLearningUnitViewListener(new FLGCheckUpElementInteractionPanel_Adapter());
		learningUnitViewManager
				.addLearningUnitViewListener(new FLGCheckUpElementInteractionPanel_VetoableAdapter());
		assistantMediaExisting = false;
	}

	public boolean isEvaluationMode() {
		return evaluationMode;
	}

	protected void insertViewSpecificInteractionComponents() {
		if (evaluationMode) {
			add(exitEvaluationButton);
			addSeparator();
			add(resetButton);
		} else {
			add(stopAndEvaluationButton);
			add(playButton);
			add(backButton);
			add(forwardButton);
			addSeparator();
			add(resolveButton);
			add(tipButton);
		}
	}

	protected void buildIndependentUI() {
		super.buildIndependentUI();
		evaluationImage = loadImage("evaluationButton.gif");
		stopImage = loadImage("stopButton.gif");
		playButton = new FSLLearningUnitViewElementInteractionButton(
				loadImage("playButton.gif"));
		playButton.setToolTipText(internationalization
				.getString("button.tooltip.play"));
		stopAndEvaluationButton = new FSLLearningUnitViewElementInteractionButton(
				evaluationImage);
		stopAndEvaluationButton.setToolTipText(internationalization
				.getString("button.tooltip.enterEvaluation"));
		forwardButton = new FSLLearningUnitViewElementInteractionButton(
				loadImage("forwardButton.gif"));
		forwardButton.setToolTipText(internationalization
				.getString("button.tooltip.forward"));
		backButton = new FSLLearningUnitViewElementInteractionButton(
				loadImage("backButton.gif"));
		backButton.setToolTipText(internationalization
				.getString("button.tooltip.back"));
		exitEvaluationButton = new FSLLearningUnitViewElementInteractionButton(
				loadImage("exitEvaluationButton.gif"));
		exitEvaluationButton.setToolTipText(internationalization
				.getString("button.tooltip.exitEvaluation"));
		resolveButton = new FSLLearningUnitViewElementInteractionButton(
				loadImage("resolveButton.gif"));
		resolveButton.setToolTipText(internationalization
				.getString("button.tooltip.resolve"));
		tipButton = new FSLLearningUnitViewElementInteractionButton(
				loadImage("tipButton.gif"));
		tipButton.setToolTipText(internationalization
				.getString("button.tooltip.tip"));
		resetButton = new FSLLearningUnitViewElementInteractionButton(
				loadImage("garbage.gif"));
		resetButton.setToolTipText(internationalization
				.getString("button.tooltip.reset"));
		checkUpIsPlaying = false;
		evaluationMode = false;
		enableButtons(false);
		playButton.setEnabled(true);
		playButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				stopAndEvaluationButton.setImage(stopImage);
				stopAndEvaluationButton.setToolTipText(internationalization
						.getString("button.tooltip.stop"));
				enterPlayMode();
			}
		});
		stopAndEvaluationButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (checkUpIsPlaying) {
					checkAnswers();
					if (!(exitPlayMode(examinationModeSelected) == FLGOptionPane.CANCEL_OPTION)) {
						stopAndEvaluationButton.setImage(evaluationImage);
						stopAndEvaluationButton
								.setToolTipText(internationalization
										.getString("button.tooltip.enterEvaluation"));
						if (examinationModeSelected) {
							FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
									.createViewSpecificEvent(
											FLGCheckUpEvent.CHECKUP_EVALUATE_MODE_ENTERED,
											activeLearningUnitViewElementId);
							learningUnitViewManager
									.fireLearningUnitViewEvent(checkUpEvent);
						}
					}
				} else {
					FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
							.createViewSpecificEvent(
									FLGCheckUpEvent.CHECKUP_EVALUATE_MODE_ENTERED,
									activeLearningUnitViewElementId);
					learningUnitViewManager
							.fireLearningUnitViewEvent(checkUpEvent);
				}
			}
		});
		forwardButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				performForwardAction();
			}
		});
		backButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				performBackAction();
			}
		});
		exitEvaluationButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
						.createViewSpecificEvent(
								FLGCheckUpEvent.CHECKUP_EVALUATE_MODE_EXITED,
								activeLearningUnitViewElementId);
				learningUnitViewManager.fireLearningUnitViewEvent(checkUpEvent);
			}
		});
		resetButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int dialogOption = FLGOptionPane.showConfirmDialog(
						internationalization
								.getString("message.resetEvaluationData"),
						internationalization
								.getString("title.resetEvaluationData"),
						FLGOptionPane.YES_NO_OPTION,
						FLGOptionPane.QUESTION_MESSAGE);
				if (dialogOption == FLGOptionPane.YES_OPTION) {
					FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
							.createViewSpecificEvent(
									FLGCheckUpEvent.CHECKUP_RESET_EVALUATION_HISTORY,
									activeLearningUnitViewElementId);
					learningUnitViewManager
							.fireLearningUnitViewEvent(checkUpEvent);
				}
			}
		});
		tipButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				playTrainerVideo();
			}
		});
		resolveButton.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				if (resolveButton.isEnabled() && !resolveMode)
					enterResolveMode();
			}

			public void mouseReleased(MouseEvent e) {
				if (resolveButton.isEnabled() && resolveMode)
					exitResolveMode();
			}
		});
	}

	private void performBackAction() {
		checkAnswers();
		if (!examinationModeSelected) {
			if (!resolveMode) {
				enterResolveMode();
				return;
			}
		}
		if (resolveMode) {
			exitResolveMode();
		}
		currentQuestionNo--;
		activeQuestionIndex--;
		nextQuestion();
		forwardButton.setEnabled(true);
	}

	private void performForwardAction() {
		checkAnswers();
		if (!examinationModeSelected) {
			if (!resolveMode) {
				enterResolveMode();
				return;
			}
		}
		if (resolveMode) {
			exitResolveMode();
		}
		currentQuestionNo++;
		activeQuestionIndex++;
		nextQuestion();
		backButton.setEnabled(true);
	}

	private void nextQuestion() {
		if (questionAlternativesOnly) {
			activateNextAlternative(activeQuestionIndex);
		} else {
			activateNextQuestion(activeQuestionIndex);
		}
	}

	private void playTrainerVideo() {
		FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
				.createViewSpecificEvent(
						FLGCheckUpEvent.CHECKUP_CHECK_ANSWER_REQUESTED,
						activeLearningUnitViewElementId,
						examinationModeSelected, true);
		learningUnitViewManager.fireLearningUnitViewEvent(checkUpEvent);
	}

	protected void buildDependentUI() {
		super.buildDependentUI();
	}

	private void enterResolveMode() {
		resolveMode = true;
		FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
				.createViewSpecificEvent(
						FLGCheckUpEvent.CHECKUP_RESOLVE_MODE_ENTERED,
						activeLearningUnitViewElementId);
		learningUnitViewManager.fireLearningUnitViewEvent(checkUpEvent);
	}

	private void exitResolveMode() {
		resolveMode = false;
		FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
				.createViewSpecificEvent(
						FLGCheckUpEvent.CHECKUP_RESOLVE_MODE_EXITED,
						activeLearningUnitViewElementId);
		learningUnitViewManager.fireLearningUnitViewEvent(checkUpEvent);
	}

	private void enableButtons(boolean enabled) {
		playButton.setEnabled(enabled);
		forwardButton.setEnabled(enabled);
		backButton.setEnabled(enabled);
		tipButton.setEnabled(false);
		resolveButton.setEnabled(false);
	}

	private void enterPlayMode() {
		exitResolveMode();
		stopAndEvaluationButton.setImage(stopImage);
		answerQuotas = new Hashtable();
		playList = new ArrayList();
		FLGCheckUpElement checkUpElement = (FLGCheckUpElement) learningUnitViewElementsManager
				.getLearningUnitViewElement(activeLearningUnitViewElementId,
						false);
		checkUpStartElement = checkUpElement;
		if (checkUpElement != null) {
			if (!(FLGOptionPane
					.showConfirmDialog(
							selectAlternativesDialogContentComponent,
							internationalization
									.getString("dialog.selectAlternatives.title"),
							FLGOptionPane.OK_CANCEL_OPTION,
							FLGOptionPane.PLAIN_MESSAGE) == FLGOptionPane.OK_OPTION)) {
				return;
			}
			switchExaminationMode(examinationModeSelected);
			questionList = createSelectedNodeQuestionsList(checkUpElement);
			boolean random = selectAlternativesDialogContentComponent
					.getRandom();
			playList = generatePlayList(questionList,
					selectAlternativesDialogContentComponent.getNoQuestions(),
					random);
		} else {
			FLGOptionPane.showMessageDialog(internationalization
					.getString("message.nothingSelected"), internationalization
					.getString("title.nothingSelected"),
					FLGOptionPane.WARNING_MESSAGE);
			return;
		}
		if (playList == null || playList.size() < 1) {
			FLGOptionPane.showMessageDialog(internationalization
					.getString("message.nothingToPlay"), internationalization
					.getString("title.nothingToPlay"),
					FLGOptionPane.WARNING_MESSAGE);
			return;
		}
		topLevelElementId = activeLearningUnitViewElementId;
		if (playList.size() > 1) {
			forwardButton.setEnabled(true);
		}
		playButton.setEnabled(false);
		checkUpIsPlaying = true;
		currentQuestionNo = 1;
		// display questions
		FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
				.createViewSpecificEvent(
						FLGCheckUpEvent.CHECKUP_PLAY_MODE_ENTERED, playList
								.size(), examinationModeSelected);
		learningUnitViewManager.fireLearningUnitViewEvent(checkUpEvent);
		activeQuestionIndex = 0;
		questionIndexHistory = new Hashtable();
		if (questionAlternativesOnly) {
			activateNextAlternative(activeQuestionIndex);
		} else {
			activateNextQuestion(activeQuestionIndex);
		}
	}

	private int exitPlayMode(boolean askForEvaluation) {
		exitResolveMode();
		int dialogOption = FLGOptionPane.OK_OPTION;
		if (checkUpIsPlaying) {
			if (askForEvaluation) {
				dialogOption = FLGOptionPane.showConfirmDialog(
						internationalization
								.getString("message.saveAnswersForEvaluation"),
						internationalization.getString("title.exitPlayMode"),
						FLGOptionPane.YES_NO_CANCEL_OPTION,
						FLGOptionPane.QUESTION_MESSAGE);
				if (dialogOption == FLGOptionPane.CANCEL_OPTION) {
					return dialogOption;
				}
			} else {
				FLGOptionPane.showConfirmDialog(internationalization
						.getString("message.runFinished"), internationalization
						.getString("title.exitPlayMode"),
						FLGOptionPane.OK_OPTION,
						FLGOptionPane.INFORMATION_MESSAGE);
			}
		}
		switchExaminationMode(false);
		FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
				.createViewSpecificEvent(
						FLGCheckUpEvent.CHECKUP_PLAY_MODE_EXITED,
						dialogOption == FLGOptionPane.YES_OPTION);
		learningUnitViewManager.fireLearningUnitViewEvent(checkUpEvent);
		if (checkUpStartElement != null && checkUpStartElement.getId() != null) {
			learningUnitViewManager.setActiveLearningUnitViewElementId(
					checkUpStartElement.getId(), null);
		}
		return dialogOption;
	}

	private void evaluate() {
		if (learningUnitViewElementsManager != null) {
			String[] elementList = learningUnitViewElementsManager
					.getAllLearningUnitViewElementIds();
			for (int i = 0; i < elementList.length; i++) {
				FLGCheckUpElement checkUpElement = (FLGCheckUpElement) learningUnitViewElementsManager
						.getLearningUnitViewElement(elementList[i], false);
				if (answerQuotas != null
						&& answerQuotas.get(elementList[i]) != null) {
					String[] quotas = (String[]) answerQuotas
							.get(elementList[i]);
				}
			}
			FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
					.createViewSpecificEvent(
							FLGCheckUpEvent.CHECKUP_UPDATE_LAST_RUN_RESULTS,
							answerQuotas, topLevelElementId);
			learningUnitViewManager.fireLearningUnitViewEvent(checkUpEvent);
		}
	}

	private void checkAnswers() {
		FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
				.createViewSpecificEvent(
						FLGCheckUpEvent.CHECKUP_CHECK_ANSWER_REQUESTED,
						questionToActivateId, examinationModeSelected);
		learningUnitViewManager.fireLearningUnitViewEvent(checkUpEvent);
	}

	private void activateNextQuestion(int nextQuestionIndex) {
		boolean allowedQuestionFound = false;
		// find next question in playList and select question alternative
		if ((nextQuestionIndex >= 0) && (nextQuestionIndex < playList.size())) {
			backButton.setEnabled(nextQuestionIndex != 0);
			forwardButton.setEnabled(nextQuestionIndex != playList.size() - 1);
			activeCheckUpElementID = (String) playList.get(nextQuestionIndex);
			String[] questionChildIds = learningUnitViewElementsManager
					.getChildrenIdsOfLearningUnitViewElement(activeCheckUpElementID);
			String[] questionsIdsToSelectFrom = new String[QUESTION_ALTERNATIVES];
			for (int i = 0; i < questionsIdsToSelectFrom.length; i++) {
				questionsIdsToSelectFrom[i] = "";
			}
			// any children at question element at all?
			if (questionChildIds.length < 1
					|| containOnlyGapTexts(questionChildIds)) { // gap texts
																// temporary
																// disabled
				activateNextQuestion(++nextQuestionIndex);
				return;
			}
			for (int i = 0; i < questionChildIds.length; i++) {
				FLGCheckUpElement childElement = (FLGCheckUpElement) learningUnitViewElementsManager
						.getLearningUnitViewElement(questionChildIds[i], false);
				if (childElement.getType().equals(
						FLGCheckUpElement.ELEMENT_TYPE_MULTIPLECHOICE)
						&& multipleChoiceAllowed) {
					questionsIdsToSelectFrom[MULTIPLECHOICE] = childElement
							.getId();
				}
				if (childElement.getType().equals(
						FLGCheckUpElement.ELEMENT_TYPE_GAPTEXT)
						&& gapTextAllowed) {
					// gap texts temporary disabled
					questionsIdsToSelectFrom[GAPTEXT] = childElement.getId();
				}
				if (childElement.getType().equals(
						FLGCheckUpElement.ELEMENT_TYPE_RELATOR)
						&& relatorAllowed) {
					questionsIdsToSelectFrom[RELATOR] = childElement.getId();
				}
			}
			// any displayable question alternatives?
			if (!containAllowedQuestionTypes(questionsIdsToSelectFrom)) {
				activateNextQuestion(++nextQuestionIndex);
				return;
			}
			// already displayed?
			if (questionIndexHistory.get(activeCheckUpElementID) != null) {
				questionToActivateId = (String) questionIndexHistory
						.get(activeCheckUpElementID);
			} else {
				int ix = (int) (QUESTION_ALTERNATIVES * Math.random());
				while (questionsIdsToSelectFrom[ix].equals("")) {
					ix = (int) (QUESTION_ALTERNATIVES * Math.random());
				}
				questionToActivateId = questionsIdsToSelectFrom[ix];
				questionIndexHistory.put(activeCheckUpElementID,
						questionToActivateId);
				allowedQuestionFound = true;
			}
			FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
					.createViewSpecificEvent(
							FLGCheckUpEvent.CHECKUP_NEXT_QUESTION_SELECTED,
							questionToActivateId, currentQuestionNo);
			learningUnitViewManager.fireLearningUnitViewEvent(checkUpEvent);
		} else {
			if (!allowedQuestionFound) {
				FLGOptionPane.showMessageDialog(internationalization
						.getString("message.noAllowedQuestionsFound"),
						internationalization.getString("title.exitPlayMode"),
						FLGOptionPane.INFORMATION_MESSAGE);
				exitPlayMode(false);
			}
		}
	}

	private boolean containAllowedQuestionTypes(
			String[] questionsIdsToSelectFrom) {
		for (int i = 0; i < questionsIdsToSelectFrom.length; i++) {
			if (!questionsIdsToSelectFrom[MULTIPLECHOICE].equals("")
					&& multipleChoiceAllowed)
				return true;
			if (!questionsIdsToSelectFrom[GAPTEXT].equals("") && gapTextAllowed)
				return true;
			if (!questionsIdsToSelectFrom[RELATOR].equals("") && relatorAllowed)
				return true;
		}
		return false;
	}

	private boolean containOnlyGapTexts(String[] questionIds) {
		for (int i = 0; i < questionIds.length; i++) {
			FLGCheckUpElement childElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(questionIds[i], false);
			if (!childElement.getType().equals(
					FLGCheckUpElement.ELEMENT_TYPE_GAPTEXT)) {
				return false;
			}
		}
		return true;
	}

	private void activateNextAlternative(int nextAlternativeIndex) {
		if ((nextAlternativeIndex >= 0)
				&& (nextAlternativeIndex < playList.size())) {
			backButton.setEnabled(nextAlternativeIndex != 0);
			forwardButton
					.setEnabled(nextAlternativeIndex != playList.size() - 1);
			activeCheckUpElementID = (String) playList
					.get(nextAlternativeIndex);
			FLGCheckUpElement childElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(activeCheckUpElementID, false);
			if (childElement.getType().equals(
					FLGCheckUpElement.ELEMENT_TYPE_MULTIPLECHOICE)
					&& multipleChoiceAllowed) {
				questionToActivateId = childElement.getId();
			}
			if (childElement.getType().equals(
					FLGCheckUpElement.ELEMENT_TYPE_GAPTEXT)
					&& gapTextAllowed) {
				questionToActivateId = childElement.getId();
			}
			if (childElement.getType().equals(
					FLGCheckUpElement.ELEMENT_TYPE_RELATOR)
					&& relatorAllowed) {
				questionToActivateId = childElement.getId();
			}
			FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
					.createViewSpecificEvent(
							FLGCheckUpEvent.CHECKUP_NEXT_QUESTION_SELECTED,
							questionToActivateId, currentQuestionNo);
			learningUnitViewManager.fireLearningUnitViewEvent(checkUpEvent);
		}
	}

	/**
	 * This method creates a playList with questions presented in hierarchical
	 * order complete depth level first, then next deeper level
	 */
	private java.util.List createLeftRightOrderedPlayList() {
		// TBD
		return null;
	}

	/**
	 * This method creates a playList with questions in semantical order:
	 * questions from highest level first, then next deeper level. if the
	 * question from the highest level with all child is completed, the next
	 * question from the highest level will be presented.
	 */
	private java.util.List createTopDownOrderedPlayList() {
		return null;
	}

	private Image loadImage(String imageFileName) {
		return FLGImageUtility.loadImageAndWait(getClass().getResource(
				"images/" + imageFileName));
	}

	/**
	 * This method generates an random playlist with a given no of questions if
	 * availabe
	 */
	private java.util.List generatePlayList(java.util.List questionList,
			int maxNoQuestions, boolean random) {
		java.util.List playList = new ArrayList();
		int noQuestions = Math.min(maxNoQuestions, questionList.size());
		System.out.println("\ngeneratePlayList() - random = " + random);
		System.out.println("for " + noQuestions + " questions.");
		java.util.List ixList = new ArrayList();

		// generate random ordered list
		do {
			Integer nextQuestionNo = new Integer(
					(int) (Math.random() * questionList.size()));
			if (!ixList.contains(nextQuestionNo)) {
				ixList.add(nextQuestionNo);
			}
		} while (ixList.size() < noQuestions);
		// if desired, get things straight...
		Object[] ixArray = ixList.toArray();
		if (!random) {
			Arrays.sort(ixArray);
		}
		for (int ix = 0; ix < noQuestions; ix++) {
			playList.add(questionList.get(((Integer) ixArray[ix]).intValue()));
		}
		System.out.println("done.\n");
		return playList;
	}

	/**
	 * This method creates a top-down-ordered list of all child questions of the
	 * selected element
	 */
	private java.util.List createSelectedNodeQuestionsList(
			FLGCheckUpElement checkUpElement) {
		if (checkUpElement.getType().equals(
				FLGCheckUpElement.ELEMENT_TYPE_FOLDER)
				|| checkUpElement.getType().equals(
						FLGCheckUpElement.ELEMENT_TYPE_QUESTION)) {
			java.util.List playList = generateQuestionElementsPlayList(checkUpElement);
			if (playList.size() == 0) {
				questionAlternativesOnly = true;
				playList = createQuestionAlternativesListOnly(checkUpElement);
			} else {
				questionAlternativesOnly = false;
			}
			return playList;
		} else if (checkUpElement.getType().equals(
				FLGCheckUpElement.ELEMENT_TYPE_MULTIPLECHOICE)
				|| checkUpElement.getType().equals(
						FLGCheckUpElement.ELEMENT_TYPE_RELATOR)
				|| checkUpElement.getType().equals(
						FLGCheckUpElement.ELEMENT_TYPE_GAPTEXT)) {
			questionAlternativesOnly = true;
			return createQuestionAlternativesListOnly(checkUpElement);
		}
		return null;
	}

	private java.util.List generateQuestionElementsPlayList(
			FLGCheckUpElement checkUpElement) {
		java.util.List questionList = new ArrayList();
		if (checkUpElement.getType().equals(
				FLGCheckUpElement.ELEMENT_TYPE_QUESTION)) {
			questionList.add(checkUpElement.getId());
		}
		String[] childrenOfSelectedNodeIDs = learningUnitViewElementsManager
				.getDescendantIdsOfLearningUnitViewElement(checkUpElement
						.getId());
		for (int i = 0; i < childrenOfSelectedNodeIDs.length; i++) {
			FLGCheckUpElement childElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(childrenOfSelectedNodeIDs[i],
							false);
			if (childElement.getType().equals(
					FLGCheckUpElement.ELEMENT_TYPE_QUESTION)) {
				questionList.add(childElement.getId());
			}
		}
		return questionList;
	}

	/**
	 * This method creates a list containing only question alternatives
	 * according to the user preferences.
	 */
	private java.util.List createQuestionAlternativesListOnly(
			FLGCheckUpElement checkUpElement) {
		questionAlternativesList = new ArrayList();
		if (checkUpElement.getType().equals(
				FLGCheckUpElement.ELEMENT_TYPE_MULTIPLECHOICE)
				&& multipleChoiceAllowed) {
			questionAlternativesList.add(checkUpElement.getId());
		}
		if (checkUpElement.getType().equals(
				FLGCheckUpElement.ELEMENT_TYPE_GAPTEXT)
				&& gapTextAllowed) {
			questionAlternativesList.add(checkUpElement.getId());
		}
		if (checkUpElement.getType().equals(
				FLGCheckUpElement.ELEMENT_TYPE_RELATOR)
				&& relatorAllowed) {
			questionAlternativesList.add(checkUpElement.getId());
		}
		String[] childrenOfSelectedNodeIDs = learningUnitViewElementsManager
				.getDescendantIdsOfLearningUnitViewElement(checkUpElement
						.getId());
		for (int i = 0; i < childrenOfSelectedNodeIDs.length; i++) {
			FLGCheckUpElement childElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(childrenOfSelectedNodeIDs[i],
							false);
			if (multipleChoiceAllowed
					&& (childElement.getType()
							.equals(FLGCheckUpElement.ELEMENT_TYPE_MULTIPLECHOICE))) {
				questionAlternativesList.add(childElement.getId());
			}
			if (childElement.getType().equals(
					FLGCheckUpElement.ELEMENT_TYPE_GAPTEXT)
					&& gapTextAllowed) {
				questionAlternativesList.add(childElement.getId());
			}
			if (childElement.getType().equals(
					FLGCheckUpElement.ELEMENT_TYPE_RELATOR)
					&& relatorAllowed) {
				questionAlternativesList.add(childElement.getId());
			}
		}
		return questionAlternativesList;
	}

	class FLGCheckUpRunConfigurationPanel extends JPanel {
		public FLGCheckUpRunConfigurationPanel() {
			// Panel for mode selection
			JPanel runConfigPanel = new JPanel();
			runConfigPanel.setLayout(new FLGColumnLayout());
			runConfigPanel.setBorder(BorderFactory.createCompoundBorder(
					BorderFactory.createTitledBorder(internationalization
							.getString("border.title.runConfig")),
					BorderFactory.createEmptyBorder(10, 10, 10, 10)));
			radioButtonTrainingMode = new JRadioButton(internationalization
					.getString("button.label.checkUpTrainingMode"), true);
			radioButtonExamMode = new JRadioButton(internationalization
					.getString("button.label.checkUpExamMode"), false);
			ButtonGroup modeSelectionButtonGroup = new ButtonGroup();
			modeSelectionButtonGroup.add(radioButtonTrainingMode);
			modeSelectionButtonGroup.add(radioButtonExamMode);
			runConfigPanel
					.add(radioButtonTrainingMode, FLGColumnLayout.LEFTEND);
			runConfigPanel.add(radioButtonExamMode, FLGColumnLayout.LEFTEND);

			// panel for alternatives selection
			JPanel alternativesPanel = new JPanel();
			alternativesPanel.setLayout(new FLGColumnLayout());
			alternativesPanel.setBorder(BorderFactory.createCompoundBorder(
					BorderFactory.createTitledBorder(internationalization
							.getString("border.title.alternatives")),
					BorderFactory.createEmptyBorder(10, 10, 10, 10)));
			checkBoxMultipleChoice = new JCheckBox(internationalization
					.getString("button.allowMultipleChoice"), true);
			checkBoxGapText = new JCheckBox(internationalization
					.getString("button.allowGapText"), false);
			checkBoxRelator = new JCheckBox(internationalization
					.getString("button.allowRelator"), true);
			alternativesPanel.add(checkBoxMultipleChoice,
					FLGColumnLayout.LEFTEND);
			alternativesPanel.add(checkBoxRelator, FLGColumnLayout.LEFTEND);

			// panel for question no selection
			JPanel questionNoPanel = new JPanel();
			questionNoPanel.setLayout(new FLGColumnLayout());
			questionNoPanel.setBorder(BorderFactory.createCompoundBorder(
					BorderFactory.createTitledBorder(internationalization
							.getString("border.title.noQuestions")),
					BorderFactory.createEmptyBorder(10, 10, 10, 10)));
			checkBoxRandomOrder = new JCheckBox(internationalization
					.getString("checkBox.random.label"), false);
			ButtonGroup noQuestionsButtonGroup = new ButtonGroup();
			radioButtonAllQuestions = new JRadioButton(internationalization
					.getString("button.label.allQuestions"));
			radioButtonAllQuestionsSelectedElement = new JRadioButton(
					internationalization
							.getString("button.label.allChildrenQuestions"),
					true);
			radioButtonNoQuestions = new JRadioButton(internationalization
					.getString("button.label.maxNoQuestions"));
			noQuestionsButtonGroup.add(radioButtonAllQuestions);
			noQuestionsButtonGroup.add(radioButtonAllQuestionsSelectedElement);
			noQuestionsButtonGroup.add(radioButtonNoQuestions);
			tf_noQuestions = new JTextField(5);
			tf_noQuestions.setDocument(new FLGDigitDocument());
			tf_noQuestions.setEnabled(false);
			// questionNoPanel.add(radioButtonAllQuestions,
			// FLGColumnLayout.LEFTEND);
			questionNoPanel.add(radioButtonAllQuestionsSelectedElement,
					FLGColumnLayout.LEFTEND);
			questionNoPanel.add(radioButtonNoQuestions, FLGColumnLayout.LEFT);
			questionNoPanel.add(tf_noQuestions, FLGColumnLayout.LEFTEND);
			questionNoPanel.add(checkBoxRandomOrder, FLGColumnLayout.LEFTEND);

			tf_noQuestions.addFocusListener(new FocusAdapter() {
				public void focusLost(FocusEvent e) {
					if (Integer.parseInt(tf_noQuestions.getText()) > questionList
							.size()) {
						tf_noQuestions.setText("" + questionList.size());
					}
				}

				public void focusGained(FocusEvent e) {
					tf_noQuestions.selectAll();
				}
			});

			radioButtonAllQuestions.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					tf_noQuestions.setText("" + questionList.size());
					tf_noQuestions.setEnabled(false);
				}
			});
			radioButtonAllQuestionsSelectedElement
					.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) {
							tf_noQuestions.setText("" + questionList.size());
							tf_noQuestions.setEnabled(false);
						}
					});
			radioButtonNoQuestions.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					tf_noQuestions.setEnabled(true);
				}
			});
			checkBoxMultipleChoice.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					multipleChoiceAllowed = checkBoxMultipleChoice.isSelected();
				}
			});
			checkBoxGapText.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					gapTextAllowed = checkBoxGapText.isSelected();
				}
			});
			checkBoxRelator.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					relatorAllowed = checkBoxRelator.isSelected();
				}
			});
			radioButtonExamMode.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					examinationModeSelected = radioButtonExamMode.isSelected();
				}
			});
			radioButtonTrainingMode.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					examinationModeSelected = radioButtonExamMode.isSelected();
				}
			});
			multipleChoiceAllowed = checkBoxMultipleChoice.isSelected();
			gapTextAllowed = checkBoxGapText.isSelected();
			relatorAllowed = checkBoxRelator.isSelected();
			examinationModeSelected = radioButtonExamMode.isSelected();
			setLayout(new BorderLayout());
			add(runConfigPanel, BorderLayout.NORTH);
			add(questionNoPanel, BorderLayout.CENTER);
			add(alternativesPanel, BorderLayout.SOUTH);
		}

		protected int getNoQuestions() {
			int no = 0;
			try {
				no = Integer.parseInt(tf_noQuestions.getText());
			} catch (Exception e) {
				no = questionList.size();
			}
			return no;
		}

		protected boolean getRandom() {
			return checkBoxRandomOrder.isSelected();
		}
	}

	private void switchExaminationMode(boolean examMode) {
		FSLLearningUnitViewEvent event = FLGCheckUpEvent
				.createViewSpecificEvent(
						FLGCheckUpEvent.CHECKUP_SWITCH_EXAM_MODE, 0, examMode);
		learningUnitViewManager.fireLearningUnitViewEvent(event);
	}

	class FLGCheckUpElementInteractionPanel_VetoableAdapter extends
			FSLLearningUnitViewVetoableAdapter {
		public void learningUnitViewDeactivating(FSLLearningUnitViewEvent event) {
			FSLLearningUnitViewVetoableEvent vetoableEvent = (FSLLearningUnitViewVetoableEvent) event;
			if (checkUpIsPlaying) {
				int dialogOption = FLGOptionPane.showConfirmDialog(
						internationalization
								.getString("message.deactivateCheckUp"),
						internationalization
								.getString("title.deactivateCheckUp"),
						FLGOptionPane.YES_NO_OPTION,
						FLGOptionPane.QUESTION_MESSAGE);
				if (dialogOption == FLGOptionPane.NO_OPTION) {
					vetoableEvent.setVeto();
				}
			}
		}
	}

	class FLGCheckUpElementInteractionPanel_Adapter extends
			FSLLearningUnitViewAdapter {
		public void learningUnitViewElementActivated(
				FSLLearningUnitViewEvent event) {
			try {
				FSLLearningUnitViewElement element = learningUnitViewManager
						.getLearningUnitViewElementsManager()
						.getLearningUnitViewElement(
								event.getActiveLearningUnitViewElementId(),
								false);
				boolean enable = (element != null)
						&& !(element.getType()
								.equals(FLGCheckUpElement.ELEMENT_TYPE_QUESTION))
						&& !(element.getType()
								.equals(FLGCheckUpElement.ELEMENT_TYPE_FOLDER));
				resolveButton.setEnabled(enable);
			} catch (Exception e) {
				resolveButton.setEnabled(false);
			}
		}

		public void learningUnitViewElementsSelected(
				FSLLearningUnitViewEvent event) {
			if (resolveMode) {
				exitResolveMode();
			}
		}

		public void learningUnitViewDeactivated(FSLLearningUnitViewEvent event) {
			evaluationMode = false;
			exitPlayMode(examinationModeSelected);
			FSLLearningUnitViewEvent checkUpEvent = FLGCheckUpEvent
					.createViewSpecificEvent(
							FLGCheckUpEvent.CHECKUP_EVALUATE_MODE_EXITED,
							activeLearningUnitViewElementId);
			learningUnitViewManager.fireLearningUnitViewEvent(checkUpEvent);
		}

		public void learningUnitViewSpecificEventOccurred(
				FSLLearningUnitViewEvent event) {
			FLGCheckUpEvent checkUpEvent = (FLGCheckUpEvent) event;
			if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_NEXT_QUESTION_SELECTED) {
				FSLLearningUnitViewEvent elementActivatedEvent = FSLLearningUnitViewEvent
						.createElementActivatedEvent(learningUnitViewManager
								.getLearningUnitViewManagerId(), checkUpEvent
								.getActivatedLearningUnitViewElementId(), null,
								false);
				learningUnitViewManager
						.fireLearningUnitViewEvent(elementActivatedEvent);
				tipButton.setEnabled(assistantMediaExisting
						&& !examinationModeSelected);
				resolveButton.setEnabled(!examinationModeSelected);
			}
			if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_PLAY_MODE_EXITED) {
				checkUpIsPlaying = false;
				forwardButton.setEnabled(false);
				backButton.setEnabled(false);
				playButton.setEnabled(true);
				tipButton.setEnabled(false);
				resolveButton.setEnabled(true);
				if (checkUpEvent.getSaveAnswersForEvaluation()) {
					evaluate();
				}
			}
			if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_ANSWER_CHECKED) {
				String questionAlternativeElementId = checkUpEvent
						.getActivatedLearningUnitViewElementId();
				String questionElementId;
				String[] quotas = new String[QUESTION_ALTERNATIVES];
				for (int i = 0; i < quotas.length; i++)
					quotas[i] = "" + (-1);
				if (questionAlternativesOnly) {
					questionElementId = questionAlternativeElementId;
				} else {
					questionElementId = learningUnitViewElementsManager
							.getParentIdOfLearningUnitViewElement(questionAlternativeElementId);
				}
				FLGCheckUpElement checkUpElement = (FLGCheckUpElement) learningUnitViewElementsManager
						.getLearningUnitViewElement(questionElementId, false);
				if (checkUpElement.getType().equals(
						FLGCheckUpElement.ELEMENT_TYPE_QUESTION)) {
					checkUpElement = (FLGCheckUpElement) learningUnitViewElementsManager
							.getLearningUnitViewElement(
									questionAlternativeElementId, false);
				}
				if (checkUpElement.getType().equals(
						FLGCheckUpElement.ELEMENT_TYPE_MULTIPLECHOICE)) {
					quotas[MULTIPLECHOICE] = "" + checkUpEvent.getAnswerQuota();
					answerQuotas.put(questionElementId, quotas);
				} else if (checkUpElement.getType().equals(
						FLGCheckUpElement.ELEMENT_TYPE_GAPTEXT)) {
					quotas[GAPTEXT] = "" + checkUpEvent.getAnswerQuota();
					answerQuotas.put(questionElementId, quotas);
				}
				if (checkUpElement.getType().equals(
						FLGCheckUpElement.ELEMENT_TYPE_RELATOR)) {
					quotas[RELATOR] = "" + checkUpEvent.getAnswerQuota();
					answerQuotas.put(questionElementId, quotas);
				}
			}
			if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_EVALUATE_MODE_ENTERED) {
				evaluationMode = true;
				insertViewSpecificInteractionComponents();
				buildDependentUI();
			}
			if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_EVALUATE_MODE_EXITED) {
				evaluationMode = false;
				insertViewSpecificInteractionComponents();
				buildDependentUI();
			}
			if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_FIRST_ACTIVATED) {
				assistantMediaExisting = checkUpEvent
						.isAssistantMediaExisting();
			}
		}
	}
}
