/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementsContentsPanel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.Hashtable;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.*;
import freestyleLearning.learningUnitViewAPI.util.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.events.learningUnitViewEvent.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

public class FLGCheckUpMultipleChoiceElementContentPanel extends
		FSLAbstractLearningUnitViewElementContentPanel {
	private JComponent[] editToolBarComponents;

	private FLGHtmlPane questionHtmlPane;

	private Vector answersHtmlPanes;

	private Vector answersButtons;

	private JPanel answersPanel;

	private FLGInternationalization internationalization;

	private boolean answersSetModified;

	private boolean checkUpPlaying = false;

	private boolean[] answersSelectedByUser;

	private Hashtable answerSelectionHistory;

	private Color htmlPaneBackgroundColor;

	private JPanel scrollPaneView;

	public void init(FSLLearningUnitViewManager learningUnitViewManager,
			FSLLearningUnitEventGenerator learningUnitEventGenerator,
			boolean editMode) {
		internationalization = new FLGInternationalization(
				"freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementsContentsPanel.internationalization",
				getClass().getClassLoader());
		super.init(learningUnitViewManager, learningUnitEventGenerator,
				editMode);
		answerSelectionHistory = new Hashtable();
		learningUnitEventGenerator
				.addLearningUnitListener(new FLGCheckUpLearningUnitAdapter());
		learningUnitViewManager
				.addLearningUnitViewListener(new FLGCheckUpLearningUnitViewAdapter());
	}

	protected java.awt.Component getPrintableComponent() {
		JPanel scrollPaneView = new JPanel(new BorderLayout());
		scrollPaneView.setSize(this.scrollPaneView.getSize());
		FLGScrollPane scrollPane = new FLGScrollPane(scrollPaneView);
		scrollPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
		scrollPane
				.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane
				.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		FLGHtmlPane questionHtmlPane = new FLGHtmlPane();
		questionHtmlPane.setEditable(false);
		questionHtmlPane.setBase(this.questionHtmlPane.getBase());
		questionHtmlPane.setText(FLGHtmlUtilities
				.createPrintableHtmlText(this.questionHtmlPane.getText()));
		scrollPaneView.add(questionHtmlPane, BorderLayout.NORTH);
		// answers
		JPanel answersPanel = new JPanel(new FLGSingleColumnLayout(10));
		answersPanel.setOpaque(false);
		answersPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
		scrollPaneView.add(answersPanel, BorderLayout.CENTER);
		for (int i = 0; i < answersHtmlPanes.size(); i++) {
			FLGHtmlPane originalAnswerHtmlPane = (FLGHtmlPane) answersHtmlPanes
					.get(i);
			FLGHtmlPane answerHtmlPane = new FLGHtmlPane();
			answerHtmlPane.setBase(originalAnswerHtmlPane.getBase());
			answerHtmlPane.setText(FLGHtmlUtilities
					.createPrintableHtmlText(originalAnswerHtmlPane.getText()));
			JPanel answerPanel = new JPanel(new BorderLayout());
			answerPanel.setOpaque(false);
			answerPanel.add(answerHtmlPane, BorderLayout.CENTER);
			JPanel answerButtonPanel = new JPanel(new FlowLayout(
					FlowLayout.LEFT, 0, 0));
			answerButtonPanel.setOpaque(false);
			answerButtonPanel.setBorder(BorderFactory.createEmptyBorder(0, 0,
					0, 10));
			FLGCheckUpMultipleChoiceAnswerButton answerButton = ((FLGCheckUpMultipleChoiceAnswerButton) answersButtons
					.get(i)).copy(null);
			;
			answerButtonPanel.add(answerButton);
			answerPanel.add(answerButtonPanel, BorderLayout.WEST);
			answersPanel.add(answerPanel);
		}
		return scrollPaneView;
	}

	public boolean isModifiedByUserInput() {
		boolean modified = false;
		if (learningUnitViewElementsManager != null
				&& learningUnitViewElementId != null) {
			FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(learningUnitViewElementId,
							false);
			// question modified?
			modified = modified || questionHtmlPane.isModifiedByUserInput();
			int answersCount = learningUnitViewElement.getMultipleChoice()
					.getMultipleChoiceAnswers().size();
			for (int i = 0; i < answersCount; i++) {
				FLGCheckUpElementMultipleChoiceAnswer answer = (FLGCheckUpElementMultipleChoiceAnswer) learningUnitViewElement
						.getMultipleChoice().getMultipleChoiceAnswers().get(i);
				FLGHtmlPane answerHtmlPane = (FLGHtmlPane) answersHtmlPanes
						.get(i);
				FLGCheckUpMultipleChoiceAnswerButton answerButton = (FLGCheckUpMultipleChoiceAnswerButton) answersButtons
						.get(i);
				// answer modified ?
				modified = modified || answerHtmlPane.isModifiedByUserInput();
				// answer button status modified ?
				boolean answerIsRight = learningUnitViewElement
						.getMultipleChoice().getRightAnswersIds().contains(
								answer.getId());
				modified = modified
						|| (answerButton.isSelected() && !answerIsRight);
				modified = modified
						|| (!answerButton.isSelected() && answerIsRight);
			}
			modified = modified || answersSetModified;
		}
		return modified;
	}

	public void saveUserChanges() {
		answersSetModified = false;
		File htmlFile;
		FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
				.getLearningUnitViewElement(learningUnitViewElementId, true);
		if (questionHtmlPane.isModifiedByUserInput()) {
			// save the question
			if (learningUnitViewElement.getMultipleChoice()
					.getQuestionHtmlFileName() == null) {
				htmlFile = learningUnitViewElementsManager
						.createNewFileForElementsExternalData(
								FLGCheckUpElement.ELEMENT_TYPE_MULTIPLECHOICE,
								".html", learningUnitViewElementId);
				learningUnitViewElement.getMultipleChoice()
						.setQuestionHtmlFileName(htmlFile.getName());
			} else {
				String relativeFileName = learningUnitViewElementsManager
						.getRelativeFileNameVersionForWriting(
								learningUnitViewElement.getMultipleChoice()
										.getQuestionHtmlFileName(),
								learningUnitViewElement,
								FLGCheckUpElement.ELEMENT_TYPE_MULTIPLECHOICE,
								".html");
				learningUnitViewElement.getMultipleChoice()
						.setQuestionHtmlFileName(relativeFileName);
				htmlFile = learningUnitViewElementsManager
						.resolveRelativeFileName(relativeFileName,
								learningUnitViewElement);
			}
			FLGFileUtility.writeStringIntoFile(questionHtmlPane.getText(),
					htmlFile);
		}
		// save the answers
		int answersCount = learningUnitViewElement.getMultipleChoice()
				.getMultipleChoiceAnswers().size();
		for (int i = 0; i < answersCount; i++) {
			FLGHtmlPane answerHtmlPane = (FLGHtmlPane) answersHtmlPanes.get(i);
			FLGCheckUpMultipleChoiceAnswerButton answerButton = (FLGCheckUpMultipleChoiceAnswerButton) answersButtons
					.get(i);
			FLGCheckUpElementMultipleChoiceAnswer answer = (FLGCheckUpElementMultipleChoiceAnswer) learningUnitViewElement
					.getMultipleChoice().getMultipleChoiceAnswers().get(i);
			if (answerHtmlPane.isModifiedByUserInput()) {
				if (answer.getHtmlFileName() == null) {
					htmlFile = learningUnitViewElementsManager
							.createNewFileForElementsExternalData(
									FLGCheckUpElement.ELEMENT_TYPE_MULTIPLECHOICE,
									".html", learningUnitViewElementId);
					answer.setHtmlFileName(htmlFile.getName());
				} else {
					String relativeFileName = learningUnitViewElementsManager
							.getRelativeFileNameVersionForWriting(
									answer.getHtmlFileName(),
									learningUnitViewElement,
									FLGCheckUpElement.ELEMENT_TYPE_MULTIPLECHOICE,
									".html");
					answer.setHtmlFileName(relativeFileName);
					htmlFile = learningUnitViewElementsManager
							.resolveRelativeFileName(relativeFileName,
									learningUnitViewElement);
				}
				FLGFileUtility.writeStringIntoFile(answerHtmlPane.getText(),
						htmlFile);
			}
			// save the answer button status
			boolean answerWasRight = learningUnitViewElement
					.getMultipleChoice().getRightAnswersIds().contains(
							answer.getId());
			if (answerButton.isSelected() && !answerWasRight)
				learningUnitViewElement.getMultipleChoice()
						.getRightAnswersIds().add(answer.getId());
			if (!answerButton.isSelected() && answerWasRight)
				learningUnitViewElement.getMultipleChoice()
						.getRightAnswersIds().remove(answer.getId());
		}
	}

	public void updateUI() {
		if (questionHtmlPane != null)
			FSLLearningUnitViewUtilities.updateHtmlPaneUI(questionHtmlPane);
		if (answersHtmlPanes != null) {
			for (int i = 0; i < answersHtmlPanes.size(); i++) {
				FLGHtmlPane answerHtmlPane = (FLGHtmlPane) answersHtmlPanes
						.get(i);
				FSLLearningUnitViewUtilities.updateHtmlPaneUI(answerHtmlPane);
			}
		}
		if (answersPanel != null)
			answersPanel.updateUI();
	}

	protected void setActiveLearningUnitViewElementPanel(boolean active) {
		super.setActiveLearningUnitViewElementPanel(active);
		questionHtmlPane.setEditable(editMode
				&& activeLearningUnitViewElementPanel);
		if (answersHtmlPanes != null) {
			for (int i = 0; i < answersHtmlPanes.size(); i++) {
				FLGHtmlPane answerHtmlPane = (FLGHtmlPane) answersHtmlPanes
						.get(i);
				answerHtmlPane.setBorder(BorderFactory.createEmptyBorder(5, 5,
						5, 5));
				answerHtmlPane.setEditable(editMode
						&& activeLearningUnitViewElementPanel);
				answerHtmlPane.setSupportWebSearches(!checkUpPlaying);
			}
		}
	}

	protected JComponent[] getEditToolBarComponents() {
		return editToolBarComponents;
	}

	protected void buildIndependentUI() {
		setLayout(new BorderLayout());
		scrollPaneView = new JPanel(new BorderLayout());
		FLGScrollPane scrollPane = new FLGScrollPane(scrollPaneView);
		scrollPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
		scrollPane
				.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane
				.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
		add(scrollPane, BorderLayout.CENTER);
		// question
		questionHtmlPane = new FLGHtmlPane();
		questionHtmlPane.setSupportWebSearches(true);
		questionHtmlPane.setEditable(editMode);
		questionHtmlPane
				.addHyperlinkListener(new FSLLearningUnitViewElementContentPanel_HyperlinkAdapter());
		scrollPaneView.add(questionHtmlPane, BorderLayout.NORTH);
		// answers
		answersHtmlPanes = new Vector();
		answersButtons = new Vector();
		answersButtons.add(new FLGCheckUpMultipleChoiceAnswerButton(
				loadImage("images/buttonAnswerNotSelected.gif"),
				loadImage("images/buttonAnswerSelected.gif"), null));
		answersPanel = new JPanel(new FLGSingleColumnLayout(10)) {
			public void updateUI() {
				super.updateUI();
				setBackground((Color) UIManager.get("FSLMainFrameColor2"));
			}
		};
		answersPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
		scrollPaneView.add(answersPanel, BorderLayout.CENTER);
		// toolbar
		FLGHtmlPaneEditButtonsFactory.FLGFileCreator fileCreator = new FLGHtmlPaneEditButtonsFactory.FLGFileCreator() {
			public File createFile(String fileExtension) {
				return learningUnitViewElementsManager
						.createNewFileForElementsExternalData("image",
								fileExtension, learningUnitViewElementId);
			}
		};
		FLGHtmlPaneEditButtonsFactory.FLGLinkEditor linkEditor = new FLGHtmlPaneEditButtonsFactory.FLGLinkEditor() {
			public String linkSelectedToEdit(String htmlAttributeValue) {
				return learningUnitViewManager.editLearningUnitViewElementLink(
						htmlAttributeValue, learningUnitViewElementId);
			}
		};
		Vector editToolBarComponentsVector = FLGUtilities
				.createVectorFromArray(FLGHtmlPaneEditButtonsFactory
						.createDefaultHtmlPaneEditComponents(fileCreator,
								linkEditor));
		// add specific buttons
		editToolBarComponentsVector
				.add(new FLGEditToolBarButton(
						loadImage("images/editToolBarButtonInsertMultipleChoiceAnswer.gif"),
						internationalization
								.getString("button.addMultipleChoiceAnswer.toolTipText"),
						new AddAnswerAction()));
		editToolBarComponentsVector
				.add(new FLGEditToolBarButton(
						loadImage("images/editToolBarButtonRemoveMultipleChoiceAnswer.gif"),
						internationalization
								.getString("button.removeMultipleChoiceAnswer.toolTipText"),
						new RemoveAnswerAction()));
		editToolBarComponents = (JComponent[]) editToolBarComponentsVector
				.toArray(new JComponent[] {});
		updateUI();
	}

	protected void buildDependentUI(boolean reloadIfAlreadyLoaded) {
		FLGCheckUpElement learningUnitViewElement = null;
		if (learningUnitViewElementsManager != null
				&& learningUnitViewElementId != null) {
			learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(learningUnitViewElementId,
							false);
		}
		// question
		boolean contentAvailable = false;
		if (learningUnitViewElement != null) {
			String htmlRelativeFileName = learningUnitViewElement
					.getMultipleChoice().getQuestionHtmlFileName();
			if (htmlRelativeFileName != null)
				questionHtmlPane
						.loadFile(learningUnitViewElementsManager
								.resolveRelativeFileName(htmlRelativeFileName,
										learningUnitViewElement),
								reloadIfAlreadyLoaded);
			else {
				questionHtmlPane.setBase(learningUnitViewElementsManager
						.resolveRelativeFileName("dummyFileName",
								learningUnitViewElement));
				questionHtmlPane.setText("<html><body><p></p></body></html>");
			}
			contentAvailable = true;
		}
		if (!contentAvailable) {
			questionHtmlPane.setText("<html><body><p></p></body></html>");
		}
		questionHtmlPane.setEditable(editMode
				&& activeLearningUnitViewElementPanel && contentAvailable);
		questionHtmlPane.setSupportWebSearches(!checkUpPlaying);
		// answers
		if (learningUnitViewElement != null) {
			int answersCount = learningUnitViewElement.getMultipleChoice()
					.getMultipleChoiceAnswers().size();
			if (answersHtmlPanes.size() < answersCount) {
				// create new answer panes and buttons
				int answersHtmlPanesToCreate = answersCount
						- answersHtmlPanes.size();
				FLGHtmlPane answerHtmlPane = null;
				for (int i = 0; i < answersHtmlPanesToCreate; i++) {
					answerHtmlPane = new FLGHtmlPane();
					answerHtmlPane.setBorder(BorderFactory.createEmptyBorder(5,
							5, 5, 5));
					answerHtmlPane.setSupportWebSearches(!checkUpPlaying);
					answerHtmlPane
							.addHyperlinkListener(new FSLLearningUnitViewElementContentPanel_HyperlinkAdapter());
					answersHtmlPanes.add(answerHtmlPane);
					FLGCheckUpMultipleChoiceAnswerButton answerButton = ((FLGCheckUpMultipleChoiceAnswerButton) answersButtons
							.get(0)).copy(null);
					;
					answersButtons.add(answerButton);
				}
				htmlPaneBackgroundColor = answerHtmlPane.getBackground();
				updateUI();
			}
			for (int i = 0; i < answersCount; i++) {
				FLGHtmlPane answerHtmlPane = (FLGHtmlPane) answersHtmlPanes
						.get(i);
				FLGCheckUpMultipleChoiceAnswerButton answerButton = (FLGCheckUpMultipleChoiceAnswerButton) answersButtons
						.get(i);
				FLGCheckUpElementMultipleChoiceAnswer answer = (FLGCheckUpElementMultipleChoiceAnswer) learningUnitViewElement
						.getMultipleChoice().getMultipleChoiceAnswers().get(i);
				answerButton.setSelected(editMode
						&& learningUnitViewElement.getMultipleChoice()
								.getRightAnswersIds().contains(answer.getId()));
				if (answer.getHtmlFileName() != null)
					answerHtmlPane.loadFile(learningUnitViewElementsManager
							.resolveRelativeFileName(answer.getHtmlFileName(),
									learningUnitViewElement),
							reloadIfAlreadyLoaded);
				else {
					answerHtmlPane.setBase(learningUnitViewElementsManager
							.resolveRelativeFileName("dummyFileName",
									learningUnitViewElement));
					answerHtmlPane.setText("<html><body><p></p></body></html>");
				}
				answerHtmlPane.setId(answer.getId());
				answerHtmlPane.setSupportWebSearches(!checkUpPlaying);
				answerHtmlPane.setEditable(editMode
						&& activeLearningUnitViewElementPanel);
			}
			// TO DO: scramble
			answersPanel.removeAll();
			for (int i = 0; i < answersCount; i++) {
				FLGHtmlPane answerHtmlPane = (FLGHtmlPane) answersHtmlPanes
						.get(i);
				JPanel answerPanel = new JPanel(new BorderLayout());
				answerPanel.setOpaque(false);
				answerPanel.add(answerHtmlPane, BorderLayout.CENTER);
				JPanel answerButtonPanel = new JPanel(new FlowLayout(
						FlowLayout.LEFT, 0, 0));
				answerButtonPanel.setOpaque(false);
				answerButtonPanel.setBorder(BorderFactory.createEmptyBorder(0,
						0, 0, 10));
				answerButtonPanel.add((Component) answersButtons.get(i));
				answerPanel.add(answerButtonPanel, BorderLayout.WEST);
				answersPanel.add(answerPanel);
			}
			answersPanel.revalidate();
			answersPanel.repaint();
		} else {
			answersPanel.removeAll();
			answersPanel.revalidate();
			answersPanel.repaint();
		}
	}

	class AddAnswerAction extends HTMLEditorKit.StyledTextAction {
		public AddAnswerAction() {
			super("addAnswer");
		}

		public void actionPerformed(ActionEvent e) {
			FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(learningUnitViewElementId, true);
			saveUserChanges();
			learningUnitViewElement.getMultipleChoice()
					.addNewMultipleChoiceAnswer();
			buildDependentUI(false);
			answersSetModified = true;
		}
	}

	class RemoveAnswerAction extends HTMLEditorKit.StyledTextAction {
		public RemoveAnswerAction() {
			super("removeAnswer");
		}

		public void actionPerformed(ActionEvent e) {
			FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(learningUnitViewElementId, true);
			Component focusOwner = (new java.awt.DefaultKeyboardFocusManager())
					.getFocusOwner();
			saveUserChanges();
			if (focusOwner != null && focusOwner instanceof FLGHtmlPane
					&& ((FLGHtmlPane) focusOwner).getId() != null) {
				String answerId = ((FLGHtmlPane) focusOwner).getId();
				if (FLGOptionPane
						.showConfirmDialog(
								internationalization
										.getString("message.removeMultipleChoiceAnswer.text"),
								internationalization
										.getString("dialog.removeMultipleChoiceAnswer.title"),
								FLGOptionPane.YES_NO_OPTION,
								FLGOptionPane.WARNING_MESSAGE) == FLGOptionPane.YES_OPTION) {
					// remove the selected answer
					learningUnitViewElement.getMultipleChoice()
							.getMultipleChoiceAnswers().remove(
									learningUnitViewElement.getMultipleChoice()
											.getMultipleChoiceAnswer(answerId));
					learningUnitViewElement.getMultipleChoice()
							.getRightAnswersIds().remove(answerId);
					buildDependentUI(false);
					answersSetModified = true;
				}
			}
		}
	}

	/*
	 * class FLGCheckUpHyperlinkListener implements HyperlinkListener { public
	 * void hyperlinkUpdate(HyperlinkEvent e) { if (e.getEventType() ==
	 * HyperlinkEvent.EventType.ACTIVATED) { String url = e.getURL().toString();
	 * String linkId = url.substring(url.lastIndexOf("/") + 1);
	 * learningUnitViewManager.followLearningUnitViewElementLink(linkId,
	 * learningUnitViewElementId); } } }
	 */

	class FLGCheckUpLearningUnitAdapter extends FSLLearningUnitVetoableAdapter {
		public void learningUnitEditModeChanged(FSLLearningUnitEvent event) {
			buildDependentUI(false);
		}
	}

	class FLGCheckUpLearningUnitViewAdapter extends
			FSLLearningUnitViewVetoableAdapter {
		public void learningUnitViewElementActivated(
				FSLLearningUnitViewEvent event) {
			String elementId = event.getActiveLearningUnitViewElementId();
			if (elementId != null) {
				boolean[] selectionHistory = (boolean[]) answerSelectionHistory
						.get(elementId);
				if (selectionHistory != null) {
					preSelectAnswers(selectionHistory);
				}
			}
		}

		private void preSelectAnswers(boolean[] selectionHistory) {
			if (checkUpPlaying) {
				for (int i = 0; i < answersButtons.size(); i++) {
					FLGCheckUpMultipleChoiceAnswerButton answerButton = (FLGCheckUpMultipleChoiceAnswerButton) answersButtons
							.get(i);
					if (selectionHistory.length > i) {
						answerButton.setSelected(selectionHistory[i]);
					}
				}
			}
		}

		public void learningUnitViewSpecificEventOccurred(
				FSLLearningUnitViewEvent event) {
			FLGCheckUpEvent checkUpEvent = (FLGCheckUpEvent) event;
			if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_PLAY_MODE_ENTERED) {
				answerSelectionHistory = new Hashtable();
				checkUpPlaying = true;
			}
			if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_PLAY_MODE_EXITED) {
				checkUpPlaying = false;
			}
			String activeElementId = checkUpEvent
					.getActivatedLearningUnitViewElementId();
			if (activeElementId != null) {
				FLGCheckUpElement activeCheckUpElement = (FLGCheckUpElement) learningUnitViewElementsManager
						.getLearningUnitViewElement(activeElementId, false);
				if ((activeCheckUpElement != null)
						&& (activeCheckUpElement.getType())
								.equals(FLGCheckUpElement.ELEMENT_TYPE_MULTIPLECHOICE)) {
					FLGCheckUpElementMultipleChoice mcElement = activeCheckUpElement
							.getMultipleChoice();
					java.util.List correctAnswerIds = mcElement
							.getRightAnswersIds();
					if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_RESOLVE_MODE_ENTERED) {
						for (int i = 0; i < mcElement
								.getMultipleChoiceAnswers().size(); i++) {
							FLGHtmlPane answerHtmlPane = (FLGHtmlPane) answersHtmlPanes
									.get(i);
							FLGCheckUpMultipleChoiceAnswerButton mcButton = (FLGCheckUpMultipleChoiceAnswerButton) answersButtons
									.get(i);
							String currentId = ((FLGCheckUpElementMultipleChoiceAnswer) (mcElement
									.getMultipleChoiceAnswers().get(i)))
									.getId();
							if (correctAnswerIds.contains(currentId)
									&& mcButton.isSelected()) {
								answerHtmlPane.setBorder(BorderFactory
										.createLineBorder(new Color(0, 192, 0),
												5));
								answerHtmlPane.setBackground((Color) UIManager
										.get("FSLColorGreen"));
							} else if (correctAnswerIds.contains(currentId)) {
								answerHtmlPane.setBorder(BorderFactory
										.createLineBorder(new Color(0, 192, 0),
												5));
							} else if (!correctAnswerIds.contains(currentId)
									&& !mcButton.isSelected()) {
								// answerHtmlPane.setBackground((Color)UIManager.get("FSLColorGreen"));
								// answerHtmlPane.setBorder(BorderFactory.createLineBorder(new
								// Color(192,0,0), 5));
							} else if (!correctAnswerIds.contains(currentId)
									&& mcButton.isSelected()) {
								answerHtmlPane.setBackground((Color) UIManager
										.get("FSLColorRed"));
								answerHtmlPane.setBorder(BorderFactory
										.createLineBorder(new Color(192, 0, 0),
												5));
							}
						}
					}
					if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_RESOLVE_MODE_EXITED) {
						for (int i = 0; i < mcElement
								.getMultipleChoiceAnswers().size(); i++) {
							FLGHtmlPane answerHtmlPane = (FLGHtmlPane) answersHtmlPanes
									.get(i);
							answerHtmlPane
									.setBackground(htmlPaneBackgroundColor);
							answerHtmlPane.setBorder(BorderFactory
									.createEmptyBorder(5, 5, 5, 5));
						}
					}
					if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_CHECK_ANSWER_REQUESTED) {
						double correctAnswers = 0;
						int maxNoAnswers = 0;
						maxNoAnswers = mcElement.getMultipleChoiceAnswers()
								.size();
						for (int i = 0; i < mcElement
								.getMultipleChoiceAnswers().size(); i++) {
							FLGCheckUpMultipleChoiceAnswerButton mcButton = (FLGCheckUpMultipleChoiceAnswerButton) answersButtons
									.get(i);
							String currentId = ((FLGCheckUpElementMultipleChoiceAnswer) (mcElement
									.getMultipleChoiceAnswers().get(i)))
									.getId();
							if (correctAnswerIds.contains(currentId)
									&& mcButton.isSelected()) {
								correctAnswers++;
							} else if (!correctAnswerIds.contains(currentId)
									&& !mcButton.isSelected()) {
								correctAnswers++;
							}
						}
						boolean[] answersSelected = new boolean[maxNoAnswers];
						for (int i = 0; i < answersSelected.length; i++) {
							FLGCheckUpMultipleChoiceAnswerButton answerButton = (FLGCheckUpMultipleChoiceAnswerButton) answersButtons
									.get(i);
							answersSelected[i] = answerButton.isSelected();
						}
						if (answersSelected != null)
							answerSelectionHistory.put(activeElementId,
									answersSelected);
						FSLLearningUnitViewEvent checkUpSpectificEvent;
						if (checkUpEvent.getPlayVideo()) {
							checkUpSpectificEvent = FLGCheckUpEvent
									.createViewSpecificEvent(
											FLGCheckUpEvent.CHECKUP_ANSWER_CHECKED,
											activeElementId,
											(int) correctAnswers, maxNoAnswers,
											checkUpEvent.getPlayVideo());
						} else {
							checkUpSpectificEvent = FLGCheckUpEvent
									.createViewSpecificEvent(
											FLGCheckUpEvent.CHECKUP_ANSWER_CHECKED,
											activeElementId, correctAnswers
													/ maxNoAnswers,
											checkUpEvent.getPlayVideo());
						}
						learningUnitViewManager
								.fireLearningUnitViewEvent(checkUpSpectificEvent);
					}
				}
			}
		}

		public void learningUnitViewElementsUserVersionCreated(
				FSLLearningUnitViewEvent event) {
			if (event.getLearningUnitViewManagerId().equals(
					learningUnitViewManager.getLearningUnitViewManagerId())) {
				for (int i = 0; i < event.getLearningUnitViewElementIds().length; i++) {
					if (event.getLearningUnitViewElementIds()[i]
							.equals(learningUnitViewElementId)) {
						FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
								.getLearningUnitViewElement(
										learningUnitViewElementId, false);
						String htmlFileName = learningUnitViewElement
								.getMultipleChoice().getQuestionHtmlFileName();
						if (htmlFileName != null) {
							File file = learningUnitViewElementsManager
									.resolveRelativeFileName(htmlFileName,
											learningUnitViewElement);
							try {
								((HTMLDocument) questionHtmlPane.getDocument())
										.setBase(file.getParentFile().toURL());
							} catch (Exception e) {
								System.out.println(e);
							}
						}
						// answers
						int answersCount = learningUnitViewElement
								.getMultipleChoice().getMultipleChoiceAnswers()
								.size();
						for (int answerIndex = 0; answerIndex < answersCount; answerIndex++) {
							FLGHtmlPane answerHtmlPane = (FLGHtmlPane) answersHtmlPanes
									.get(answerIndex);
							FLGCheckUpElementMultipleChoiceAnswer answer = (FLGCheckUpElementMultipleChoiceAnswer) learningUnitViewElement
									.getMultipleChoice()
									.getMultipleChoiceAnswers()
									.get(answerIndex);
							htmlFileName = answer.getHtmlFileName();
							if (htmlFileName != null) {
								File file = learningUnitViewElementsManager
										.resolveRelativeFileName(htmlFileName,
												learningUnitViewElement);
								try {
									((HTMLDocument) answerHtmlPane
											.getDocument()).setBase(file
											.getParentFile().toURL());
								} catch (Exception e) {
									System.out.println(e);
								}
							}
						}
					}
				}
			}
		}
	}
}
