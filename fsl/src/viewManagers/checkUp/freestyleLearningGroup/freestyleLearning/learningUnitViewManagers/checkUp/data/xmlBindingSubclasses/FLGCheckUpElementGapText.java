/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses;

import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBinding.GapText;

public class FLGCheckUpElementGapText extends GapText {
	public FLGCheckUpElementGapText deepCopy() {
		FLGCheckUpElementGapText copy = new FLGCheckUpElementGapText();
		copy.setHtmlFormularFileName(getHtmlFormularFileName());
		copy.emptyGapTextGaps();
		for (int i = 0; i < this.getGapTextGaps().size(); i++) {
			FLGCheckUpElementGapTextGap gapTextGap = (FLGCheckUpElementGapTextGap) getGapTextGaps()
					.get(i);
			copy.getGapTextGaps().add(gapTextGap.deepCopy());
		}
		return copy;
	}

	public FLGCheckUpElementGapTextGap addNewGapTextGap() {
		FLGCheckUpElementGapTextGap gapTextGap = new FLGCheckUpElementGapTextGap();
		if (getGapTextGaps().isEmpty()) {
			gapTextGap.setId("g1");
		} else {
			int maxGapTextGapIdValue = 0;
			for (int i = 0; i < getGapTextGaps().size(); i++) {
				String gapTextGapId = ((FLGCheckUpElementGapTextGap) getGapTextGaps()
						.get(i)).getId();
				int gapTextGapIdValue = Integer.parseInt(gapTextGapId
						.substring(1));
				maxGapTextGapIdValue = Math.max(maxGapTextGapIdValue,
						gapTextGapIdValue);
			}
			gapTextGap.setId("g" + (maxGapTextGapIdValue + 1));
		}
		getGapTextGaps().add(gapTextGap);
		return gapTextGap;
	}

	public FLGCheckUpElementGapTextGap getGapTextGap(String gapTextGapId) {
		for (int i = 0; i < getGapTextGaps().size(); i++) {
			FLGCheckUpElementGapTextGap gapTextGap = (FLGCheckUpElementGapTextGap) getGapTextGaps()
					.get(i);
			if (gapTextGap.getId().equals(gapTextGapId))
				return gapTextGap;
		}
		return null;
	}
}
