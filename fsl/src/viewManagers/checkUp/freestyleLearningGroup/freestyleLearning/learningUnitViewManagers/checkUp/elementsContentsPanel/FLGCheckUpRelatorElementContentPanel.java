/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementsContentsPanel;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Line2D;
import java.io.File;
import java.util.Hashtable;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.FSLAbstractLearningUnitViewElementContentPanel;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitVetoableAdapter;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewVetoableAdapter;
import freestyleLearning.learningUnitViewAPI.util.FSLLearningUnitViewUtilities;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.FLGCheckUpElement;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.FLGCheckUpElementRelator;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.FLGCheckUpElementRelatorEndPoint;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.FLGCheckUpElementRelatorRelation;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.data.xmlBindingSubclasses.FLGCheckUpElementRelatorStartPoint;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.events.learningUnitViewEvent.FLGCheckUpEvent;
import freestyleLearningGroup.independent.gui.FLGEditToolBarButton;
import freestyleLearningGroup.independent.gui.FLGHtmlPane;
import freestyleLearningGroup.independent.gui.FLGHtmlPaneEditButtonsFactory;
import freestyleLearningGroup.independent.gui.FLGOptionPane;
import freestyleLearningGroup.independent.gui.FLGScrollPane;
import freestyleLearningGroup.independent.gui.FLGUIUtilities;
import freestyleLearningGroup.independent.util.FLGFileUtility;
import freestyleLearningGroup.independent.util.FLGInternationalization;
import freestyleLearningGroup.independent.util.FLGUtilities;

public class FLGCheckUpRelatorElementContentPanel extends
		FSLAbstractLearningUnitViewElementContentPanel {
	private JComponent[] editToolBarComponents;

	private FLGHtmlPane questionHtmlPane;

	private ArrayList startPointHtmlPanes;

	private ArrayList endPointHtmlPanes;

	private ArrayList startPointButtons;

	private ArrayList endPointButtons;

	private ArrayList relations;

	private JPanel answersPanel;

	private FLGInternationalization internationalization;

	private boolean answersSetModified;

	private boolean relationsSetModified;

	private String newRelationStartPointId;

	private String lastSelectedButtonId;

	private ActionListener relatorButtonListener;

	private Hashtable answerSelectionHistory;

	private String activatedElementId;

	private boolean checkUpPlaying;

	private boolean startPointButtonIsSelected;

	private Color defaultHtmlBackgroundColor;

	private JPanel scrollPaneView;

	public void init(FSLLearningUnitViewManager learningUnitViewManager,
			FSLLearningUnitEventGenerator learningUnitEventGenerator,
			boolean editMode) {
		internationalization = new FLGInternationalization(
				"freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.checkUp.elementsContentsPanel.internationalization",
				getClass().getClassLoader());
		relatorButtonListener = new FLGCheckUpRelatorButtonListener();
		super.init(learningUnitViewManager, learningUnitEventGenerator,
				editMode);
		answerSelectionHistory = new Hashtable();
		learningUnitEventGenerator
				.addLearningUnitListener(new FLGCheckUpLearningUnitAdapter());
		learningUnitViewManager
				.addLearningUnitViewListener(new FLGCheckUpLearningUnitViewAdapter());
	}

	protected java.awt.Component getPrintableComponent() {
		return scrollPaneView;
	}

	public boolean isModifiedByUserInput() {
		boolean modified = false;
		if (learningUnitViewElementsManager != null
				&& learningUnitViewElementId != null) {
			FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(learningUnitViewElementId,
							false);
			// question modified?
			modified = modified || questionHtmlPane.isModifiedByUserInput();
			// start points modified?
			int startPointsCount = learningUnitViewElement.getRelator()
					.getRelatorStartPoints().size();
			for (int i = 0; i < startPointsCount; i++) {
				FLGCheckUpElementRelatorStartPoint startPoint = (FLGCheckUpElementRelatorStartPoint) learningUnitViewElement
						.getRelator().getRelatorStartPoints().get(i);
				FLGHtmlPane startPointHtmlPane = (FLGHtmlPane) startPointHtmlPanes
						.get(i);
				// start point modified ?
				modified = modified
						|| startPointHtmlPane.isModifiedByUserInput();
			}
			modified = modified || answersSetModified;
			// end points modified?
			int endPointsCount = learningUnitViewElement.getRelator()
					.getRelatorEndPoints().size();
			for (int i = 0; i < endPointsCount; i++) {
				FLGCheckUpElementRelatorEndPoint endPoint = (FLGCheckUpElementRelatorEndPoint) learningUnitViewElement
						.getRelator().getRelatorEndPoints().get(i);
				FLGHtmlPane endPointHtmlPane = (FLGHtmlPane) endPointHtmlPanes
						.get(i);
				// start point modified ?
				modified = modified || endPointHtmlPane.isModifiedByUserInput();
			}
			modified = modified || relationsSetModified;
		}
		return modified;
	}

	public void saveUserChanges() {
		File htmlFile;
		FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
				.getLearningUnitViewElement(learningUnitViewElementId, true);
		if (questionHtmlPane.isModifiedByUserInput()) {
			// save the question
			if (learningUnitViewElement.getRelator().getQuestionHtmlFileName() == null) {
				htmlFile = learningUnitViewElementsManager
						.createNewFileForElementsExternalData(
								FLGCheckUpElement.ELEMENT_TYPE_RELATOR,
								".html", learningUnitViewElementId);
				learningUnitViewElement.getRelator().setQuestionHtmlFileName(
						htmlFile.getName());
			} else {
				String relativeFileName = learningUnitViewElementsManager
						.getRelativeFileNameVersionForWriting(
								learningUnitViewElement.getRelator()
										.getQuestionHtmlFileName(),
								learningUnitViewElement,
								FLGCheckUpElement.ELEMENT_TYPE_RELATOR, ".html");
				learningUnitViewElement.getRelator().setQuestionHtmlFileName(
						relativeFileName);
				htmlFile = learningUnitViewElementsManager
						.resolveRelativeFileName(relativeFileName,
								learningUnitViewElement);
			}
			FLGFileUtility.writeStringIntoFile(questionHtmlPane.getText(),
					htmlFile);
		}
		// save the start points
		int startPointsCount = learningUnitViewElement.getRelator()
				.getRelatorStartPoints().size();
		for (int i = 0; i < startPointsCount; i++) {
			FLGCheckUpElementRelatorStartPoint startPoint = (FLGCheckUpElementRelatorStartPoint) learningUnitViewElement
					.getRelator().getRelatorStartPoints().get(i);
			FLGHtmlPane startPointHtmlPane = (FLGHtmlPane) startPointHtmlPanes
					.get(i);
			if (startPointHtmlPane.isModifiedByUserInput()) {
				if (startPoint.getHtmlFileName() == null) {
					htmlFile = learningUnitViewElementsManager
							.createNewFileForElementsExternalData(
									FLGCheckUpElement.ELEMENT_TYPE_RELATOR,
									".html", learningUnitViewElementId);
					startPoint.setHtmlFileName(htmlFile.getName());
				} else {
					String relativeFileName = learningUnitViewElementsManager
							.getRelativeFileNameVersionForWriting(startPoint
									.getHtmlFileName(),
									learningUnitViewElement,
									FLGCheckUpElement.ELEMENT_TYPE_RELATOR,
									".html");
					startPoint.setHtmlFileName(relativeFileName);
					htmlFile = learningUnitViewElementsManager
							.resolveRelativeFileName(relativeFileName,
									learningUnitViewElement);
				}
				FLGFileUtility.writeStringIntoFile(
						startPointHtmlPane.getText(), htmlFile);
			}
		}
		// save the end points
		int endPointsCount = learningUnitViewElement.getRelator()
				.getRelatorEndPoints().size();
		for (int i = 0; i < endPointsCount; i++) {
			FLGCheckUpElementRelatorEndPoint endPoint = (FLGCheckUpElementRelatorEndPoint) learningUnitViewElement
					.getRelator().getRelatorEndPoints().get(i);
			FLGHtmlPane endPointHtmlPane = (FLGHtmlPane) endPointHtmlPanes
					.get(i);
			if (endPointHtmlPane.isModifiedByUserInput()) {
				if (endPoint.getHtmlFileName() == null) {
					htmlFile = learningUnitViewElementsManager
							.createNewFileForElementsExternalData(
									FLGCheckUpElement.ELEMENT_TYPE_RELATOR,
									".html", learningUnitViewElementId);
					endPoint.setHtmlFileName(htmlFile.getName());
				} else {
					String relativeFileName = learningUnitViewElementsManager
							.getRelativeFileNameVersionForWriting(endPoint
									.getHtmlFileName(),
									learningUnitViewElement,
									FLGCheckUpElement.ELEMENT_TYPE_RELATOR,
									".html");
					endPoint.setHtmlFileName(relativeFileName);
					htmlFile = learningUnitViewElementsManager
							.resolveRelativeFileName(relativeFileName,
									learningUnitViewElement);
				}
				FLGFileUtility.writeStringIntoFile(endPointHtmlPane.getText(),
						htmlFile);
			}
		}
		if (relationsSetModified) {
			learningUnitViewElement.getRelator().emptyRelatorRelations();
			for (int i = 0; i < relations.size(); i++) {
				ArrayList relationsEntry = (ArrayList) relations.get(i);
				FLGCheckUpElementRelatorRelation newRelation = learningUnitViewElement
						.getRelator().addNewRelatorRelation();
				newRelation.setStartPointId((String) relationsEntry.get(0));
				newRelation.emptyEndPointsIds();
				for (int endPointIndex = 1; endPointIndex < relationsEntry
						.size(); endPointIndex++) {
					newRelation.getEndPointsIds().add(
							relationsEntry.get(endPointIndex));
				}
			}
		}
		answersSetModified = false;
		relationsSetModified = false;
	}

	public void updateUI() {
		if (questionHtmlPane != null)
			FSLLearningUnitViewUtilities.updateHtmlPaneUI(questionHtmlPane);
		if (startPointHtmlPanes != null) {
			for (int i = 0; i < startPointHtmlPanes.size(); i++) {
				FLGHtmlPane startPointHtmlPane = (FLGHtmlPane) startPointHtmlPanes
						.get(i);
				FSLLearningUnitViewUtilities
						.updateHtmlPaneUI(startPointHtmlPane);
			}
		}
		if (endPointHtmlPanes != null) {
			for (int i = 0; i < endPointHtmlPanes.size(); i++) {
				FLGHtmlPane endPointHtmlPane = (FLGHtmlPane) endPointHtmlPanes
						.get(i);
				FSLLearningUnitViewUtilities.updateHtmlPaneUI(endPointHtmlPane);
			}
		}
		if (answersPanel != null)
			answersPanel.updateUI();
	}

	protected void setActiveLearningUnitViewElementPanel(boolean active) {
		super.setActiveLearningUnitViewElementPanel(active);
		questionHtmlPane.setEditable(editMode
				&& activeLearningUnitViewElementPanel);
		if (startPointHtmlPanes != null) {
			for (int i = 0; i < startPointHtmlPanes.size(); i++) {
				FLGHtmlPane startPointHtmlPane = (FLGHtmlPane) startPointHtmlPanes
						.get(i);
				startPointHtmlPane.setEditable(editMode
						&& activeLearningUnitViewElementPanel);
			}
		}
		if (endPointHtmlPanes != null) {
			for (int i = 0; i < endPointHtmlPanes.size(); i++) {
				FLGHtmlPane endPointHtmlPane = (FLGHtmlPane) endPointHtmlPanes
						.get(i);
				endPointHtmlPane.setEditable(editMode
						&& activeLearningUnitViewElementPanel);
			}
		}
	}

	protected JComponent[] getEditToolBarComponents() {
		return editToolBarComponents;
	}

	protected void buildIndependentUI() {
		setLayout(new BorderLayout());
		scrollPaneView = new JPanel(new BorderLayout());
		FLGScrollPane scrollPane = new FLGScrollPane(scrollPaneView);
		scrollPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
		scrollPane
				.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane
				.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
		add(scrollPane, BorderLayout.CENTER);
		// question
		questionHtmlPane = new FLGHtmlPane();
		questionHtmlPane.setEditable(editMode);
		questionHtmlPane
				.addHyperlinkListener(new FSLLearningUnitViewElementContentPanel_HyperlinkAdapter());
		scrollPaneView.add(questionHtmlPane, BorderLayout.NORTH);
		// answers
		startPointHtmlPanes = new ArrayList();
		startPointButtons = new ArrayList();
		endPointHtmlPanes = new ArrayList();
		endPointButtons = new ArrayList();
		startPointButtons.add(new FLGCheckUpRelatorButton(
				loadImage("images/buttonRelatorPointNotSelected.gif"),
				loadImage("images/buttonRelatorPointSelected.gif"),
				relatorButtonListener));
		answersPanel = new FLGCheckUpRelationAnswersPanel();
		answersPanel.setLayout(new FLGCheckUpRelatorLayoutManager());
		answersPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
		scrollPaneView.add(answersPanel, BorderLayout.CENTER);
		// toolbar
		FLGHtmlPaneEditButtonsFactory.FLGFileCreator fileCreator = new FLGHtmlPaneEditButtonsFactory.FLGFileCreator() {
			public File createFile(String fileExtension) {
				return learningUnitViewElementsManager
						.createNewFileForElementsExternalData("image",
								fileExtension, learningUnitViewElementId);
			}
		};
		FLGHtmlPaneEditButtonsFactory.FLGLinkEditor linkEditor = new FLGHtmlPaneEditButtonsFactory.FLGLinkEditor() {
			public String linkSelectedToEdit(String htmlAttributeValue) {
				return learningUnitViewManager.editLearningUnitViewElementLink(
						htmlAttributeValue, learningUnitViewElementId);
			}
		};
		java.util.Vector editToolBarComponentsVector = FLGUtilities
				.createVectorFromArray(FLGHtmlPaneEditButtonsFactory
						.createDefaultHtmlPaneEditComponents(fileCreator,
								linkEditor));
		// add specific buttons
		editToolBarComponentsVector
				.add(new FLGEditToolBarButton(
						loadImage("images/editToolBarButtonInsertRelatorStartPoint.gif"),
						internationalization
								.getString("button.addRelatorStartPoint.toolTipText"),
						new AddStartOrEndPointAction(true)));
		editToolBarComponentsVector.add(new FLGEditToolBarButton(
				loadImage("images/editToolBarButtonInsertRelatorEndPoint.gif"),
				internationalization
						.getString("button.addRelatorEndPoint.toolTipText"),
				new AddStartOrEndPointAction(false)));
		editToolBarComponentsVector
				.add(new FLGEditToolBarButton(
						loadImage("images/editToolBarButtonRemoveRelatorPoint.gif"),
						internationalization
								.getString("button.removeRelatorStartOrEndPoint.toolTipText"),
						new RemoveStartOrEndPointAction()));
		editToolBarComponents = (JComponent[]) editToolBarComponentsVector
				.toArray(new JComponent[] {});
		updateUI();
	}

	protected void buildDependentUI(boolean reloadIfAlreadyLoaded) {
		newRelationStartPointId = null;
		FLGCheckUpElement learningUnitViewElement = null;
		if (learningUnitViewElementsManager != null
				&& learningUnitViewElementId != null) {
			learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(learningUnitViewElementId,
							false);
		}
		// question
		boolean contentAvailable = false;
		if (learningUnitViewElement != null) {
			String htmlRelativeFileName = learningUnitViewElement.getRelator()
					.getQuestionHtmlFileName();
			if (htmlRelativeFileName != null)
				questionHtmlPane
						.loadFile(learningUnitViewElementsManager
								.resolveRelativeFileName(htmlRelativeFileName,
										learningUnitViewElement),
								reloadIfAlreadyLoaded);
			else {
				questionHtmlPane.setBase(learningUnitViewElementsManager
						.resolveRelativeFileName("dummyFileName",
								learningUnitViewElement));
				questionHtmlPane.setText("<html><body><p></p></body></html>");
			}
			contentAvailable = true;
		}
		if (!contentAvailable) {
			questionHtmlPane.setText("<html><body><p></p></body></html>");
		}
		questionHtmlPane.setEditable(editMode
				&& activeLearningUnitViewElementPanel && contentAvailable);
		// answers
		if (learningUnitViewElement != null) {
			// fill the relations vector
			relations = new ArrayList();
			if (editMode) {
				for (int i = 0; i < learningUnitViewElement.getRelator()
						.getRelatorRelations().size(); i++) {
					FLGCheckUpElementRelatorRelation relation = (FLGCheckUpElementRelatorRelation) learningUnitViewElement
							.getRelator().getRelatorRelations().get(i);
					ArrayList relationsEntry = new ArrayList();
					relationsEntry.add(relation.getStartPointId());
					relationsEntry.addAll(relation.getEndPointsIds());
					relations.add(relationsEntry);
				}
			}
			int startPointsCount = learningUnitViewElement.getRelator()
					.getRelatorStartPoints().size();
			if (startPointHtmlPanes.size() < startPointsCount) {
				// create new panes and buttons
				int htmlPanesToCreate = startPointsCount
						- startPointHtmlPanes.size();
				for (int i = 0; i < htmlPanesToCreate; i++) {
					FLGHtmlPane htmlPane = new FLGHtmlPane();
					htmlPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5,
							5));
					htmlPane
							.addHyperlinkListener(new FSLLearningUnitViewElementContentPanel_HyperlinkAdapter());
					startPointHtmlPanes.add(htmlPane);
					FLGCheckUpRelatorButton button = ((FLGCheckUpRelatorButton) startPointButtons
							.get(0)).copy(relatorButtonListener);
					startPointButtons.add(button);
				}
				updateUI();
			}
			// start points
			for (int i = 0; i < startPointsCount; i++) {
				FLGHtmlPane htmlPane = (FLGHtmlPane) startPointHtmlPanes.get(i);
				FLGCheckUpRelatorButton button = (FLGCheckUpRelatorButton) startPointButtons
						.get(i);
				FLGCheckUpElementRelatorStartPoint startPoint = (FLGCheckUpElementRelatorStartPoint) learningUnitViewElement
						.getRelator().getRelatorStartPoints().get(i);
				if (startPoint.getHtmlFileName() != null)
					htmlPane.loadFile(
							learningUnitViewElementsManager
									.resolveRelativeFileName(startPoint
											.getHtmlFileName(),
											learningUnitViewElement),
							reloadIfAlreadyLoaded);
				else {
					htmlPane.setBase(learningUnitViewElementsManager
							.resolveRelativeFileName("dummyFileName",
									learningUnitViewElement));
					htmlPane.setText("<html><body><p></p></body></html>");
				}
				htmlPane.setId(startPoint.getId());
				htmlPane.setEditable(editMode
						&& activeLearningUnitViewElementPanel);
				button.setActionCommand(startPoint.getId());
				button.setSelected(false);
			}
			// end points
			int endPointsCount = learningUnitViewElement.getRelator()
					.getRelatorEndPoints().size();
			if (endPointHtmlPanes.size() < endPointsCount) {
				// create new panes and buttons
				int htmlPanesToCreate = endPointsCount
						- endPointHtmlPanes.size();
				for (int i = 0; i < htmlPanesToCreate; i++) {
					FLGHtmlPane htmlPane = new FLGHtmlPane();
					htmlPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5,
							5));
					htmlPane
							.addHyperlinkListener(new FSLLearningUnitViewElementContentPanel_HyperlinkAdapter());
					endPointHtmlPanes.add(htmlPane);
					FLGCheckUpRelatorButton button = ((FLGCheckUpRelatorButton) startPointButtons
							.get(0)).copy(relatorButtonListener);
					;
					endPointButtons.add(button);
				}
				updateUI();
			}
			for (int i = 0; i < endPointsCount; i++) {
				FLGHtmlPane htmlPane = (FLGHtmlPane) endPointHtmlPanes.get(i);
				FLGCheckUpRelatorButton button = (FLGCheckUpRelatorButton) endPointButtons
						.get(i);
				FLGCheckUpElementRelatorEndPoint endPoint = (FLGCheckUpElementRelatorEndPoint) learningUnitViewElement
						.getRelator().getRelatorEndPoints().get(i);
				if (endPoint.getHtmlFileName() != null)
					htmlPane.loadFile(learningUnitViewElementsManager
							.resolveRelativeFileName(
									endPoint.getHtmlFileName(),
									learningUnitViewElement),
							reloadIfAlreadyLoaded);
				else {
					htmlPane.setBase(learningUnitViewElementsManager
							.resolveRelativeFileName("dummyFileName",
									learningUnitViewElement));
					htmlPane.setText("<html><body><p></p></body></html>");
				}
				htmlPane.setId(endPoint.getId());
				htmlPane.setEditable(editMode
						&& activeLearningUnitViewElementPanel);
				button.setActionCommand(endPoint.getId());
				button.setSelected(false);
			}
			// TO DO: scramble
			answersPanel.removeAll();
			for (int i = 0; i < startPointsCount; i++) {
				FLGHtmlPane htmlPane = (FLGHtmlPane) startPointHtmlPanes.get(i);
				FLGCheckUpRelatorButton button = (FLGCheckUpRelatorButton) startPointButtons
						.get(i);
				answersPanel.add(htmlPane,
						FLGCheckUpRelatorLayoutManager.STARTPOINT_PANE);
				answersPanel.add(button,
						FLGCheckUpRelatorLayoutManager.STARTPOINT_BUTTON);
			}
			for (int i = 0; i < endPointsCount; i++) {
				FLGHtmlPane htmlPane = (FLGHtmlPane) endPointHtmlPanes.get(i);
				FLGCheckUpRelatorButton button = (FLGCheckUpRelatorButton) endPointButtons
						.get(i);
				answersPanel.add(htmlPane,
						FLGCheckUpRelatorLayoutManager.ENDPOINT_PANE);
				answersPanel.add(button,
						FLGCheckUpRelatorLayoutManager.ENDPOINT_BUTTON);
			}
			answersPanel.revalidate();
			answersPanel.repaint();
		} else {
			answersPanel.removeAll();
			answersPanel.revalidate();
			answersPanel.repaint();
		}
	}

	private FLGHtmlPane findHtmlPaneForStartingPointButton(
			String startingPointButtonId) {
		for (int i = 0; i < startPointHtmlPanes.size(); i++) {
			FLGCheckUpRelatorButton button = (FLGCheckUpRelatorButton) startPointButtons
					.get(i);
			if (button.getActionCommand().equals(startingPointButtonId)) {
				return (FLGHtmlPane) startPointHtmlPanes.get(i);
			}
		}
		return new FLGHtmlPane();
	}

	private FLGHtmlPane findHtmlPaneForEndPointButton(String endPointButtonId) {
		for (int i = 0; i < endPointHtmlPanes.size(); i++) {
			FLGCheckUpRelatorButton button = (FLGCheckUpRelatorButton) endPointButtons
					.get(i);
			if (button.getActionCommand().equals(endPointButtonId)) {
				return (FLGHtmlPane) endPointHtmlPanes.get(i);
			}
		}
		return new FLGHtmlPane();
	}

	private FLGCheckUpRelatorButton getStartPointButtonWithId(String id) {
		for (int i = 0; i < startPointButtons.size(); i++) {
			FLGCheckUpRelatorButton button = (FLGCheckUpRelatorButton) startPointButtons
					.get(i);
			if (button.getActionCommand() != null
					&& button.getActionCommand().equals(id))
				return button;
		}
		return null;
	}

	private FLGCheckUpRelatorButton getEndPointButtonWithId(String id) {
		for (int i = 0; i < endPointButtons.size(); i++) {
			FLGCheckUpRelatorButton button = (FLGCheckUpRelatorButton) endPointButtons
					.get(i);
			if (button.getActionCommand() != null
					&& button.getActionCommand().equals(id))
				return button;
		}
		return null;
	}

	class FLGCheckUpRelationAnswersPanel extends JPanel {
		public void updateUI() {
			super.updateUI();
			setBackground((Color) UIManager.get("FSLMainFrameColor2"));
		}

		public void paint(Graphics g) {
			super.paint(g);
			Graphics2D g2d = (Graphics2D) g;
			g2d.setStroke(new BasicStroke(5, BasicStroke.CAP_ROUND,
					BasicStroke.JOIN_ROUND));
			g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
					RenderingHints.VALUE_ANTIALIAS_ON);
			for (int i = 0; i < relations.size(); i++) {
				ArrayList relationsEntry = (ArrayList) relations.get(i);
				FLGCheckUpRelatorButton startPointButton = getStartPointButtonWithId((String) relationsEntry
						.get(0));
				if (startPointButton != null) {
					int startX = startPointButton.getX()
							+ startPointButton.getWidth();
					int startY = startPointButton.getY()
							+ startPointButton.getHeight() / 2;
					for (int endPointIndex = 1; endPointIndex < relationsEntry
							.size(); endPointIndex++) {
						FLGCheckUpRelatorButton endPointButton = getEndPointButtonWithId((String) relationsEntry
								.get(endPointIndex));
						if (endPointButton != null) {
							int endX = endPointButton.getX();
							int endY = endPointButton.getY()
									+ endPointButton.getHeight() / 2;
							if (newRelationStartPointId != null
									&& ((String) relationsEntry.get(0))
											.equals(newRelationStartPointId)) {
								g2d.setPaint(new GradientPaint(startX, startY,
										new Color(255, 255, 0), endX, endY,
										new Color(200, 200, 0), true));
							} else {
								g2d.setPaint(new GradientPaint(startX, startY,
										new Color(128, 128, 255), endX, endY,
										new Color(0, 0, 64), true));
							}
							g2d.draw(new Line2D.Float(startX + 5, startY,
									endX - 5, endY));
						}
					}
				}
			}
		}
	}

	class AddStartOrEndPointAction extends HTMLEditorKit.StyledTextAction {
		boolean addStartPoint;

		public AddStartOrEndPointAction(boolean addStartPoint) {
			super("addStartOrEndPointAction");
			this.addStartPoint = addStartPoint;
		}

		public void actionPerformed(ActionEvent e) {
			FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(learningUnitViewElementId, true);
			saveUserChanges();
			if (addStartPoint)
				learningUnitViewElement.getRelator().addNewRelatorStartPoint();
			else
				learningUnitViewElement.getRelator().addNewRelatorEndPoint();
			buildDependentUI(false);
			answersSetModified = true;
		}
	}

	class RemoveStartOrEndPointAction extends HTMLEditorKit.StyledTextAction {
		public RemoveStartOrEndPointAction() {
			super("removeStartOrEndPoint");
		}

		public void actionPerformed(ActionEvent e) {
			FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
					.getLearningUnitViewElement(learningUnitViewElementId, true);
			Component focusOwner = (new java.awt.DefaultKeyboardFocusManager())
					.getFocusOwner();
			saveUserChanges();
			if (focusOwner != null && focusOwner instanceof FLGHtmlPane
					&& ((FLGHtmlPane) focusOwner).getId() != null) {
				String pointId = ((FLGHtmlPane) focusOwner).getId();
				if (FLGOptionPane.showConfirmDialog(internationalization
						.getString("message.removeRelatorPoint.text"),
						internationalization
								.getString("dialog.removeRelatorPoint.title"),
						FLGOptionPane.YES_NO_OPTION,
						FLGOptionPane.WARNING_MESSAGE) == FLGOptionPane.YES_OPTION) {
					// remove the selected answer
					learningUnitViewElement.getRelator()
							.getRelatorStartPoints().remove(
									learningUnitViewElement.getRelator()
											.getRelatorStartPoint(pointId));
					learningUnitViewElement.getRelator().getRelatorEndPoints()
							.remove(
									learningUnitViewElement.getRelator()
											.getRelatorEndPoint(pointId));
					learningUnitViewElement.getRelator()
							.checkRelationsAfterRemovingPoint(pointId);
					buildDependentUI(false);
					answersSetModified = true;
				}
			}
		}
	}

	class FLGCheckUpRelatorButtonListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			if (e.getActionCommand() != null) {
				String buttonId = e.getActionCommand();
				FLGCheckUpRelatorButton startPointButton = getStartPointButtonWithId(buttonId);
				FLGCheckUpRelatorButton endPointButton = getEndPointButtonWithId(buttonId);
				// start point button
				if (startPointButton != null) {
					lastSelectedButtonId = buttonId;
					startPointButtonIsSelected = startPointButton.isSelected();
					// is selected
					if (startPointButton.isSelected()) {
						// deselect old selection
						if (newRelationStartPointId != null
								&& newRelationStartPointId != buttonId) {
							FLGCheckUpRelatorButton oldStartPointButton = getStartPointButtonWithId(newRelationStartPointId);
							if (oldStartPointButton != null)
								oldStartPointButton.setSelected(false);
							for (int i = 0; i < endPointButtons.size(); i++) {
								((FLGCheckUpRelatorButton) endPointButtons
										.get(i)).setSelected(false);
							}
						}
						newRelationStartPointId = buttonId;
						// select all corresponding end point buttons (if any)
						ArrayList relationsEntry = lookForRelation(newRelationStartPointId);
						if (relationsEntry != null) {
							for (int i = 1; i < relationsEntry.size(); i++) {
								FLGCheckUpRelatorButton correspondingEndPointButton = getEndPointButtonWithId((String) relationsEntry
										.get(i));
								if (correspondingEndPointButton != null) {
									correspondingEndPointButton
											.setSelected(true);
								}
							}
						}
					}
					// is deselected
					else {
						newRelationStartPointId = null;
						for (int i = 0; i < endPointButtons.size(); i++)
							((FLGCheckUpRelatorButton) endPointButtons.get(i))
									.setSelected(false);
					}
					// end point button
				} else if (endPointButton != null) {
					// is selected
					if (endPointButton.isSelected()) {
						if (newRelationStartPointId != null) {
							// add new Relation End Point
							ArrayList relationsEntry = lookForRelation(newRelationStartPointId);
							if (relationsEntry != null) {
								// extend existing relation
								if (!relationsEntry.contains(buttonId)) {
									relationsEntry.add(buttonId);
									relationsSetModified = true;
								}
							} else {
								// add new relation
								relationsEntry = new ArrayList();
								relationsEntry.add(newRelationStartPointId);
								relationsEntry.add(buttonId);
								relations.add(relationsEntry);
								relationsSetModified = true;
							}
						} else {
							// if no start point is selected
							endPointButton.setSelected(false);
						}
					}
					// is deselected
					else {
						if (newRelationStartPointId != null) {
							ArrayList relationsEntry = lookForRelation(newRelationStartPointId);
							if (relationsEntry != null) {
								relationsEntry.remove(buttonId);
								if (relationsEntry.size() == 1) {
									relations.remove(relationsEntry);
								}
								relationsSetModified = true;
							}
						}
					}
				}
				answersPanel.repaint();
			}
		}
	}

	private ArrayList lookForRelation(String startPointId) {
		for (int i = 0; i < relations.size(); i++) {
			ArrayList relationsEntry = (ArrayList) relations.get(i);
			if (relationsEntry.contains(startPointId))
				return relationsEntry;
		}
		return null;
	}

	private int findStartPointIx(String startingPointId) {
		for (int i = 0; i < startPointButtons.size(); i++) {
			FLGCheckUpRelatorButton button = (FLGCheckUpRelatorButton) startPointButtons
					.get(i);
			if (button.getActionCommand() != null
					&& button.getActionCommand().equals(startingPointId))
				return i;
		}
		return 0;
	}

	class FLGCheckUpLearningUnitAdapter extends FSLLearningUnitVetoableAdapter {
		public void learningUnitEditModeChanged(FSLLearningUnitEvent event) {
			relationsSetModified = false;
			startPointButtonIsSelected = false;
			buildDependentUI(false);
		}
	}

	class FLGCheckUpLearningUnitViewAdapter extends
			FSLLearningUnitViewVetoableAdapter {
		public void learningUnitViewElementActivated(
				FSLLearningUnitViewEvent event) {
			activatedElementId = event.getActiveLearningUnitViewElementId();
			if (activatedElementId != null) {
				if (answerSelectionHistory.get(activatedElementId) != null) {
					ArrayList selectionHistory = (ArrayList) answerSelectionHistory
							.get(activatedElementId);
					preSelectAnswers(selectionHistory);
				}
			}
		}

		private void preSelectAnswers(ArrayList selectionHistory) {
			relations = selectionHistory;
		}

		public void learningUnitViewSpecificEventOccurred(
				FSLLearningUnitViewEvent event) {
			FLGCheckUpEvent checkUpEvent = (FLGCheckUpEvent) event;
			if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_PLAY_MODE_ENTERED) {
				answerSelectionHistory = new Hashtable();
				checkUpPlaying = true;
			}
			if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_PLAY_MODE_EXITED) {
				checkUpPlaying = false;
			}
			String activeElementId = checkUpEvent
					.getActivatedLearningUnitViewElementId();
			if (activeElementId != null) {
				FLGCheckUpElement activeCheckUpElement = (FLGCheckUpElement) learningUnitViewElementsManager
						.getLearningUnitViewElement(activeElementId, false);
				if ((activeCheckUpElement != null)
						&& (activeCheckUpElement.getType())
								.equals(FLGCheckUpElement.ELEMENT_TYPE_RELATOR)) {
					if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_RESOLVE_MODE_ENTERED) {
						ArrayList wrongElements = new ArrayList();
						FLGCheckUpElementRelator relatorElement = activeCheckUpElement
								.getRelator();
						java.util.List elementRelations = relatorElement
								.getRelatorRelations();
						int noStartPoints = relatorElement
								.getRelatorStartPoints().size();
						int noEndPoints = relatorElement.getRelatorEndPoints()
								.size();
						if (noStartPoints > 0)
							defaultHtmlBackgroundColor = ((FLGHtmlPane) startPointHtmlPanes
									.get(0)).getBackground();
						double maxNoAnswers = noStartPoints * noEndPoints;
						ArrayList elementRelationsEntry = new ArrayList();
						ArrayList relationsEntry = new ArrayList();
						ArrayList checkedAnswersStartPoints = new ArrayList();
						String startPointId;
						int noCorrectAnswers = 0;
						int noWrongAnswers = 0;
						for (int i = 0; i < elementRelations.size(); i++) {
							FLGCheckUpElementRelatorRelation elementRelation = (FLGCheckUpElementRelatorRelation) relatorElement
									.getRelatorRelations().get(i);
							elementRelationsEntry = new ArrayList();
							elementRelationsEntry.add(elementRelation
									.getStartPointId());
							java.util.List elementRelationEndPoints = elementRelation
									.getEndPointsIds();
							for (int elementIx = 0; elementIx < elementRelationEndPoints
									.size(); elementIx++) {
								elementRelationsEntry
										.add(elementRelationEndPoints
												.get(elementIx));
							}
							startPointId = elementRelation.getStartPointId();
							// compare elementRelations to selected relations
							// find corresponding relation
							boolean relationFound = false;
							checkedAnswersStartPoints.add(startPointId);
							for (int relationIx = 0; relationIx < relations
									.size(); relationIx++) {
								relationsEntry = (ArrayList) relations
										.get(relationIx);
								if (((String) relationsEntry.get(0))
										.equals(startPointId)) {
									relationFound = true;
									break;
								}
							}
							if (relationFound) {
								// check end points for this relation
								for (int endPointIx = 0; endPointIx < noEndPoints; endPointIx++) {
									String endPointId = ((FLGCheckUpElementRelatorEndPoint) (relatorElement
											.getRelatorEndPoints()
											.get(endPointIx))).getId();
									if (elementRelationsEntry
											.contains(endPointId)) {
										// end Point should be selected
										int endPointIndex = elementRelationsEntry
												.indexOf(endPointId);
										if (relationsEntry
												.contains(elementRelationsEntry
														.get(endPointIndex))) {
											noCorrectAnswers++;
										} else {
											noWrongAnswers++;
											wrongElements.add(endPointId);
											wrongElements.add(startPointId);
										}
									} else {
										// end point should not be selected
										if (relationsEntry.contains(endPointId)) {
											noWrongAnswers++;
											wrongElements.add(endPointId);
											wrongElements.add(startPointId);
										} else {
											noCorrectAnswers++;
										}
									}
								}
							} else {
								// relation not selected by user
								noWrongAnswers += noEndPoints;
								for (int endPointIx = 0; endPointIx < noEndPoints; endPointIx++) {
									String endPointId = ((FLGCheckUpElementRelatorEndPoint) (relatorElement
											.getRelatorEndPoints()
											.get(endPointIx))).getId();
									wrongElements.add(endPointId);
									wrongElements.add(startPointId);
								}
							}
						}
						// any relations selected which better should not?
						for (int pointIx = 0; pointIx < noStartPoints; pointIx++) {
							startPointId = ((FLGCheckUpElementRelatorStartPoint) (relatorElement
									.getRelatorStartPoints().get(pointIx)))
									.getId();
							if (!checkedAnswersStartPoints
									.contains(startPointId)) {
								boolean contained = false;
								if (relations.size() > 0) {
									for (int relationIx = 0; relationIx < relations
											.size(); relationIx++) {
										if (((ArrayList) relations
												.get(relationIx))
												.contains(startPointId)) {
											contained = true;
										}
									}
									if (contained) {
										noWrongAnswers += noEndPoints;
										wrongElements.add(startPointId);
									} else {
										noCorrectAnswers += noEndPoints;
									}
								} else {
									noCorrectAnswers += noEndPoints;
								}
							}
						}

						// show color coding for correct and wrong answers
						if (startPointButtonIsSelected) {
							int startPointIx = findStartPointIx(lastSelectedButtonId);
							System.out.println("lastSelectedButtonId = "
									+ lastSelectedButtonId);
							System.out
									.println("startPointIx = " + startPointIx);
							// get relation from master solution
							FLGCheckUpElementRelatorRelation elementRelation = (FLGCheckUpElementRelatorRelation) relatorElement
									.getRelatorRelations().get(startPointIx);
							elementRelationsEntry = new ArrayList();
							elementRelationsEntry.add(lastSelectedButtonId);
							java.util.List elementRelationEndPoints = elementRelation
									.getEndPointsIds();
							for (int elementIx = 0; elementIx < elementRelationEndPoints
									.size(); elementIx++) {
								elementRelationsEntry
										.add(elementRelationEndPoints
												.get(elementIx));
							}
							for (int endPointIx = 0; endPointIx < noEndPoints; endPointIx++) {
								String endPointId = ((FLGCheckUpElementRelatorEndPoint) (relatorElement
										.getRelatorEndPoints().get(endPointIx)))
										.getId();
								FLGHtmlPane correspondingHtmlPane = findHtmlPaneForEndPointButton(endPointId);
								if (elementRelationsEntry.contains(endPointId)) {
									// end Point should be selected
									if (relationsEntry.contains(endPointId)) {
										// correctly selected --> green border &
										// background
										correspondingHtmlPane
												.setBorder(BorderFactory
														.createLineBorder(
																new Color(0,
																		192, 0),
																5));
										correspondingHtmlPane
												.setBackground((Color) UIManager
														.get("FSLColorGreen"));
									} else {
										// correct, but NOT selected --> green
										// border only
										correspondingHtmlPane
												.setBorder(BorderFactory
														.createLineBorder(
																new Color(0,
																		192, 0),
																5));
									}
								} else {
									// end point should not be selected
									if (relationsEntry.contains(endPointId)) {
										// NOT correct, but selected --> red
										// border & background
										correspondingHtmlPane
												.setBorder(BorderFactory
														.createLineBorder(
																new Color(192,
																		0, 0),
																5));
										correspondingHtmlPane
												.setBackground((Color) UIManager
														.get("FSLColorRed"));
									} else {
										// NOT correct, NOT selected --> no
										// markings
									}
								}
							}
						} // startPointButtonIsSelected
						for (int i = 0; i < startPointHtmlPanes.size(); i++) {
							startPointId = ((FLGCheckUpElementRelatorStartPoint) (relatorElement
									.getRelatorStartPoints().get(i))).getId();
							if (wrongElements.contains(startPointId)) {
								((FLGHtmlPane) startPointHtmlPanes.get(i))
										.setBorder(BorderFactory
												.createLineBorder(new Color(
														192, 0, 0), 5));
							} else {
								((FLGHtmlPane) startPointHtmlPanes.get(i))
										.setBackground((Color) UIManager
												.get("FSLColorGreen"));
								((FLGHtmlPane) startPointHtmlPanes.get(i))
										.setBorder(BorderFactory
												.createLineBorder(new Color(0,
														192, 0), 5));
							}
						}
						// // old version
						// for (int i = 0; i < endPointHtmlPanes.size(); i++) {
						// String endPointId =
						// ((FLGCheckUpElementRelatorEndPoint)(relatorElement.getRelatorEndPoints().get(i))).getId();
						// if (wrongElements.contains(endPointId)) {
						// ((FLGHtmlPane)endPointHtmlPanes.get(i)).setBackground((Color)UIManager.get("FSLColorRed"));
						// ((FLGHtmlPane)startPointHtmlPanes.get(i)).setBorder(BorderFactory.createLineBorder(new
						// Color(192,0,0), 5));
						// }
						// else {
						// ((FLGHtmlPane)endPointHtmlPanes.get(i)).setBackground((Color)UIManager.get("FSLColorGreen"));
						// ((FLGHtmlPane)startPointHtmlPanes.get(i)).setBorder(BorderFactory.createLineBorder(new
						// Color(0,192,0), 5));
						// }
						// }
					}
					if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_RESOLVE_MODE_EXITED) {
						for (int i = 0; i < startPointHtmlPanes.size(); i++) {
							((FLGHtmlPane) startPointHtmlPanes.get(i))
									.setBackground(defaultHtmlBackgroundColor);
							((FLGHtmlPane) startPointHtmlPanes.get(i))
									.setBorder(BorderFactory.createEmptyBorder(
											5, 5, 5, 5));
						}
						for (int i = 0; i < endPointHtmlPanes.size(); i++) {
							((FLGHtmlPane) endPointHtmlPanes.get(i))
									.setBackground(defaultHtmlBackgroundColor);
							((FLGHtmlPane) endPointHtmlPanes.get(i))
									.setBorder(BorderFactory.createEmptyBorder(
											5, 5, 5, 5));
						}
					}
					if (checkUpEvent.getEventSpecificType() == FLGCheckUpEvent.CHECKUP_CHECK_ANSWER_REQUESTED) {
						FLGCheckUpElementRelator relatorElement = activeCheckUpElement
								.getRelator();
						java.util.List elementRelations = relatorElement
								.getRelatorRelations();
						int noStartPoints = relatorElement
								.getRelatorStartPoints().size();
						int noEndPoints = relatorElement.getRelatorEndPoints()
								.size();
						double maxNoAnswers = noStartPoints * noEndPoints;
						ArrayList elementRelationsEntry = new ArrayList();
						ArrayList relationsEntry = new ArrayList();
						ArrayList checkedAnswersStartPoints = new ArrayList();
						String startPointId;
						int noCorrectAnswers = 0;
						int noWrongAnswers = 0;
						for (int i = 0; i < elementRelations.size(); i++) {
							FLGCheckUpElementRelatorRelation elementRelation = (FLGCheckUpElementRelatorRelation) relatorElement
									.getRelatorRelations().get(i);
							elementRelationsEntry = new ArrayList();
							elementRelationsEntry.add(elementRelation
									.getStartPointId());
							java.util.List elementRelationEndPoints = elementRelation
									.getEndPointsIds();
							for (int elementIx = 0; elementIx < elementRelationEndPoints
									.size(); elementIx++) {
								elementRelationsEntry
										.add(elementRelationEndPoints
												.get(elementIx));
							}
							startPointId = elementRelation.getStartPointId();
							// compare elementRelations to selected relations
							// find corresponding relation
							boolean relationFound = false;
							checkedAnswersStartPoints.add(startPointId);
							for (int relationIx = 0; relationIx < relations
									.size(); relationIx++) {
								relationsEntry = (ArrayList) relations
										.get(relationIx);
								if (((String) relationsEntry.get(0))
										.equals(startPointId)) {
									relationFound = true;
									break;
								}
							}
							if (relationFound) {
								// check end points for this relation
								for (int endPointIx = 0; endPointIx < noEndPoints; endPointIx++) {
									// use current id instead of possible NOT
									// existing index!!
									String endPointId = ((FLGCheckUpElementRelatorEndPoint) (relatorElement
											.getRelatorEndPoints()
											.get(endPointIx))).getId();
									if (elementRelationsEntry
											.contains(endPointId)) {
										// end Point should be selected
										int endPointIndex = elementRelationsEntry
												.indexOf(endPointId);
										if (relationsEntry
												.contains(elementRelationsEntry
														.get(endPointIndex))) {
											noCorrectAnswers++;
										} else {
											noWrongAnswers++;
										}
									} else {
										// end point should not be selected
										if (relationsEntry.contains(endPointId)) {
											noWrongAnswers++;
										} else {
											noCorrectAnswers++;
										}
									}
								}
							} else {
								// relation not selected by user
								noWrongAnswers += noEndPoints;
							}
						}
						// any relations selected which better should not?
						for (int pointIx = 0; pointIx < noStartPoints; pointIx++) {
							startPointId = ((FLGCheckUpElementRelatorStartPoint) (relatorElement
									.getRelatorStartPoints().get(pointIx)))
									.getId();
							if (!checkedAnswersStartPoints
									.contains(startPointId)) {
								boolean contained = false;
								if (relations.size() > 0) {
									for (int relationIx = 0; relationIx < relations
											.size(); relationIx++) {
										if (((ArrayList) relations
												.get(relationIx))
												.contains(startPointId)) {
											contained = true;
										}
									}
									if (contained) {
										noWrongAnswers += noEndPoints;
									} else {
										noCorrectAnswers += noEndPoints;
									}
								} else {
									noCorrectAnswers += noEndPoints;
								}
							}
						}
						answerSelectionHistory.put(activeElementId, relations);
						FSLLearningUnitViewEvent checkUpSpectificEvent;
						if (checkUpEvent.getPlayVideo()) {
							checkUpSpectificEvent = FLGCheckUpEvent
									.createViewSpecificEvent(
											FLGCheckUpEvent.CHECKUP_ANSWER_CHECKED,
											activeElementId, noCorrectAnswers,
											(int) maxNoAnswers, checkUpEvent
													.getPlayVideo());
						} else {
							checkUpSpectificEvent = FLGCheckUpEvent
									.createViewSpecificEvent(
											FLGCheckUpEvent.CHECKUP_ANSWER_CHECKED,
											activeElementId, noCorrectAnswers
													/ maxNoAnswers,
											checkUpEvent.getPlayVideo());
						}
						learningUnitViewManager
								.fireLearningUnitViewEvent(checkUpSpectificEvent);
					}
				}
			}
		}

		public void learningUnitViewElementsUserVersionCreated(
				FSLLearningUnitViewEvent event) {
			if (event.getLearningUnitViewManagerId().equals(
					learningUnitViewManager.getLearningUnitViewManagerId())) {
				for (int i = 0; i < event.getLearningUnitViewElementIds().length; i++) {
					if (event.getLearningUnitViewElementIds()[i]
							.equals(learningUnitViewElementId)) {
						FLGCheckUpElement learningUnitViewElement = (FLGCheckUpElement) learningUnitViewElementsManager
								.getLearningUnitViewElement(
										learningUnitViewElementId, false);
						String htmlFileName = learningUnitViewElement
								.getRelator().getQuestionHtmlFileName();
						if (htmlFileName != null) {
							File file = learningUnitViewElementsManager
									.resolveRelativeFileName(htmlFileName,
											learningUnitViewElement);
							try {
								((HTMLDocument) questionHtmlPane.getDocument())
										.setBase(file.getParentFile().toURL());
							} catch (Exception e) {
								System.out.println(e);
							}
						}
						// start points
						int startPointsCount = learningUnitViewElement
								.getRelator().getRelatorStartPoints().size();
						for (int startPointIndex = 0; startPointIndex < startPointsCount; startPointIndex++) {
							FLGHtmlPane htmlPane = (FLGHtmlPane) startPointHtmlPanes
									.get(startPointIndex);
							FLGCheckUpElementRelatorStartPoint startPoint = (FLGCheckUpElementRelatorStartPoint) learningUnitViewElement
									.getRelator().getRelatorStartPoints().get(
											startPointIndex);
							htmlFileName = startPoint.getHtmlFileName();
							if (htmlFileName != null) {
								File file = learningUnitViewElementsManager
										.resolveRelativeFileName(htmlFileName,
												learningUnitViewElement);
								try {
									((HTMLDocument) htmlPane.getDocument())
											.setBase(file.getParentFile()
													.toURL());
								} catch (Exception e) {
									System.out.println(e);
								}
							}
						}
						// end points
						int endPointsCount = learningUnitViewElement
								.getRelator().getRelatorEndPoints().size();
						for (int endPointIndex = 0; endPointIndex < endPointsCount; endPointIndex++) {
							FLGHtmlPane htmlPane = (FLGHtmlPane) endPointHtmlPanes
									.get(endPointIndex);
							FLGCheckUpElementRelatorEndPoint endPoint = (FLGCheckUpElementRelatorEndPoint) learningUnitViewElement
									.getRelator().getRelatorEndPoints().get(
											endPointIndex);
							htmlFileName = endPoint.getHtmlFileName();
							if (htmlFileName != null) {
								File file = learningUnitViewElementsManager
										.resolveRelativeFileName(htmlFileName,
												learningUnitViewElement);
								try {
									((HTMLDocument) htmlPane.getDocument())
											.setBase(file.getParentFile()
													.toURL());
								} catch (Exception e) {
									System.out.println(e);
								}
							}
						}
					}
				}
			}
		}
	}
}
