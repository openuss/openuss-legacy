/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.statusPanel;

import java.awt.*;
import java.awt.event.*;
import java.text.*;
import java.util.*;
import javax.swing.*;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.*;
import freestyleLearning.learningUnitViewAPI.statusPanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.events.learningUnitViewEvent.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.data.xmlBindingSubclasses.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.events.learningUnitViewEvent.*;
import freestyleLearningGroup.independent.util.*;
import freestyleLearningGroup.independent.gui.*;

public class FLGMediaPoolStatusPanel extends FSLAbstractLearningUnitViewStatusPanel {
    private FLGInternationalization internationalization;
    private int actualPlayingTime = 0;
    private int maximumPlayingTime = 0;
    private JSlider playBar;    
    private JSlider volumeBar;    
    private JLabel rightLabel;
    private JLabel volumeBarIcon;
    private JPanel playBarPanel;
    private JPanel volumeBarPanel;
    private boolean playing;
    private boolean adjusting;
    private FSLLearningUnitViewManager learningUnitViewManager;
    private DecimalFormat minuteFormat;
    private DecimalFormat secondsFormat;

    public FLGMediaPoolStatusPanel() {
        internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.statusPanel.internationalization",
            getClass().getClassLoader());
        minuteFormat = new DecimalFormat("00");
        secondsFormat = new DecimalFormat("':'00");
    }

    public void init(FSLLearningUnitViewManager learningUnitViewManager,
        FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
            super.init(learningUnitViewManager, learningUnitEventGenerator, editMode);
            this.learningUnitViewManager = learningUnitViewManager;
            learningUnitViewManager.addLearningUnitViewListener(new FLGMediaPoolStatusPanel_LearningUnitViewAdapter());
            playing = false;
    }

    public void buildIndependentUI() {
        super.buildIndependentUI();
        rightLabel = new FSLAbstractLearningUnitViewStatusPanel.FSLLearningUnitViewStatusPanel_Label();          
        playBar = new JSlider(0,1,0); 
        playBar.addMouseListener(new PlayBarMouseListener());
        playBar.setOpaque(false);
        playBar.setEnabled(false);
        playBar.setMajorTickSpacing(60);
        playBar.setMinorTickSpacing(1);
        playBar.setPaintLabels(false);
        playBarPanel = new JPanel(new BorderLayout());
        playBarPanel.setOpaque(false);
        playBarPanel.setBorder(BorderFactory.createEmptyBorder(0,5,0,5));
        playBarPanel.add(playBar, BorderLayout.CENTER);
        playBarPanel.add(rightLabel, BorderLayout.EAST);

        volumeBar = new JSlider(0,5,3); 
        volumeBar.addMouseListener(new VolumeBarMouseListener());
        volumeBar.addMouseMotionListener(new VolumeBarMouseListener());
        volumeBar.setOpaque(false);
        volumeBar.setEnabled(false);
        volumeBar.setMajorTickSpacing(1);
        volumeBar.setMinorTickSpacing(1);
        volumeBar.setPaintLabels(false);
        volumeBar.setPreferredSize(new Dimension(70, volumeBar.getPreferredSize().height));
        volumeBarIcon = new JLabel(new ImageIcon(FLGImageUtility.loadImageAndWait(  
            getClass().getClassLoader().getResource("freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/mediaPool/images/speaker.gif"))));
        volumeBarPanel = new JPanel(new BorderLayout());
        volumeBarPanel.setOpaque(false);
        volumeBarPanel.setBorder(BorderFactory.createEmptyBorder(0,5,0,5));
        volumeBarPanel.add(volumeBar, BorderLayout.CENTER);
        volumeBarPanel.add(volumeBarIcon, BorderLayout.EAST);
        
        add(playBarPanel, BorderLayout.CENTER);
        add(volumeBarPanel, BorderLayout.EAST);
    }
    
    public void buildDependentUI() {
        if (!playing) {
            setText("");
        }
        if (getMediaType() != null && 
            (getMediaType().equals(FLGMediaPoolElement.FILE_TYPE_AUDIO) 
            || getMediaType().equals(FLGMediaPoolElement.FILE_TYPE_VIDEO))) {
                playBarPanel.setVisible(true);
                volumeBarPanel.setVisible(true);
        }
        else {
            playBarPanel.setVisible(false);
            volumeBarPanel.setVisible(false);
        }
    }

    private String getMediaType() {
        if (activeLearningUnitViewElementId != null) {
            FLGMediaPoolElement learningUnitViewElement =
                (FLGMediaPoolElement)learningUnitViewElementsManager.getLearningUnitViewElement(activeLearningUnitViewElementId, false);
            if (learningUnitViewElement != null) {
                return learningUnitViewElement.getType();
            }
        }
        return null;
    }

    class FLGMediaPoolStatusPanel_LearningUnitViewAdapter extends FSLLearningUnitViewAdapter {
        int timeNow = 0;
        int timeMax = 0;
        
        public void learningUnitViewElementActivated(FSLLearningUnitViewEvent event) {
            FLGMediaPoolElement learningUnitViewElement =
                (FLGMediaPoolElement)learningUnitViewElementsManager.getLearningUnitViewElement(event.getActiveLearningUnitViewElementId(), false);
            buildDependentUI();
        }

        // Show playing time
        public void learningUnitViewSpecificEventOccurred(FSLLearningUnitViewEvent e) {
            FLGMediaPoolViewEvent mediaPoolViewEvent = (FLGMediaPoolViewEvent)e;
            if (mediaPoolViewEvent.getEventSpecificType() == FLGMediaPoolViewEvent.MEDIA_NEW_PAGE_DISPLAYED) {
                int currentPage = mediaPoolViewEvent.currentPage;
                int pageCount = mediaPoolViewEvent.pageCount; 
                setText(internationalization.getString("text.pdf.page") + " " + currentPage + " / " + pageCount);
            }
            if (mediaPoolViewEvent.getEventSpecificType() == FLGMediaPoolViewEvent.MEDIA_PLAYING_TIME_PROGRESS) {
                // right hand label
                int maxMin = (int)(mediaPoolViewEvent.maximumPlayingTime / 60);
                int maxSeconds = (int)(mediaPoolViewEvent.maximumPlayingTime % 60);
                rightLabel.setText(minuteFormat.format(maxMin) + secondsFormat.format(maxSeconds));
                // left hand label (original status line text)
                int actualMin = (int)(mediaPoolViewEvent.actualPlayingTimeSeconds / 60);
                int actualSeconds = (int)(mediaPoolViewEvent.actualPlayingTimeSeconds % 60);
                setText(minuteFormat.format(actualMin) + secondsFormat.format(actualSeconds) );
                updatePlayBar(mediaPoolViewEvent.actualPlayingTimeSeconds, mediaPoolViewEvent.maximumPlayingTime);
            }
            if (mediaPoolViewEvent.getEventSpecificType() == FLGMediaPoolViewEvent.MEDIA_END_OF_MEDIA_REACHED) {
                performStopAction();
            }
            if (mediaPoolViewEvent.getEventSpecificType() == FLGMediaPoolViewEvent.MEDIA_STOP_BUTTON_PRESSED) {
                performStopAction();
            }
        }
        
        private void performStopAction() {
            setText(internationalization.getString("text." + getMediaType() + ".hint"));
            playBar.setValue(0);    
            playBar.setEnabled(false);
            volumeBar.setEnabled(false);
            rightLabel.setVisible(false);
            playing = false;
        }
        
        private void updatePlayBar(double actualPlayingTime, int maximumPlayingTime) {
            if (!playing) {
                playBar.setEnabled(true);
                volumeBar.setEnabled(true);
                rightLabel.setVisible(true);
                Hashtable labelTable = new Hashtable();
                int labelStep = max(60, (int)(maximumPlayingTime/60.));
                playBar.setMaximum(maximumPlayingTime);
                playBar.setMajorTickSpacing(max(60, labelStep));
                playBar.setMinorTickSpacing(max(1, labelStep/2));
                labelTable.put(new Integer(1), new JLabel("" + 1));
                for (int ix = 60; ix <= maximumPlayingTime; ix += labelStep) {
                    labelTable.put(new Integer(ix), new JLabel("" + ix));
                }
                playBar.setLabelTable(labelTable);
                playing = true;
            }
            if (!adjusting) {
                playBar.setValue((int)actualPlayingTime);
                playBar.repaint();
            }
        }
        
        private int min(int value1, int value2) {
            if (value1 <= value2) return value1;
            return value2;
        }

        private int max(int value1, int value2) {
            if (value1 >= value2) return value1;
            return value2;
        }
    }
    
    class VolumeBarMouseListener implements MouseListener, MouseMotionListener {
        
        public void mouseMoved(java.awt.event.MouseEvent mouseEvent) {
        }
        
        public void mouseDragged(java.awt.event.MouseEvent mouseEvent) {
            FLGMediaPoolViewEvent mediaPoolViewEvent = (FLGMediaPoolViewEvent)FLGMediaPoolViewEvent.createViewSpecificEvent(
                FLGMediaPoolViewEvent.MEDIA_VOLUME_STEP_SET, learningUnitViewManager.getActiveLearningUnitViewElementId());
            mediaPoolViewEvent.volumeStep = volumeBar.getValue();
            learningUnitViewManager.fireLearningUnitViewEvent(mediaPoolViewEvent);            
       }
        
        public void mouseClicked(java.awt.event.MouseEvent mouseEvent) {
        }
        
        public void mouseEntered(java.awt.event.MouseEvent mouseEvent) {
        }
        
        public void mouseExited(java.awt.event.MouseEvent mouseEvent) {
        }
        
        public void mousePressed(java.awt.event.MouseEvent mouseEvent) {
        }
        
        public void mouseReleased(java.awt.event.MouseEvent mouseEvent) {
            FLGMediaPoolViewEvent mediaPoolViewEvent = (FLGMediaPoolViewEvent)FLGMediaPoolViewEvent.createViewSpecificEvent(
                FLGMediaPoolViewEvent.MEDIA_VOLUME_STEP_SET, learningUnitViewManager.getActiveLearningUnitViewElementId());
            mediaPoolViewEvent.volumeStep = volumeBar.getValue();
            learningUnitViewManager.fireLearningUnitViewEvent(mediaPoolViewEvent);            
        }                
    }
            
    class PlayBarMouseListener implements MouseListener, MouseMotionListener {
        
        public void mouseClicked(java.awt.event.MouseEvent mouseEvent) {
        }
        
        public void mouseEntered(java.awt.event.MouseEvent mouseEvent) {
        }
        
        public void mouseExited(java.awt.event.MouseEvent mouseEvent) {
        }
        
        public void mousePressed(java.awt.event.MouseEvent mouseEvent) {
            adjusting = true;
        }
        
        public void mouseReleased(java.awt.event.MouseEvent mouseEvent) {
            FLGMediaPoolViewEvent mediaPoolViewEvent = (FLGMediaPoolViewEvent)FLGMediaPoolViewEvent.createViewSpecificEvent(
                FLGMediaPoolViewEvent.MEDIA_PROGRESS_STEP_SET, learningUnitViewManager.getActiveLearningUnitViewElementId());
            mediaPoolViewEvent.actualPlayingTimeSeconds = playBar.getValue();
            learningUnitViewManager.fireLearningUnitViewEvent(mediaPoolViewEvent);            
            adjusting = false;
        }
        
        public void mouseDragged(java.awt.event.MouseEvent mouseEvent) {
            while(playBar.getValueIsAdjusting()) {
            }
        }
        
        public void mouseMoved(java.awt.event.MouseEvent mouseEvent) {
        }
        
    }
    
}
