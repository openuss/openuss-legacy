/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.elementsContentsPanel;

import java.awt.*;
import java.io.*;
import java.util.Date;

import javax.swing.*;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.data.xmlBindingSubclasses.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.events.learningUnitViewEvent.FLGMediaPoolViewEvent;
import freestyleLearningGroup.independent.gui.*;

/**
 * FLGMediaPoolPictureElementContentPanel.
 * Manager class for Media Pool Picture Panel.
 * @author Freestyle Learning Group
 */
public class FLGMediaPoolPictureElementContentPanel extends FSLAbstractLearningUnitViewElementContentPanel {
    private FLGImageComponent imageComponent;
    private FSLLearningUnitViewManager learningUnitViewManager;
    private String lastLoadedLearningUnitViewElementId;
    private boolean scaleToFit;
    private Color backgroundColor;
    private JPanel picturePanel;
    private boolean isModifiedByUserInput = false;
    
    /**
     * Inits FLGMediaPoolPictureElementContentPanel.
     * @param FSLLearningUnitViewManager learningUnitViewManager_local
     * @param FSLLearningUnitEventGenerator learningUnitEventGenerator
     * @param boolean editMode
     */
    public void init(FSLLearningUnitViewManager learningUnitViewManager_local, FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
        learningUnitViewManager = learningUnitViewManager_local;
        super.init(learningUnitViewManager, learningUnitEventGenerator, editMode);
        learningUnitViewManager.addLearningUnitViewListener(new PictureElementContentPanel_Adapter());
    }
    
    /**
     * Returns printable component.
     * @return FLGMediaPoolPictureElementContentPanel this
     */
    protected java.awt.Component getPrintableComponent() {
        return this;
    }
    
    /**
     * Returns edit tool bar components.
     * Media Pool does not implement tool bar.
     * @return JComponent[] components
     */
    protected JComponent[] getEditToolBarComponents() {
        return null;
    }
    
    /**
     * Builds independent UI.
     */
    protected void buildIndependentUI() {
        setOpaque(true);
        setBackground((Color)UIManager.get("FSLMainFrameColor1"));
    }
    
    /**
     * Returns, if panel is modified by user.
     * @return boolean isModifiedByUserInput
     */
    public boolean isModifiedByUserInput() {
        return isModifiedByUserInput;
    }
    
    /**
     * Saves user changes.
     */
    public void saveUserChanges() {
    	learningUnitViewElementId = learningUnitViewManager.getActiveLearningUnitViewElementId();
    	FLGMediaPoolElement learningUnitViewElement = (FLGMediaPoolElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
    	learningUnitViewElement.setLastModificationDate(String.valueOf(new Date().getTime()));
    }
    
    /**
     * Builds dependent UI.
     * @param boolean reloadIfAlreadyLoaded
     */
    protected void buildDependentUI(boolean reloadIfAlreadyLoaded) {
        if (learningUnitViewManager.getActiveLearningUnitViewElementId() != null) {
            FLGMediaPoolElement element = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewManager.getActiveLearningUnitViewElementId(),false);
            if (element != null && element.hasScaleToFit()) {
                element.setScaleToFit(element.getScaleToFit());
            }
        }
        createImage();
        layoutImage();
    }
    
    private void createImage() {
        FLGUIUtilities.startLongLastingOperation();
        if (scaleToFit) {
            imageComponent = new FLGImageComponent(true);
        }
        else {
            imageComponent = new FLGImageComponent(true, false);
        }
        if (learningUnitViewElementsManager != null) {
            FLGMediaPoolElement mediaPoolElement = (FLGMediaPoolElement)learningUnitViewElementsManager.getLearningUnitViewElement(learningUnitViewElementId, false);
            if (mediaPoolElement != null) {
                File imageFile = learningUnitViewElementsManager.resolveRelativeFileName(mediaPoolElement.getMediaFileName(), mediaPoolElement);
                imageComponent.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
                try {
                    Image image = FLGImageUtility.loadImageAndWait(imageFile.toURL());
                    imageComponent.setImage(image);
                }
                catch (Exception e) {
                    System.out.println("FLGMediaPoolPictureElementContentPanel.showImage(): " + e);
                }
                layoutImage();
            }
        }
        FLGUIUtilities.stopLongLastingOperation();
    }
    
    private void layoutImage() {
        removeAll();
        if (imageComponent != null) {
            if (scaleToFit) {
                setLayout(new BorderLayout());
                add(imageComponent);
            }
            else {
                imageComponent.setBorder(BorderFactory.createEmptyBorder());
                picturePanel = new JPanel(
                new FLGSingleLayout(FLGSingleLayout.CENTER, FLGSingleLayout.CENTER, FLGSingleLayout.SHRINK_AS_NEEDED,
                FLGSingleLayout.SHRINK_AS_NEEDED, true));
                picturePanel.setOpaque(true);
                picturePanel.setBackground((Color)UIManager.get("FSLMainFrameColor1"));
                picturePanel.setBorder(BorderFactory.createEmptyBorder());
                picturePanel.add(imageComponent);
                // picture panel should be contained in Scrollpane
                JScrollPane scrollPane = new JScrollPane(picturePanel);
                scrollPane.setBorder(BorderFactory.createEmptyBorder());
                // fill picture panel into ContentPanel fitting window size
                setLayout(new GridLayout(1, 1));
                add(scrollPane);
            }
        }
    }
    
    class PictureElementContentPanel_Adapter extends FSLLearningUnitViewAdapter {
        public void learningUnitViewFullScreenModeSelected(FSLLearningUnitViewEvent event) {
            if (event.isFullScreenModeRequested()) {
                backgroundColor = Color.black;
            }
            else {
                backgroundColor = (Color)UIManager.get("FSLMainFrameColor1");
            }
            picturePanel.setBackground(backgroundColor);
            setBackground(backgroundColor);
        }
        
        public void learningUnitViewScaleModeChanged(FSLLearningUnitViewEvent event) {
            scaleToFit = !scaleToFit;
            if (editMode) {
                FLGMediaPoolElement element = (FLGMediaPoolElement)learningUnitViewElementsManager.getLearningUnitViewElement(
                    learningUnitViewManager.getActiveLearningUnitViewElementId(),true);
                element.setScaleToFit(scaleToFit);
                element.setModified(true);
                learningUnitViewElementsManager.setModified(true);
            } 
            buildDependentUI(false);
        }
        
        public void learningUnitViewElementActivated(FSLLearningUnitViewEvent event) {
            FLGMediaPoolElement element = (FLGMediaPoolElement)
            learningUnitViewElementsManager.getLearningUnitViewElement(
            learningUnitViewManager.getActiveLearningUnitViewElementId(),false);
            if (element != null && element.hasScaleToFit()) {
                scaleToFit = element.getScaleToFit();
            }
        }
    }
}
