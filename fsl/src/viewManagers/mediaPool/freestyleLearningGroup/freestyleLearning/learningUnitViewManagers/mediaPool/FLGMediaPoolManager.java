/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool;

import java.awt.*;
import java.io.*;

import javax.swing.*;
import javax.xml.bind.*;

import freestyleLearning.learningUnitViewAPI.FSLAbstractLearningUnitViewManager;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewSecondaryActivationButton;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewXMLDocument;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewsActivator;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitsActivator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEvent;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitEventGenerator;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.FSLLearningUnitVetoableAdapter;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.FSLLearningUnitViewEvent;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.data.xmlBinding.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.data.xmlBindingSubclasses.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.elementInteractionPanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.elementsContentsPanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.elementsStructurePanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.statusPanel.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

/**
 * FLGMediaPoolManager.
 * Manager Class for Media Pool View.
 * @author Freestyle Learning Group
 */
public class FLGMediaPoolManager extends FSLAbstractLearningUnitViewManager {
    private FSLLearningUnitViewSecondaryActivationButton secondaryActivationButton;
    private FLGInternationalization internationalization;
    
    /**
     * Inits FLGMediaPoolManager.
     * @param FSLLearningUnitsActivator learningUnitsActivator,
     * @param FSLLearningUnitViewsActivator learningUnitViewsActivator
     * @param FSLLearningUnitEventGenerator learningUnitEventGenerator
     * @param String learningUnitViewManagerId
     * @param String learningUnitViewManagerTitle
     * @param File learningUnitViewManagerCodeDirectory
     * @param boolean editMode
     * @param boolean originalElementsOnly
     * @param FLGLongLastingOperationStatus progressStatus
     */
    public void init(FSLLearningUnitsActivator learningUnitsActivator,
    FSLLearningUnitViewsActivator learningUnitViewsActivator, FSLLearningUnitEventGenerator learningUnitEventGenerator,
    String learningUnitViewManagerId, String learningUnitViewManagerTitle, File learningUnitViewManagerCodeDirectory,
    boolean editMode, boolean originalElementsOnly, FLGLongLastingOperationStatus progressStatus) {
        super.init(learningUnitsActivator, learningUnitViewsActivator, learningUnitEventGenerator,
        learningUnitViewManagerId, learningUnitViewManagerTitle, learningUnitViewManagerCodeDirectory, editMode,
        originalElementsOnly, progressStatus);
        int stepSize = progressStatus.getStepSize();
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
        internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.internationalization",
        getClass().getClassLoader());
        secondaryActivationButton = new FSLLearningUnitViewSecondaryActivationButton(loadImage("secondaryActivationButton.gif"));
        secondaryActivationButton.setToolTipText(internationalization.getString("button.primaryActivation.toolTipText"));
        elementsStructurePanel = new FLGMediaPoolElementsStructurePanel();
        elementsStructurePanel.init(this, learningUnitEventGenerator, editMode);
        elementsStructurePanel.setAutomaticActivation(true);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
        elementInteractionPanel = new FLGMediaPoolElementInteractionPanel();
        elementInteractionPanel.init(this, learningUnitEventGenerator, editMode);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
        elementsContentsPanel = new FLGMediaPoolElementsContentsPanel();
        elementsContentsPanel.init(this, learningUnitEventGenerator, editMode);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
        statusPanel = new FLGMediaPoolStatusPanel();
        statusPanel.init(this, learningUnitEventGenerator, editMode);
        progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
        learningUnitEventGenerator.addLearningUnitListener(new MediaPool_LearningUnitAdapter());
        folderImportSupported = true;
    }
    
    /**
     * Carsten Fiedler, 21.08.2006
     * Method for setting type for imported folder files in learning unit view element descriptor.
     * @param <code>java.util.List</code> importedFiles
     * @param <code>java.util.List</code> newElements
     * @param <code>String</code> fileType
     */
    public void setElementSpecififcFileProperties(java.util.List importedFiles, java.util.List newElements, String fileType) {
        // set file type and copy file into learning unit directory
        String[] newElementIds = new String[newElements.size()];
        
        for (int i=0; i<newElements.size(); i++) {
            // set name and type
            FLGMediaPoolElement element = (FLGMediaPoolElement)newElements.get(i);
            File importedFile = (File) importedFiles.get(i);
            newElementIds[i] = element.getId();
            if(!element.getFolder()) {
                element.setType(fileType);
                // copy file
                String sourceMediaFileExtension = "." + FLGFileUtility.getExtension(importedFile.getName());
                File destinationFile = learningUnitViewElementsManager.createNewFileForElementsExternalData(fileType,
                sourceMediaFileExtension, element.getId());
                element.setMediaFileName(destinationFile.getName());
                FLGFileUtility.copyFile(importedFile, destinationFile);
            }
        }
        learningUnitViewElementsManager.setModified(true);
        
        FSLLearningUnitViewEvent event = FSLLearningUnitViewEvent.createElementsCreatedEvent(getLearningUnitViewManagerId(),newElementIds);
        fireLearningUnitViewEvent(event);
    }
    
    /**
     * Returns Main Help Page URL.
     * @return java.net.URL URL
     */
    public java.net.URL getMainHelpPageUrl() {
        return getClass().getClassLoader().getResource("freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/mediaPool/help");
    }
    
    /**
     * Returns Secondary Activation Button.
     * @return FSLLearningUnitViewSecondaryActivationButton secondaryActivationButton
     */
    public FSLLearningUnitViewSecondaryActivationButton getSecondaryActivationButton() {
        return secondaryActivationButton;
    }
    
    /**
     * Creates Dispatcher.
     * @return Dispatcher dispatcher
     */
    protected Dispatcher createDispatcher() {
        Dispatcher d = FLGMediaPoolDescriptor.newDispatcher();
        d.register(MediaPoolDescriptor.class, FLGMediaPoolDescriptor.class);
        d.register(ViewElement.class, FLGMediaPoolElement.class);
        d.register(ViewElementLink.class, FLGMediaPoolElementLink.class);
        d.register(ViewElementLinkTarget.class, FLGMediaPoolElementLinkTarget.class);
        return d;
    }
    
    /**
     * Creates learning Unit View XML Document.
     * @return FSLLearningUnitViewXMLDocument document
     */
    protected FSLLearningUnitViewXMLDocument createLearningUnitViewXMLDocument() {
        return new FLGMediaPoolDescriptor();
    }
    
    private Image loadImage(String imageFileName) {
        return FLGImageUtility.loadImageAndWait(getClass().getClassLoader().getResource("freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/mediaPool/images/" +
        imageFileName));
    }
    
    private void exportLearningUnitViewElementsToSpecifiedFile(String learningUnitViewElementId, File selectedFile, boolean exportChildren) {
        FLGMediaPoolElement element = null;
        if (userRoleIsAuthor || originalElementsOnly) {
            element = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewOriginalElement(
            learningUnitViewElementId);
        }
        else {
            // check for user element
            element = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewUserElement(
            learningUnitViewElementId);
            // if no user element
            if(element==null) {
                // get original element
                element = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewOriginalElement(
                learningUnitViewElementId);
            }
        }
        if(exportChildren) {
            // if folder does not exit mkdir for folder
            selectedFile = fileAlreadyExists(selectedFile,0,true);
            selectedFile.mkdir();
            // get all children from structure tree folder
            String[] children = learningUnitViewElementsManager.getAllLearningUnitElementsByDepthFirstSearch();
            for (int i=0; i<children.length; i++) {
                FLGMediaPoolElement childElement = null;
                if (userRoleIsAuthor || originalElementsOnly) {
                    childElement = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewOriginalElement(
                    children[i]);
                } else {
                    // check for user element
                    childElement = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewUserElement(
                    children[i]);
                    // if no user element
                    if(childElement==null) {
                        // get original element
                        childElement = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewOriginalElement(
                        children[i]);
                    }
                }
                if ((childElement.getParentId()).equals(element.getId())) {
                    if (childElement.getFolder()) {
                        // save folder elements
                        File file = new File(selectedFile.getAbsolutePath() +
                        System.getProperty("file.separator") + childElement.getTitle());
                        exportLearningUnitViewElementsToSpecifiedFile(childElement.getId(), file, true);
                    } else {
                        // save file
                        File sourceMediaFile;
                        FLGMediaPoolElement viewElement = null;
                        if (userRoleIsAuthor || originalElementsOnly) {
                            sourceMediaFile = new File(learningUnitViewElementsManager.getLearningUnitViewOriginalDataDirectory().getAbsolutePath() +
                            System.getProperty("file.separator") + childElement.getMediaFileName());
                        } else {
                            // check for user element
                            viewElement = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewUserElement(
                            childElement.getId());
                            // if no user element
                            if(viewElement==null) {
                                // get original element
                                viewElement = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewOriginalElement(
                                childElement.getId());
                                sourceMediaFile = new File(learningUnitViewElementsManager.getLearningUnitViewOriginalDataDirectory().getAbsolutePath() +
                                System.getProperty("file.separator") + childElement.getMediaFileName());
                            } else {
                                sourceMediaFile = new File(learningUnitViewElementsManager.getLearningUnitViewUserDataDirectory().getAbsolutePath() +
                                System.getProperty("file.separator") + childElement.getMediaFileName());
                            }
                        }
                        
                        File targetMediaFile = new File(selectedFile.getAbsolutePath() +
                        System.getProperty("file.separator") + childElement.getTitle() + "." +
                        FLGFileUtility.getExtension(childElement.getMediaFileName()));
                        
                        // if file exits, rename elements to store
                        targetMediaFile = fileAlreadyExists(targetMediaFile,0,false);
                        
                        // copy
                        FLGUIUtilities.startLongLastingOperation();
                        FLGFileUtility.copyFile(sourceMediaFile, targetMediaFile);
                        FLGUIUtilities.stopLongLastingOperation();
                    }
                }
            }
        }
        else {
            // save file
            File sourceMediaFile;
            FLGMediaPoolElement viewElement = null;
            if (userRoleIsAuthor || originalElementsOnly) {
                sourceMediaFile = new File(learningUnitViewElementsManager.getLearningUnitViewOriginalDataDirectory().getAbsolutePath() +
                System.getProperty("file.separator") + element.getMediaFileName());
            } else {
                // check for user element
                viewElement = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewUserElement(
                element.getId());
                // if no user element
                if(viewElement==null) {
                    // get original element
                    viewElement = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewOriginalElement(
                    element.getId());
                    sourceMediaFile = new File(learningUnitViewElementsManager.getLearningUnitViewOriginalDataDirectory().getAbsolutePath() +
                    System.getProperty("file.separator") + element.getMediaFileName());
                } else {
                    sourceMediaFile = new File(learningUnitViewElementsManager.getLearningUnitViewUserDataDirectory().getAbsolutePath() +
                    System.getProperty("file.separator") + element.getMediaFileName());
                }
            }
            
            // if file exits, rename element to store
            selectedFile = fileAlreadyExists(selectedFile,0,false);
            
            // copy
            FLGUIUtilities.startLongLastingOperation();
            FLGFileUtility.copyFile(sourceMediaFile, selectedFile);
            FLGUIUtilities.stopLongLastingOperation();
        }
    }
    
    /**
     * Exports Learning Unit View Element.
     * @param String learningUnitViewElementId
     */
    public void exportLearningUnitViewElement(String learningUnitViewElementId) {
        FLGMediaPoolElement element = null;
        if (userRoleIsAuthor || originalElementsOnly) {
            element = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewOriginalElement(
            learningUnitViewElementId);
        } else {
            // check for user element
            element = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewUserElement(
            learningUnitViewElementId);
            // if no user element
            if(element==null) {
                // get original element
                element = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewOriginalElement(
                learningUnitViewElementId);
            }
        }
        boolean exportChildren=false;
        if (element.getFolder()) {
            // open message: do you really want to export all children?
            int returnValue = FLGOptionPane.showConfirmDialog(
            internationalization.getString("mediaPool.dialog.learningUnitViewElementExport.folderExportMessage.message"),
            internationalization.getString("mediaPool.dialog.learningUnitViewElementExport.folderExportMessage.windowTitle"),
            FLGOptionPane.OK_CANCEL_OPTION, FLGOptionPane.QUESTION_MESSAGE);
            if (returnValue==FLGOptionPane.OK_OPTION) {
                exportChildren=true;
                openFileChooser(element, exportChildren);
            }
        } else {
            openFileChooser(element,exportChildren);
        }
    }
    
    // checks, if file already exits
    // if so, file will be renamed
    private File fileAlreadyExists(File file, int counter, boolean exportChildren) {
        File parentFile = new File(file.getParent());
        if(parentFile!=null) {
            File[] children = parentFile.listFiles();
            for (int i=0; i<children.length; i++) {
                if (children[i].equals(file)) {
                    String extension = FLGFileUtility.getExtension(file.getName());
                    StringBuffer newFilePath = new StringBuffer(file.getAbsolutePath());
                    int length = newFilePath.length();
                    counter++;
                    if (exportChildren) {
                        for (int j=0; j<extension.length(); j++) {
                            newFilePath.deleteCharAt(length-1-j);
                        }
                        file = fileAlreadyExists(new File(newFilePath.toString() + "_" + counter),counter,true);
                    } else {
                        for (int j=0; j<=extension.length(); j++) {
                            newFilePath.deleteCharAt(length-1-j);
                        }
                        file = fileAlreadyExists(new File(newFilePath.toString() + "_" + counter + "." + extension),counter,false);
                    }
                    break;
                }
            }
        }
        return file;
    }
    
    private void openFileChooser(FLGMediaPoolElement element, boolean exportChildren) {
        JFileChooser fileDialog = new JFileChooser();
        fileDialog.setDialogTitle(internationalization.getString("exportMediaFileDialog.title"));
        java.awt.Dimension screenDim = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        fileDialog.setLocation((int)(screenDim.getWidth() - fileDialog.getWidth()) / 2,
        (int)(screenDim.getHeight() - fileDialog.getHeight()) / 2);
        String fileExtension;
        if (!exportChildren) {
            fileExtension = "." + FLGFileUtility.getExtension(element.getMediaFileName());
        } else {
            fileExtension = "";
        }
        fileDialog.setFileFilter(new FLGUIUtilities.FLGFileFilter(new String[] { fileExtension }, FLGFileUtility.getExtension(element.getMediaFileName())));
        File selectedFile = new File(this.getLearningUnitViewManagerTitle() + "_" + element.getTitle() + fileExtension);
        fileDialog.setSelectedFile(selectedFile);
        if (fileDialog.showSaveDialog(new JPanel()) == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileDialog.getSelectedFile();
            // check, if selected file already exits
            if (!selectedFile.equals(fileAlreadyExists(selectedFile,0,selectedFile.isDirectory()))) {
                // show overwrite message
                int returnValue = FLGOptionPane.showConfirmDialog(
                internationalization.getString("mediaPool.dialog.learningUnitViewElementExport.overwriteFile.message"),
                internationalization.getString("mediaPool.dialog.learningUnitViewElementExport.overwriteFile.windowTitle"),
                FLGOptionPane.OK_CANCEL_OPTION, FLGOptionPane.OK_CANCEL_OPTION);
                if (returnValue==FLGOptionPane.OK_OPTION) {
                    // store file, else abort
                    File sourceMediaFile;
                    FLGMediaPoolElement viewElement = null;
                    if (userRoleIsAuthor || originalElementsOnly) {
                        sourceMediaFile = new File(learningUnitViewElementsManager.getLearningUnitViewOriginalDataDirectory().getAbsolutePath() +
                        System.getProperty("file.separator") + element.getMediaFileName());
                    } else {
                        // check for user element
                        viewElement = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewUserElement(
                        element.getId());
                        // if no user element
                        if(viewElement==null) {
                            // get original element
                            viewElement = (FLGMediaPoolElement) learningUnitViewElementsManager.getLearningUnitViewOriginalElement(
                            element.getId());
                            sourceMediaFile = new File(learningUnitViewElementsManager.getLearningUnitViewOriginalDataDirectory().getAbsolutePath() +
                            System.getProperty("file.separator") + element.getMediaFileName());
                        } else {
                            sourceMediaFile = new File(learningUnitViewElementsManager.getLearningUnitViewUserDataDirectory().getAbsolutePath() +
                            System.getProperty("file.separator") + element.getMediaFileName());
                        }
                    }
                    // copy
                    FLGUIUtilities.startLongLastingOperation();
                    FLGFileUtility.copyFile(sourceMediaFile, selectedFile);
                    FLGUIUtilities.stopLongLastingOperation();
                }
            } else {
                // store file(s)
                exportLearningUnitViewElementsToSpecifiedFile(element.getId(),selectedFile,exportChildren);
            }
        }
    }
    
    /**
     * MediaPool_LearningUnitAdapter.
     * Inner class for setting user role identifier.
     */
    class MediaPool_LearningUnitAdapter extends FSLLearningUnitVetoableAdapter {
        public void learningUnitUserViewChanged(FSLLearningUnitEvent event) {
        	if(learningUnitViewElementsManager!=null) {	
        		if(event.isOriginalElementsOnly()) {
	            	userRoleIsAuthor=true;
	                learningUnitViewElementsManager.setOriginalElementsOnly(true);
	            } else {
	                userRoleIsAuthor=false;
	                learningUnitViewElementsManager.setOriginalElementsOnly(false);
	            }
        	}
        }
    }
}
