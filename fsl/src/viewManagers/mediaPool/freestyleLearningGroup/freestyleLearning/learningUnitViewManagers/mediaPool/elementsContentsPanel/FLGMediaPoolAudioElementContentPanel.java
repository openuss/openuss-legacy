/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.elementsContentsPanel;

import java.io.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.elementsContentsPanel.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.data.xmlBindingSubclasses.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.events.learningUnitViewEvent.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;
import freestyleLearningGroup.independent.media.*;

public class FLGMediaPoolAudioElementContentPanel extends FLGMediaPoolPlayableMediaContentPanel {
    public void init(FSLLearningUnitViewManager learningUnitViewManager,
        FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
            super.init(learningUnitViewManager, learningUnitEventGenerator, editMode);
            learningUnitViewManager.addLearningUnitViewListener(new AudioElementContentPanel_Adapter());
    }
    
    class AudioElementContentPanel_Adapter extends FSLLearningUnitViewAdapter {
        public void learningUnitViewSpecificEventOccurred(FSLLearningUnitViewEvent e) {
            int mediaPoolViewEventType = ((FLGMediaPoolViewEvent)e).getEventSpecificType();
            switch (mediaPoolViewEventType) {
                case FLGMediaPoolViewEvent.MEDIA_PLAY_BUTTON_PRESSED: {
                    if(paused) {
                    	if(lastLoadedLearningUnitViewElementId != null && learningUnitViewElementId!= null) {
	                    	if(lastLoadedLearningUnitViewElementId == learningUnitViewElementId) {
		                    	// resume playing
		                    	play();
	                    	} else {
	                    		stop();
	                    	}
                    	}
                    } else if(!isPlaying) {
	                    FLGMediaPoolElement element = (FLGMediaPoolElement)learningUnitViewManager.getLearningUnitViewElementsManager().getLearningUnitViewElement(activeLearningUnitViewElementId, false);
		                if (element != null) {
		                	if (element.getType().equals(FLGMediaPoolElement.FILE_TYPE_AUDIO)) {
		                    	  stop();
		                        loadMediaToCurrentElement();
		                        currentPlayedElementId = element.getId();
		                        play();
		                    }
                    	}
                    }
                    break;
                }
            }
        }
    }
}
