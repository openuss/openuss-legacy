/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.data.xmlBindingSubclasses;

import java.util.*;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.data.xmlBinding.*;

public class FLGMediaPoolElement extends ViewElement implements FSLLearningUnitViewElement {
    private boolean modified;
    public static String FILE_TYPE_PICTURE = "picture";
    public static String FILE_TYPE_VIDEO = "video";
    public static String FILE_TYPE_AUDIO = "audio";
    public static String FILE_TYPE_PDF = "pdf";
    public static String FILE_TYPE_PPT = "ppt";
    public static String FILE_TYPE_EXTERNAL = "external";

    public boolean isModified() {
        return modified;
    }

    public void setModified(boolean modified) {
        this.modified = modified;
    }

    public FSLLearningUnitViewElement deepCopy() {
        FLGMediaPoolElement copy = new FLGMediaPoolElement();
        FSLLearningUnitViewElementsManager.copyLearningUnitViewElement(this, copy);
        copy.setMediaFileName(getMediaFileName());
        return copy;
    }

    public String[] getLearningUnitViewElementExternalFilesRelativePaths(FSLLearningUnitViewElementsManager
        learningUnitViewElementsManager) {
            if (!getFolder()) {
                Vector paths = new Vector();
                paths.add(getMediaFileName());
                if (getAdditionalFileName() != null) paths.add(getAdditionalFileName());
                // übrigen Dateien aus Verzeichnissen anfügen
                return (String[]) paths.toArray(new String[] { });
            }
            else return null;
    }

    public FSLLearningUnitViewElementLink getLearningUnitViewElementLink(String learningUnitViewElementLinkId) {
        for (int i = 0; i < getLearningUnitViewElementLinks().size(); i++) {
            FSLLearningUnitViewElementLink learningUnitViewElementLink =
                (FSLLearningUnitViewElementLink)getLearningUnitViewElementLinks().get(i);
            if (learningUnitViewElementLink.getId().equals(learningUnitViewElementLinkId))
                return learningUnitViewElementLink;
        }
        return null;
    }

    public FSLLearningUnitViewElementLink addNewLearningUnitViewElementLink() {
        FLGMediaPoolElementLink learningUnitViewElementLink = new FLGMediaPoolElementLink();
        learningUnitViewElementLink.emptyLearningUnitViewElementLinkTargets();
        return FSLLearningUnitViewElementsManager.addLearningUnitViewElementLink(learningUnitViewElementLink, this);
    }
    
}
