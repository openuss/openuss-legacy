/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.notes.data.xmlBindungSubclasses;

import java.util.Date;
import java.util.List;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElement;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElementLink;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElementsManager;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.notes.data.xmlBinding.Note;
import freestyleLearningGroup.independent.gui.FLGHtmlUtilities;

public class FLGNoteElement extends Note implements FSLLearningUnitViewElement {
    public static final String ELEMENT_TYPE_NOTE = "note";
    public static final String ELEMENT_TYPE_FOLDER = "folder";
    private boolean modified;
    private String id;
    private String parentId;
    private String title;
    private boolean isFolder;
    private String lastModificationDate;

    public String getLastModificationDate() {
    	return lastModificationDate;
    }
    
    public void setLastModificationDate(String lastModificationDate) {
    	this.lastModificationDate = lastModificationDate;
    }

    public boolean isModified() {
        return modified;
    }

    public void setModified(boolean modified) {
        this.modified = modified;
    }

    public FSLLearningUnitViewElement deepCopy() {
        FLGNoteElement copy = new FLGNoteElement();
        FSLLearningUnitViewElementsManager.copyLearningUnitViewElement(this, copy);
        copy.setHtmlFileName(getHtmlFileName());
        return copy;
    }

    public String[] getLearningUnitViewElementExternalFilesRelativePaths(FSLLearningUnitViewElementsManager
        learningUnitViewElementsManager) {
            if (!getFolder() && getHtmlFileName() != null) {
                return FLGHtmlUtilities.getAllRelativeFileNamesToHtmlFile(getHtmlFileName(),
                    learningUnitViewElementsManager.resolveRelativeFileName(getHtmlFileName(), this));
            }
            else
                return null;
    }

    public FSLLearningUnitViewElementLink getLearningUnitViewElementLink(String learningUnitViewElementLinkId) {
        for (int i = 0; i < getLearningUnitViewElementLinks().size(); i++) {
            FSLLearningUnitViewElementLink learningUnitViewElementLink =
                (FSLLearningUnitViewElementLink)getLearningUnitViewElementLinks().get(i);
            if (learningUnitViewElementLink.getId().equals(learningUnitViewElementLinkId))
                return learningUnitViewElementLink;
        }
        return null;
    }

    public FSLLearningUnitViewElementLink addNewLearningUnitViewElementLink() {
        FLGNoteElementLink learningUnitViewElementLink = new FLGNoteElementLink();
        learningUnitViewElementLink.emptyNoteLinkTargets();
        return FSLLearningUnitViewElementsManager.addLearningUnitViewElementLink(learningUnitViewElementLink, this);
    }

    public List getLearningUnitViewElementLinks() {
        return getNoteLinks();
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getParentId() {
        return parentId;
    }

    public void setParentId(String parentId) {
        this.parentId = parentId;
    }

    public String getType() {
        return ELEMENT_TYPE_NOTE;
    }

    public void setType(String type) { }

    public boolean getFolder() {
        return isFolder;
    }

    public void setFolder(boolean folder) {
        isFolder = folder;
    }
}
