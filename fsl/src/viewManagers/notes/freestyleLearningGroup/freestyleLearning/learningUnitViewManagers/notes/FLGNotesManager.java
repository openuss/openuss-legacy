/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.notes;

import java.awt.Image;
import java.awt.event.*;
import java.io.*;
import javax.xml.bind.Dispatcher;

import freestyleLearning.homeCore.learningUnitsManager.*;
import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitViewEvent.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.notes.data.xmlBinding.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.notes.data.xmlBindungSubclasses.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.notes.elementInteractionPanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.notes.elementsContentsPanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.notes.elementsStructurePanel.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.notes.statusPanel.*;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

public class FLGNotesManager extends FSLAbstractLearningUnitViewManager {
    private final String LEARNING_UNIT_VIEW_DATA_FILENAME = "contents.xml";
    private FSLLearningUnitsManager learningUnitsManager;
    private FSLLearningUnitViewSecondaryActivationButton secondaryActivationButton;
    private FLGInternationalization internationalization;
    private FSLLearningUnitViewContextDependentActivationButton contextDependentActivationButton;
    private String contextDependentElementId;
    private String learningUnitId;
    private File learningUnitViewOriginalDataDirectory;
    private File learningUnitViewUserDataDirectory;
    private boolean noteExists = false;

    public void init(FSLLearningUnitsActivator learningUnitsActivator,
        FSLLearningUnitViewsActivator learningUnitViewsActivator, FSLLearningUnitEventGenerator learningUnitEventGenerator,
        String learningUnitViewManagerId, String learningUnitViewManagerTitle, File learningUnitViewManagerCodeDirectory,
        boolean editMode, boolean originalElementsOnly, FLGLongLastingOperationStatus progressStatus) {
            super.init(learningUnitsActivator, learningUnitViewsActivator, learningUnitEventGenerator,
                learningUnitViewManagerId, learningUnitViewManagerTitle, learningUnitViewManagerCodeDirectory, editMode,
                originalElementsOnly, progressStatus);
            this.learningUnitsManager = (FSLLearningUnitsManager)learningUnitsActivator;
            int stepSize = progressStatus.getStepSize();
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
            internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.notes.internationalization",
                getClass().getClassLoader());
            secondaryActivationButton = new FSLLearningUnitViewSecondaryActivationButton(loadImage("secondaryActivationButton.gif"));
            secondaryActivationButton.setToolTipText(internationalization.getString("button.secondaryActivation.toolTipText"));
            elementsStructurePanel = new FLGNotesElementsStructurePanel();
            elementsStructurePanel.init(this, learningUnitEventGenerator, editMode);
            elementsStructurePanel.setAutomaticActivation(true);
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
            elementInteractionPanel = new FLGNotesElementInteractionPanel();
            elementInteractionPanel.init(this, learningUnitEventGenerator, editMode);
            contextDependentActivationButton = new
                FSLLearningUnitViewContextDependentActivationButton(loadImage("contextDependentActivationButtonNoContent.gif"));
            contextDependentActivationButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    checkEditMode();
                }
            });
            contextDependentActivationButton.setToolTipText(internationalization.getString("button.contextDependentActivation.toolTipTextAddNote"));
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
            elementsContentsPanel = new FLGNotesElementsContentsPanel();
            elementsContentsPanel.init(this, learningUnitEventGenerator, editMode);
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
            statusPanel = new FLGNotesStatusPanel();
            statusPanel.init(this, learningUnitEventGenerator, editMode);
            progressStatus.setStatusValue(progressStatus.getStatusValue() + (int)(stepSize / 5.));
    }
    
    public boolean supportsImportStructure() {
        return false;
    }
    
    public java.net.URL getMainHelpPageUrl() {
        return getClass().getClassLoader().getResource("freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/notes/help");
    }

    public void introduceLearningUnitViewManager(FSLLearningUnitViewManager learningUnitViewManager) {
        super.introduceLearningUnitViewManager(learningUnitViewManager);
        learningUnitViewManager.addLearningUnitViewListener(new FLGNotesManager_LearningUnitViewAdapter());
    }

    public boolean isContextDependentLearningUnitViewManager() {
        return true;
    }

    public FSLLearningUnitViewSecondaryActivationButton getSecondaryActivationButton() {
        return secondaryActivationButton;
    }

    public FSLLearningUnitViewContextDependentActivationButton getContextDependentActivationButton() {
        return contextDependentActivationButton;
    }

    private boolean hasContextDependentElement(String targetLearningUnitViewElementId,
    		String targetLearningUnitViewManagerId) {
       	String id = targetLearningUnitViewElementId + "@" + targetLearningUnitViewManagerId;
          if (getLearningUnitViewElementsManager() != null && getLearningUnitViewElementsManager().getLearningUnitViewElement(id, false) != null) return true;
        return false;
    }

    // override FSLAbstractLearningUnitViewManager methods
    // because xml document does not directly match with element structure
    public void loadLearningUnitViewData(String learningUnitId, File learningUnitViewOriginalDataDirectory,
        File learningUnitViewUserDataDirectory) {
            this.learningUnitId = learningUnitId;
            this.learningUnitViewOriginalDataDirectory = learningUnitViewOriginalDataDirectory;
            this.learningUnitViewUserDataDirectory = learningUnitViewUserDataDirectory;
            FSLLearningUnitViewElementsManager learningUnitViewElementsManagerToLoad = null;
            if (cachingEnabled) {
                learningUnitViewElementsManagerToLoad =
                    (FSLLearningUnitViewElementsManager)learningUnitViewElementsManagerCache.get(learningUnitId);
            }
            if (learningUnitViewElementsManagerToLoad == null) {
                FSLLearningUnitViewXMLDocument originalData =
                    loadLearningUnitViewXMLDocument(
                    new File(learningUnitViewOriginalDataDirectory, LEARNING_UNIT_VIEW_DATA_FILENAME));
                FSLLearningUnitViewXMLDocument userData =
                    loadLearningUnitViewXMLDocument(
                    new File(learningUnitViewUserDataDirectory, LEARNING_UNIT_VIEW_DATA_FILENAME));
                setContextDependentElementProperties(originalData);
                setContextDependentElementProperties(userData);
                learningUnitViewElementsManagerToLoad =
                    createElementsManagerFromXMLDocuments(originalData, userData, learningUnitViewOriginalDataDirectory,
                    learningUnitViewUserDataDirectory);
                if (cachingEnabled)
                    learningUnitViewElementsManagerCache.put(learningUnitId, learningUnitViewElementsManagerToLoad);
                lastLoadedLearningUnitViewElementsManager = learningUnitViewElementsManagerToLoad;
            }
    }

    private void setContextDependentElementProperties(FSLLearningUnitViewXMLDocument xmlDocument) {
        // set element properties according to target elements
        for (int i = 0; i < xmlDocument.getLearningUnitViewElements().size(); i++) {
            FLGNoteElement noteElement = (FLGNoteElement)xmlDocument.getLearningUnitViewElements().get(i);
            String targetLearningUnitViewManagerId = noteElement.getTargetViewManagerId();
            String targetLearningUnitViewElementId = noteElement.getTargetViewElementId();
            FSLLearningUnitViewManager targetLearningUnitViewManager =
                learningUnitViewsActivator.getLearningUnitViewManager(targetLearningUnitViewManagerId);
            FSLLearningUnitViewElementsManager targetElementsManager =
                targetLearningUnitViewManager.getLearningUnitViewElementsManager();
            if (targetElementsManager != null) {
                FSLLearningUnitViewElement targetElement =
                    targetElementsManager.getLearningUnitViewElement(targetLearningUnitViewElementId, false);
                String noteElementId;
                String noteElementTitle;
                String noteElementParentId;
                String noteElementType;
                boolean noteElementIsFolder;
                if (!targetLearningUnitViewElementId.equals("_topLevelFolder")) {
                    if (targetElement != null) { // removed?
                        // get properties from target element
                        noteElementId = targetLearningUnitViewElementId + "@" + targetLearningUnitViewManagerId;
                        if (targetElement.getParentId().equals("none")) {
                            noteElementParentId = "_topLevelFolder@" + targetLearningUnitViewManagerId;
                        }
                        else {
                            noteElementParentId = targetElement.getParentId() + "@" + targetLearningUnitViewManagerId;
                        }
                        if (!targetElement.getFolder()) {
                            noteElementIsFolder = false;
                            noteElementTitle = internationalization.getString("text.noteTo") + targetElement.getTitle();
                            noteElementType = FLGNoteElement.ELEMENT_TYPE_NOTE;
                        }
                        else {
                            noteElementIsFolder = true;
                            noteElementTitle = targetElement.getTitle();
                            noteElementType = FLGNoteElement.ELEMENT_TYPE_FOLDER;
                        }
                    }
                    else {
                        // noteElementId = "_removed@" + targetLearningUnitViewManagerId;
                        noteElementId = targetLearningUnitViewElementId + "@" + targetLearningUnitViewManagerId;
                        noteElementTitle = "<" + targetLearningUnitViewManager.getLearningUnitViewManagerTitle() +
                            ": Element " + targetLearningUnitViewElementId + " " +
                            internationalization.getString("element.notFound") + ">";
                        noteElementParentId = "_topLevelFolder@" + targetLearningUnitViewManagerId;
                        noteElementIsFolder = false;
                        noteElementType = FLGNoteElement.ELEMENT_TYPE_NOTE;
                    }
                }
                else {
                    noteElementId = "_topLevelFolder@" + targetLearningUnitViewManagerId;
                    noteElementTitle = targetLearningUnitViewManager.getLearningUnitViewManagerTitle();
                    noteElementParentId = "none";
                    noteElementIsFolder = true;
                    noteElementType = FLGNoteElement.ELEMENT_TYPE_FOLDER;
                }
                noteElement.setId(noteElementId);
                noteElement.setTitle(noteElementTitle);
                noteElement.setParentId(noteElementParentId);
                noteElement.setType(noteElementType);
                noteElement.setFolder(noteElementIsFolder);
            }
        }
    }

    public boolean saveLearningUnitViewData() {
        boolean savingOK = true;
        elementsContentsPanel.saveUserChanges();
        FSLLearningUnitViewXMLDocument document;
        if (learningUnitViewElementsManager.isOriginalElementsModified()) {
            document = createXMLDocumentFromElementsManager(learningUnitViewElementsManager, true);
            savingOK = saveLearningUnitViewXMLDocument(document,
                new File(learningUnitViewElementsManager.getLearningUnitViewOriginalDataDirectory(),
                LEARNING_UNIT_VIEW_DATA_FILENAME));
            if (savingOK) {
                learningUnitViewElementsManager.setOriginalElementsModified(false);
                removeUnnecessaryExternalElementFiles(true);
                loadLearningUnitViewData(learningUnitId, learningUnitViewOriginalDataDirectory,
                    learningUnitViewUserDataDirectory);
            }
            else
                return false;
        }
        if (learningUnitViewElementsManager.isUserElementsModified()) {
            document = createXMLDocumentFromElementsManager(learningUnitViewElementsManager, false);
            savingOK = saveLearningUnitViewXMLDocument(document,
                new File(learningUnitViewElementsManager.getLearningUnitViewUserDataDirectory(),
                LEARNING_UNIT_VIEW_DATA_FILENAME));
            if (savingOK) {
                learningUnitViewElementsManager.setUserElementsModified(false);
                removeUnnecessaryExternalElementFiles(false);
                loadLearningUnitViewData(learningUnitId, learningUnitViewOriginalDataDirectory,
                    learningUnitViewUserDataDirectory);
            }
            else
                return false;
        }
        return savingOK;
    }

    private boolean saveLearningUnitViewXMLDocument(FSLLearningUnitViewXMLDocument learningUnitViewXMLDocument, File file) {
        File backUpFile = new File(file.getAbsolutePath() + "~");
        try {
            if (!file.exists()) {
                File directory = file.getParentFile();
                if (!directory.exists()) directory.mkdirs();
            }
            else {
                FLGFileUtility.copyFile(file, backUpFile);
            }
            FileOutputStream fileOutputStream = new FileOutputStream(file);
            learningUnitViewXMLDocument.validate();
            learningUnitViewXMLDocument.marshal(fileOutputStream);
            fileOutputStream.close();
            return true;
        }
        catch (Exception e) {
            e.printStackTrace(System.out);
            String message = internationalization.getString("dialog.message.errorSaving") + "\n" + file.getPath() + "\n\n" +
                internationalization.getString("dialog.message.checkFileProperties");
            FLGOptionPane.showMessageDialog(message, internationalization.getString("dialog.title.errorSaving"),
                FLGOptionPane.ERROR_MESSAGE);
            FLGFileUtility.copyFile(backUpFile, file);
            return false;
        }
    }

    public FSLLearningUnitViewXMLDocument loadLearningUnitViewXMLDocument(File file) {
        Dispatcher dispatcher = createDispatcher();
        FSLLearningUnitViewXMLDocument document = null;
        FileInputStream fileInputStream = null;
        if (file.exists()) {
            try {
                fileInputStream = new FileInputStream(file);
                document = (FSLLearningUnitViewXMLDocument)dispatcher.unmarshal(fileInputStream);
                document.validate();
                fileInputStream.close();
            }
            catch (Exception e) {
                e.printStackTrace(System.out);
            }
        }
        else {
            document = createLearningUnitViewXMLDocument();
        }
        return document;
    }

    public FSLLearningUnitViewElementsManager
        createElementsManagerFromXMLDocuments(FSLLearningUnitViewXMLDocument originalDocument,
        FSLLearningUnitViewXMLDocument userDocument, File learningUnitViewOriginalDataDirectory,
        File learningUnitViewUserDataDirectory) {
            FSLLearningUnitViewElementsManager elementsManager = new FSLLearningUnitViewElementsManager();
            elementsManager.init(this, learningUnitViewManagerId, learningUnitViewOriginalDataDirectory,
                learningUnitViewUserDataDirectory, originalElementsOnly);
            java.util.List originalElements = originalDocument.getLearningUnitViewElements();
            java.util.List userElements = userDocument.getLearningUnitViewElements();
            for (int i = 0; i < originalElements.size(); i++) {
                FSLLearningUnitViewElement element = (FSLLearningUnitViewElement)originalElements.get(i);
                elementsManager.addLearningUnitViewElement(element, true);
            }
            for (int i = 0; i < userElements.size(); i++)
                elementsManager.addLearningUnitViewElement((FSLLearningUnitViewElement)userElements.get(i), false);
            return elementsManager;
    }

    public FSLLearningUnitViewElement activateContextDependentElement(String targetLearningUnitViewManagerId,
        String targetLearningUnitViewElementId, boolean originalElementsOnly) {
            if (targetLearningUnitViewElementId != null) {
                contextDependentElementId = targetLearningUnitViewElementId + "@" + targetLearningUnitViewManagerId;
                FSLLearningUnitViewElement noteElement =
                    getLearningUnitViewElementsManager().getLearningUnitViewElement(contextDependentElementId, false);
                if (noteElement == null) {
                    // create new element
                    FSLLearningUnitViewManager targetLearningUnitViewManager =
                        learningUnitViewsActivator.getLearningUnitViewManager(targetLearningUnitViewManagerId);
                    noteElement = ((FLGNotesElementsStructurePanel)elementsStructurePanel).createContextDependentElement(targetLearningUnitViewManager,
                        targetLearningUnitViewElementId);
                }
                setActiveLearningUnitViewElementId(contextDependentElementId, null);
                return noteElement;
            }
            else
                return null;
    }

    protected Dispatcher createDispatcher() {
        Dispatcher d = FLGNotesDescriptor.newDispatcher();
        d.register(NotesDescriptor.class, FLGNotesDescriptor.class);
        d.register(Note.class, FLGNoteElement.class);
        d.register(NoteLink.class, FLGNoteElementLink.class);
        d.register(NoteLinkTarget.class, FLGNoteElementLinkTarget.class);
        return d;
    }

    protected FSLLearningUnitViewXMLDocument createLearningUnitViewXMLDocument() {
        return new FLGNotesDescriptor();
    }

    private Image loadImage(String imageFileName) {
        return FLGImageUtility.loadImageAndWait(getClass().getClassLoader().getResource("freestyleLearningGroup/freestyleLearning/learningUnitViewManagers/notes/images/" +
            imageFileName));
    }
    
    private void checkEditMode() {
        if (!noteExists) {
            learningUnitsManager.enterEditMode(true);
        }
    }

    class FLGNotesManager_LearningUnitViewAdapter extends FSLLearningUnitViewAdapter {
        public void learningUnitViewElementsCreated(FSLLearningUnitViewEvent event) {
            updateContextDependentActivationButton(event);
        }

        public void learningUnitViewElementsSelected(FSLLearningUnitViewEvent event) {
            updateContextDependentActivationButton(event);
        }

        private void updateContextDependentActivationButton(FSLLearningUnitViewEvent event) {
            contextDependentActivationButton.setEnabled(event.getLearningUnitViewManagerId() != learningUnitViewManagerId);
            String[] elementIds = event.getLearningUnitViewElementIds();
            String elementId = elementIds[elementIds.length - 1];
            String managerId = event.getLearningUnitViewManagerId();
            if (hasContextDependentElement(elementId, managerId)) {
                noteExists = true;
                contextDependentActivationButton.setImage(loadImage("contextDependentActivationButtonContentExisting.gif"));
            }
            else {
                noteExists = false;
                contextDependentActivationButton.setImage(loadImage("contextDependentActivationButtonNoContent.gif"));
            }
            contextDependentActivationButton.setEnabled(true);
            contextDependentActivationButton.repaint();
        }

        public void learningUnitViewActivated(FSLLearningUnitViewEvent event) {
            noteExists = false;
            contextDependentActivationButton.setImage(loadImage("contextDependentActivationButtonNoContent.gif"));
            contextDependentActivationButton.setToolTipText(internationalization.getString("button.contextDependentActivation.toolTipTextAddNote"));
           	contextDependentActivationButton.setEnabled(false);
        	contextDependentActivationButton.repaint();
        }

        public void learningUnitViewElementActivated(FSLLearningUnitViewEvent event) {
            String managerId = event.getLearningUnitViewManagerId();
            String elementId = event.getActiveLearningUnitViewElementId();
            if (hasContextDependentElement(elementId, managerId)) {
                noteExists = true;
                contextDependentActivationButton.setImage(loadImage("contextDependentActivationButtonContentExisting.gif"));
            } else {
                noteExists = false;
                contextDependentActivationButton.setImage(loadImage("contextDependentActivationButtonNoContent.gif"));
            }
            contextDependentActivationButton.setEnabled(true);
            contextDependentActivationButton.repaint();
        }
        
        public void learningUnitViewDeactivated(FSLLearningUnitViewEvent event) {
            if (event.getLearningUnitViewManagerId().equals(learningUnitViewManagerId)) {
                learningUnitsManager.enterEditMode(false);
            }
        }
        
        public void learningUnitViewElementsRemoved(FSLLearningUnitViewEvent event) {
            String[] removedElementIds = event.getLearningUnitViewElementIds();
            String removedElementsViewManager = event.getLearningUnitViewManagerId();
            for (int i = 0; i < removedElementIds.length; i++) {
                String id = removedElementIds[i] + "@" + removedElementsViewManager;
                FLGNoteElement noteElement = (FLGNoteElement)getLearningUnitViewElementsManager().getLearningUnitViewElement(id, false);
                if (noteElement != null) {
                    getLearningUnitViewElementsManager().removeLearningUnitViewElement(id);
                }
            }
        }
    }
}
