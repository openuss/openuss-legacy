/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.learningByDoing.elementsStructurePanel;

import java.awt.event.*;
import java.io.*;
import java.util.Date;

import javax.swing.*;

import freestyleLearning.learningUnitViewAPI.*;
import freestyleLearning.learningUnitViewAPI.elementsStructurePanel.*;
import freestyleLearning.learningUnitViewAPI.elementsStructurePanel.dialogs.*;
import freestyleLearning.learningUnitViewAPI.events.learningUnitEvent.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.learningByDoing.data.xmlBindingSubclasses.*;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.mediaPool.data.xmlBindingSubclasses.FLGMediaPoolElement;
import freestyleLearningGroup.independent.gui.*;
import freestyleLearningGroup.independent.util.*;

public class FLGLearningByDoingElementsStructurePanel extends FSLAbstractLearningUnitViewElementsStructurePanel {
    private ViewSpecificPanel learningUnitViewNewAndModifyElementDialogViewSpecificPane;
    private FLGInternationalization internationalization;
    private JCheckBox includeDirectoryContentCheckBox;
    private JCheckBox autoChangeWorkingDirectoryCheckBox;

    public void init(FSLLearningUnitViewManager learningUnitViewManager,
        FSLLearningUnitEventGenerator learningUnitEventGenerator, boolean editMode) {
            super.init(learningUnitViewManager, learningUnitEventGenerator, editMode);
            internationalization = new FLGInternationalization("freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.learningByDoing.elementsStructurePanel.internationalization",
                getClass().getClassLoader());
            learningUnitViewNewAndModifyElementDialogViewSpecificPane = new ViewSpecificPanel();
    }

    public FSLLearningUnitViewNewAndModifyElementDialogViewSpecificPane
        getLearningUnitViewNewAndModifyElementDialogViewSpecificPane() {
            return learningUnitViewNewAndModifyElementDialogViewSpecificPane;
    }

    public void modifyLearningUnitViewElement(FSLLearningUnitViewElement element) {
        FLGLearningByDoingElement learningByDoingElement = (FLGLearningByDoingElement)element;
        learningByDoingElement.setLastModificationDate(String.valueOf(new Date().getTime()));
        String learningByDoingElementID = element.getId();
        if (!learningByDoingElement.getFolder()) {
            learningByDoingElement.setType("application");
            File sourceExecutableFile = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getExecutableFile();
            String sourceExecutableFileName = sourceExecutableFile.getName();
            
			// check file extension
            String mediaFileName = sourceExecutableFile.getName();
        	StringBuffer mediaFileNameBuffer = new StringBuffer(mediaFileName);
        	StringBuffer mediaFileExtension = new StringBuffer();
            for (int j = 3; j >= 0; j--) {
            	mediaFileExtension.append(mediaFileNameBuffer.charAt(mediaFileName.length()-j-1));
            }
            if(mediaFileExtension.toString().equals(".pps") || mediaFileExtension.toString().equals(".ppt")) {
	            if(learningUnitViewNewAndModifyElementDialogViewSpecificPane.getFinalizePPTFlag()) {
	        		// convert ppt in pps file
	        		final File sourceMediaFile = sourceExecutableFile;
	        		String sourceMediaFileExtension = ".pps";
	                final File destinationMediaFile = learningUnitViewElementsManager.createNewFileForElementsExternalData(selectedMediaType,
	                        sourceMediaFileExtension, learningByDoingElement.getId());
	                FLGUIUtilities.startLongLastingOperation();
	                FLGFileUtility.copyFile(sourceMediaFile, destinationMediaFile);
	                learningByDoingElement.setExecutableFileName(destinationMediaFile.getName());
	                FLGUIUtilities.stopLongLastingOperation();
	        	} else {
	        		// convert pps in ppt file
	        		final File sourceMediaFile = sourceExecutableFile;
	        		String sourceMediaFileExtension = ".ppt";
	                final File destinationMediaFile = learningUnitViewElementsManager.createNewFileForElementsExternalData(selectedMediaType,
	                        sourceMediaFileExtension, learningByDoingElement.getId());
	                FLGUIUtilities.startLongLastingOperation();
	                FLGFileUtility.copyFile(sourceMediaFile, destinationMediaFile);
	                learningByDoingElement.setExecutableFileName(destinationMediaFile.getName());
	                FLGUIUtilities.stopLongLastingOperation();
	        	} 
            } else {
            	
            
	            learningByDoingElement.setDirectoryContentIncluded(includeDirectoryContentCheckBox.isSelected());
	            if (!sourceExecutableFileName.equals(learningByDoingElement.getExecutableFileName())) {
	                FLGUIUtilities.startLongLastingOperation();
	                if (learningByDoingElement.getDirectoryContentIncluded()) {
	                    File destinationDirectory = learningUnitViewElementsManager.createNewDirectoryForElementsExternalData("directory",
	                        "", learningByDoingElementID);
	                    File parentDirectoryOfExecutableFile = sourceExecutableFile.getParentFile();
	                    FLGFileUtility.copyDirectoryContent(parentDirectoryOfExecutableFile, destinationDirectory);
	                    learningByDoingElement.setExecutableFileName(destinationDirectory.getName() + "//" +
	                        sourceExecutableFileName);
	                    learningByDoingElement.setProgramParameters(destinationDirectory.getAbsolutePath());
	                }
	                else {
	                    File destinationDirectory = learningUnitViewElementsManager.getLearningUnitViewDataDirectory();
	                    FLGFileUtility.copyFile(sourceExecutableFile,
	                        new File(destinationDirectory.getPath() + "//" + sourceExecutableFile.getName()));
	                    learningByDoingElement.setExecutableFileName(sourceExecutableFileName);
	                    learningByDoingElement.setProgramParameters(destinationDirectory.getAbsolutePath());
	               }
	                FLGUIUtilities.stopLongLastingOperation();
	            }
	            learningByDoingElement.setProgramParameters(learningUnitViewNewAndModifyElementDialogViewSpecificPane.getParameters());
	            learningByDoingElement.setAutoChangeWorkingDirectory(autoChangeWorkingDirectoryCheckBox.isSelected());
            }
        } else {
            learningByDoingElement.setType("folder");
            learningByDoingElement.setExecutableFileName("");
        }
    }

    public FSLLearningUnitViewElement createLearningUnitViewElement(String id, String parentId, String title, boolean folder) {
        FLGLearningByDoingElement newElement = new FLGLearningByDoingElement();
        newElement.setId(id);
        newElement.setParentId(parentId);
        newElement.setTitle(title);
        newElement.setFolder(folder);
        newElement.setLastModificationDate(String.valueOf(new Date().getTime()));
        newElement.setDirectoryContentIncluded(false);
        if (folder) {
            newElement.setType("folder");
            newElement.setExecutableFileName("");
        } else {
            newElement.setType("application");
            File sourceExecutableFile = learningUnitViewNewAndModifyElementDialogViewSpecificPane.getExecutableFile();
            String sourceExecutableFileName = sourceExecutableFile.getName();
            // check file extension
            String mediaFileName = sourceExecutableFile.getName();
        	StringBuffer mediaFileNameBuffer = new StringBuffer(mediaFileName);
        	StringBuffer mediaFileExtension = new StringBuffer();
            for (int j = 3; j >= 0; j--) {
            	mediaFileExtension.append(mediaFileNameBuffer.charAt(mediaFileName.length()-j-1));
            }
            if(mediaFileExtension.toString().equals(".pps") || mediaFileExtension.toString().equals(".ppt")) {
	            if(learningUnitViewNewAndModifyElementDialogViewSpecificPane.getFinalizePPTFlag()) {
	        		// convert ppt in pps file
	        		final File sourceMediaFile = sourceExecutableFile;
	        		String sourceMediaFileExtension = ".pps";
	                final File destinationMediaFile = learningUnitViewElementsManager.createNewFileForElementsExternalData(selectedMediaType,
	                        sourceMediaFileExtension, id);
	                FLGUIUtilities.startLongLastingOperation();
	                FLGFileUtility.copyFile(sourceMediaFile, destinationMediaFile);
	                newElement.setExecutableFileName(destinationMediaFile.getName());
	                FLGUIUtilities.stopLongLastingOperation();
	        	} else {
	        		// convert pps in ppt file
	        		final File sourceMediaFile = sourceExecutableFile;
	        		String sourceMediaFileExtension = ".ppt";
	                final File destinationMediaFile = learningUnitViewElementsManager.createNewFileForElementsExternalData(selectedMediaType,
	                        sourceMediaFileExtension, id);
	                FLGUIUtilities.startLongLastingOperation();
	                FLGFileUtility.copyFile(sourceMediaFile, destinationMediaFile);
	                newElement.setExecutableFileName(destinationMediaFile.getName());
	                FLGUIUtilities.stopLongLastingOperation();
	        	} 
            } else {
                newElement.setDirectoryContentIncluded(includeDirectoryContentCheckBox.isSelected());
	            FLGUIUtilities.startLongLastingOperation();
	            if (newElement.getDirectoryContentIncluded()) {
	                File destinationDirectory = learningUnitViewElementsManager.createNewDirectoryForElementsExternalData("directory",
	                    "", id);
	                File parentDirectoryOfExecutableFile = sourceExecutableFile.getParentFile();
	                FLGFileUtility.copyDirectoryContent(parentDirectoryOfExecutableFile, destinationDirectory);
	                FLGUIUtilities.stopLongLastingOperation();
	                newElement.setExecutableFileName(destinationDirectory.getName() + "//" + sourceExecutableFileName);
	                newElement.setProgramParameters(destinationDirectory.getAbsolutePath());
	            } else {
	                File destinationDirectory = learningUnitViewElementsManager.getLearningUnitViewDataDirectory();
	                FLGFileUtility.copyFile(sourceExecutableFile,
	                    new File(destinationDirectory.getPath() + "//" + sourceExecutableFile.getName()));
	                newElement.setExecutableFileName(sourceExecutableFileName);
	                newElement.setProgramParameters(destinationDirectory.getAbsolutePath());
	            }
	            newElement.setProgramParameters(learningUnitViewNewAndModifyElementDialogViewSpecificPane.getParameters());
	            newElement.setAutoChangeWorkingDirectory(autoChangeWorkingDirectoryCheckBox.isSelected());
	            FLGUIUtilities.stopLongLastingOperation();
        	}
        }
        return newElement;
    }

    public FLGLearningByDoingElement getElement() {
        FLGLearningByDoingElement learningUnitViewElement =
            (FLGLearningByDoingElement)learningUnitViewElementsManager.getLearningUnitViewElement(activeLearningUnitViewElementId, false);
        return learningUnitViewElement;
    }

    class ViewSpecificPanel extends JPanel implements FSLLearningUnitViewNewAndModifyElementDialogViewSpecificPane {
        private JLabel fileSelectLabel;
        private JLabel parameterLabel;
        private JButton fileSelectButton;
        private JTextField fileSelectTextField;
        private JTextField parameterTextField;
        private JCheckBox finalizePPT_checkBox;
        private File executableFile;
        private File lastSelectedDir;
        private String executableFileExtension;

        public ViewSpecificPanel() {
            fileSelectLabel = new JLabel(internationalization.getString("label.filename.text"));
            fileSelectTextField = new JTextField("", 30);
            parameterLabel = new JLabel(internationalization.getString("label.parameter.text"));
            parameterTextField = new JTextField("", 30);
            fileSelectButton = new JButton(internationalization.getString("button.label.browse"));
            fileSelectButton.addActionListener(
                new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        showFileChooserDialog();
                    }
                });
            setLayout(new FLGColumnLayout(5, 5));
            add(fileSelectLabel, FLGColumnLayout.LEFT);
            add(fileSelectTextField, FLGColumnLayout.LEFT);
            add(fileSelectButton, FLGColumnLayout.LEFTEND);
//            add(parameterLabel, FLGColumnLayout.LEFT);
//            add(parameterTextField, FLGColumnLayout.LEFTEND);
            // add(setProgramPathButton, FLGColumnLayout.LEFTEND);
            finalizePPT_checkBox = new JCheckBox(internationalization.getString("label.finalizePPT_checkBox.text"));
            finalizePPT_checkBox.setEnabled(false);
            finalizePPT_checkBox.setSelected(false);
            add(new JLabel(" "), FLGColumnLayout.LEFT);
            add(finalizePPT_checkBox, FLGColumnLayout.LEFTEND);
            add(new JLabel(" "), FLGColumnLayout.LEFT);
            includeDirectoryContentCheckBox = new JCheckBox(internationalization.getString("label.includeDirectory.text"), false);
            add(includeDirectoryContentCheckBox, FLGColumnLayout.LEFTEND);
            autoChangeWorkingDirectoryCheckBox = new JCheckBox(internationalization.getString("label.autoChangeWorkingDirectory.text"), false);
            add(new JLabel(" "), FLGColumnLayout.LEFT);
            add(autoChangeWorkingDirectoryCheckBox, FLGColumnLayout.LEFTEND);
        }

        public boolean overwriteDefaultEntries() {
        	return false;
        }
        
        public void setEnabled(boolean enabled) {
            fileSelectTextField.setEnabled(enabled);
            fileSelectButton.setEnabled(enabled);
            parameterTextField.setEnabled(enabled);
            includeDirectoryContentCheckBox.setEnabled(enabled);
            autoChangeWorkingDirectoryCheckBox.setEnabled(enabled);
        }

        public String verifyInput(FSLLearningUnitViewElement editedLearningUnitViewElement,
            FSLLearningUnitViewElement referenceLearningUnitViewElement, boolean asFolder, int insertPosition) {
                if (!asFolder) {
                    File fileToVerify = new File(fileSelectTextField.getText());
                    if (fileToVerify.exists()) return null;
                    else
                        return internationalization.getString("label.filename.text") + ": " +
                            internationalization.getString("text.missingValue");
                }
                else
                    return null;
        }

        public void setInputFieldsDefaults(FSLLearningUnitViewElement learningUnitViewElement) {
            if (learningUnitViewElement != null) {
                if (!learningUnitViewElement.getFolder()) {
                	
                    FLGLearningByDoingElement learningByDoingElement = (FLGLearningByDoingElement)learningUnitViewElement;
                    String id = learningByDoingElement.getId();
                    fileSelectTextField.setText("" + learningUnitViewElementsManager.resolveRelativeFileName(learningByDoingElement.getExecutableFileName(),
                        learningUnitViewElement));
                    parameterTextField.setText(learningByDoingElement.getProgramParameters());
                    includeDirectoryContentCheckBox.setSelected(learningByDoingElement.getDirectoryContentIncluded());
                    if (learningByDoingElement.hasAutoChangeWorkingDirectory()) {
                        autoChangeWorkingDirectoryCheckBox.setSelected(learningByDoingElement.getAutoChangeWorkingDirectory());
                    }  
                    // check file extension and enable finalizePPT_checkBox
                    String mediaFileName = learningByDoingElement.getExecutableFileName();
                	StringBuffer mediaFileNameBuffer = new StringBuffer(mediaFileName);
                	StringBuffer mediaFileExtension = new StringBuffer();
                    for (int j = 3; j >= 0; j--) {
                    	mediaFileExtension.append(mediaFileNameBuffer.charAt(mediaFileName.length()-j-1));
                    }
                    if(mediaFileExtension.toString().equals(".pps")) {
                      	// activate finalize ppt checkbox
                    	finalizePPT_checkBox.setSelected(true);
                    	finalizePPT_checkBox.setEnabled(true);
                    } else if(mediaFileExtension.toString().equals(".ppt")) {	
                    	finalizePPT_checkBox.setSelected(false);
                    	finalizePPT_checkBox.setEnabled(true);
                    } else {
                    	finalizePPT_checkBox.setSelected(false);
                    	finalizePPT_checkBox.setEnabled(false);
                    }
                } else
                    setEnabled(false);
            } else {
                fileSelectTextField.setText("");
                parameterTextField.setText("");
            }
        }

        public String getExecutableFileExtension() {
            return "." + executableFileExtension;
        }

        public File getExecutableFile() {
            return new File(fileSelectTextField.getText());
        }

        public String getParameters() {
            return parameterTextField.getText();
        }
        
        public boolean getFinalizePPTFlag() {
        	return finalizePPT_checkBox.isSelected();
        }

        public void showFileChooserDialog() {
            FLGSelectableFileChooser fileChooser = new FLGSelectableFileChooser(internationalization.getString("label.fileType.text"), ".*");
            if (fileChooser.showDialog(lastSelectedDir)) {
                executableFile = fileChooser.getSelectedFile();
                lastSelectedDir = executableFile.getParentFile();
                if (executableFile.exists()) {
                    fileSelectTextField.setText(executableFile.getAbsolutePath());
                    executableFileExtension = fileChooser.getFileExtension();
                    // check file extension and enable finalizePPT_checkBox
                    String mediaFileName = executableFile.getName();
                	StringBuffer mediaFileNameBuffer = new StringBuffer(mediaFileName);
                	StringBuffer mediaFileExtension = new StringBuffer();
                    for (int j = 3; j >= 0; j--) {
                    	mediaFileExtension.append(mediaFileNameBuffer.charAt(mediaFileName.length()-j-1));
                    }
                    if(mediaFileExtension.toString().equals(".pps")) {
                      	// activate finalize ppt checkbox
                    	finalizePPT_checkBox.setSelected(true);
                    	finalizePPT_checkBox.setEnabled(true);
                    } else if(mediaFileExtension.toString().equals(".ppt")) {	
                    	finalizePPT_checkBox.setSelected(false);
                    	finalizePPT_checkBox.setEnabled(true);
                    } else {
                    	finalizePPT_checkBox.setSelected(false);
                    	finalizePPT_checkBox.setEnabled(false);
                    }
                }
            }
        }
    }
}
