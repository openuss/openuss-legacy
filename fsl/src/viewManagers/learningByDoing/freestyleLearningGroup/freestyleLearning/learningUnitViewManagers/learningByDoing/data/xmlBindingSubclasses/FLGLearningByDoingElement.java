/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.learningByDoing.data.xmlBindingSubclasses;

import java.util.Date;
import java.util.Vector;

import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElement;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElementLink;
import freestyleLearning.learningUnitViewAPI.FSLLearningUnitViewElementsManager;
import freestyleLearningGroup.freestyleLearning.learningUnitViewManagers.learningByDoing.data.xmlBinding.ViewElement;

public class FLGLearningByDoingElement extends ViewElement implements FSLLearningUnitViewElement {
    private boolean modified;
    
    public boolean isModified() {
        return modified;
    }

    public void setModified(boolean modified) {
        this.modified = modified;
    }

    public FSLLearningUnitViewElement deepCopy() {
        FLGLearningByDoingElement copy = new FLGLearningByDoingElement();
        FSLLearningUnitViewElementsManager.copyLearningUnitViewElement(this, copy);
        copy.setExecutableFileName(getExecutableFileName());
        return copy;
    }

    public String[] getLearningUnitViewElementExternalFilesRelativePaths(FSLLearningUnitViewElementsManager
        learningUnitViewElementsManager) {
            if (!getFolder()) {
                Vector paths = new Vector();
                String fileName;
                if (getDirectoryContentIncluded())
                    fileName = learningUnitViewElementsManager.resolveRelativeFileName(getExecutableFileName(),
                        this).getParentFile().getName();
                else
                    fileName = learningUnitViewElementsManager.resolveRelativeFileName(getExecutableFileName(), this).getName();
                paths.add(fileName);
                // übrigen Dateien aus Verzeichnissen anfügen
                return (String[]) paths.toArray(
                    new String[] { });
            }
            else
                return null;
    }

    public FSLLearningUnitViewElementLink getLearningUnitViewElementLink(String learningUnitViewElementLinkId) {
        for (int i = 0; i < getLearningUnitViewElementLinks().size(); i++) {
            FSLLearningUnitViewElementLink learningUnitViewElementLink =
                (FSLLearningUnitViewElementLink)getLearningUnitViewElementLinks().get(i);
            if (learningUnitViewElementLink.getId().equals(learningUnitViewElementLinkId))
                return learningUnitViewElementLink;
        }
        return null;
    }

    public FSLLearningUnitViewElementLink addNewLearningUnitViewElementLink() {
        FLGLearningByDoingElementLink learningUnitViewElementLink = new FLGLearningByDoingElementLink();
        learningUnitViewElementLink.emptyLearningUnitViewElementLinkTargets();
        return FSLLearningUnitViewElementsManager.addLearningUnitViewElementLink(learningUnitViewElementLink, this);
    }
}
