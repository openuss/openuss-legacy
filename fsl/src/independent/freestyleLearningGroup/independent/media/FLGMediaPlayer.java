/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.media;

import java.awt.*;
import java.io.*;
import java.net.*;
import java.util.*;

import javax.media.*;
import javax.media.bean.playerbean.*;
import javax.swing.*;

import freestyleLearningGroup.independent.gui.*;

/**
 * FLGMediaPlayer.
 * @author Freestyle Learning Group
 */
public class FLGMediaPlayer extends JPanel implements ControllerListener {
    public static final int DEFAULT_SIZE = 0;
    public static final int EXTEND_TO_SCREEN_SIZE = 1;
    private java.util.List mediaListeners = new ArrayList();
    private MediaPlayer player;
    private MediaLocator mediaLocator;
    private boolean isPlaying = false;
    private boolean isPausing = false;
    private boolean prefetchCompleted = false;
    private boolean playbackLoop = false;
    private boolean controlsVisible = false;
    private File currentMediaFile;
    private Time currentTime;
    private int actualPlayingTime = 0;
    private int maximumPlayingTime = 0;
    
    public FLGMediaPlayer() {
        setOpaque(false);
        setLayout(new GridLayout(1, 1));
        player = new MediaPlayer();
    }
    
    public FLGMediaPlayer(boolean playbackLoop) {
        this();
        this.playbackLoop = playbackLoop;
    }
    
    public FLGMediaPlayer(int layout, boolean playbackLoop) {
        this(layout);
        this.playbackLoop = playbackLoop;
    }
    
    public FLGMediaPlayer(int layout) {
        setOpaque(false);
        switch (layout) {
            case EXTEND_TO_SCREEN_SIZE: {
                setLayout(new GridLayout(1, 1));
            }
            default: {
                setLayout(new FLGSingleLayout(
                    FLGSingleLayout.CENTER, FLGSingleLayout.CENTER, FLGSingleLayout.SHRINK_AS_NEEDED,
                    FLGSingleLayout.SHRINK_AS_NEEDED, true));
            }
        }
        player = new MediaPlayer();
    }
    
    public int getDurationInSeconds() {
    	return (int)player.getDuration().getSeconds();
    }
    
    public boolean getPlaybackLoop() {
        return player.getPlaybackLoop();
    }
    
    public void setPlaybackLoop(boolean playbackLoop) {
    	this.playbackLoop = playbackLoop;
        player.setPlaybackLoop(playbackLoop);
    }
    
    public void setControlPanelVisible(boolean visible) {
        controlsVisible = visible;
        player.setControlPanelVisible(controlsVisible);
    }
    
    public void setScaleToFit(boolean scaleToFit) {
        removeAll();
        if (scaleToFit) {
            setLayout(new GridLayout(1, 1));
        }
        else {
            setLayout(new FLGSingleLayout(
                FLGSingleLayout.CENTER, FLGSingleLayout.CENTER, FLGSingleLayout.SHRINK_AS_NEEDED,
                FLGSingleLayout.SHRINK_AS_NEEDED, true));
        }
        add(player);
    }
    
    public void loadMedia(File mediaFile) throws FLGMediaException {
        currentMediaFile = mediaFile;
        URL mediaFileURL = null;
        try {
            mediaFileURL = mediaFile.toURL();
        } catch (Exception e) {
        	System.out.println("Error while setting mediaFileURL in FLGMediaPlayer, loadMedia().");
            throw new FLGMediaException();
        }
        if (mediaFileURL != null) {
            currentTime = null;
            prefetchCompleted = false;
            if ((mediaLocator = new MediaLocator(mediaFileURL)) == null) {
            	System.out.println("mediaLocator in FLGMediaPlayer, loadMedia() is null.");
                throw new FLGMediaException();
            }
            try {
                player.setMediaLocator(mediaLocator);
                player.setPlaybackLoop(playbackLoop);
                player.addControllerListener(this);
                player.realize();
                
            } catch (Exception e) {
            	System.out.println("Error while setting mediaLocator in FLGMediaPlayer, loadMedia().");
                throw new FLGMediaException();
            }
            player.setControlPanelVisible(controlsVisible);
            removeAll();
            add(player);
            if (mediaFile.exists()) {
                int tries = 0;
                while (!prefetchCompleted && tries < 50) {
                    try {
                        tries++;
                        Thread.sleep(100);
                    }
                    catch (Exception e) {
                        System.out.println(e);
                    }
                }
                if (tries >= 50) {
                	System.out.println("Error while tries in FLGMediaPlayer, loadMedia().");
                    throw new FLGMediaException();
                }
            }
        }
    }
    
    public void setVolume(int volumeStep) {        
        player.setVolumeLevel("" + volumeStep);
    }
   
    public String getVolume() {        
        return player.getVolumeLevel();    
    }
    
    public void addMediaListener(FLGMediaListener mediaListener) {
        mediaListeners.add(mediaListener);
    }
    
    public void removeMediaListener(FLGMediaListener mediaListener) {
        mediaListeners.remove(mediaListener);
    }
    
    public void setMediaTime(Time t) {
        player.setMediaTime(t);
    }
    
    public void setMediaTime(double seconds) {
        Time newTime = new Time(seconds);
        player.setMediaTime(newTime);
    }
    
    public int getMaximumPlayingTime() {
        return maximumPlayingTime;
    }
    
    public double getActualPlayingTime() {
        return player.getMediaTime().getSeconds();
    }
    
    public void start() {
        isPlaying = true;
        maximumPlayingTime = (int)player.getDuration().getSeconds();
        if (currentTime != null) player.setMediaTime(currentTime);
        player.start();
        currentTime = null;
    }
    
    
    public void waitForEnd(boolean waitForEnd) {
    	if(waitForEnd) {
	    	while (isPlaying || isPausing) {
	            try {
	                Thread.sleep(50);
	            }
	            catch (Exception e) { }
	        }
        }
    }
    
    public void pause() {
        isPausing = true;
        isPlaying = false;
        if (player != null) {
            currentTime = player.getMediaTime();
            player.stop();
        }
    }
    
    public void stop() {
        isPlaying = false;
        isPausing = false;
        currentTime = null;
        if (player != null) {
            player.stop();
            player.setMediaTime(new Time(0));
            //player.realize();
        }
    }
    
    public boolean isPlaying() {
        return isPlaying;
    }
    
    public boolean isPausing() {
        return isPausing;
    }
    
    private void killThePlayer() {
        if (player != null) {
            if (isPlaying) player.stop();
            player.deallocate();
            player.close();
        }
    }
    
    public void controllerUpdate(ControllerEvent ce) {
        try {
            if (ce instanceof RealizeCompleteEvent) {
                player.prefetch();
            } else if (ce instanceof PrefetchCompleteEvent) {
                if (player.getTargetState() != Controller.Started) {
                    prefetchCompleted = true;
                }
            } else if (ce instanceof EndOfMediaEvent) {
                for (int i = 0; i < mediaListeners.size(); i++) {
                    ((FLGMediaListener)mediaListeners.get(i)).endOfMediaReached();
                }
                if(!player.getPlaybackLoop()) { 
                	stop(); 
                }
            }
        }
        catch (Exception e) {
            System.out.println(e);
        }
    }
    
    public static void main(String[] args) {
        JFrame f = new JFrame("MediaTest");
        f.setSize(400,400);
        f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        f.getContentPane().setLayout(new BorderLayout());
        f.getContentPane().setBackground(Color.YELLOW);
        
        FLGMediaPlayer player = new FLGMediaPlayer();
        player.setControlPanelVisible(true);
        player.setScaleToFit(false);
        try {
            player.loadMedia(new File("C://author_video2.mpg"));
        }
        catch(Exception e) {
            FLGOptionPane.showMessageDialog("Error reading media file" + "\n\n" + e, "Error", FLGOptionPane.ERROR_MESSAGE);
        }
        f.getContentPane().add(player, BorderLayout.CENTER);
        f.setVisible(true);
    }
}
