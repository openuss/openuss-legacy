/* Generated by FreestyleLearninngGroup */

package freestyleLearningGroup.independent.util;

import java.util.Random;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.PBEParameterSpec;

import sun.misc.BASE64Encoder;

public class FLGCryptoUtilities {
    public final static int ITERATIONS = 100;

    public static String encrypt(char[] password, String plaintext) throws Exception {
        // Begin by creating a random salt of 64 bits (8 bytes)
        byte[] salt = new byte[8];
        Random random = new Random();
        random.nextBytes(salt);
        // Create the PBEKeySpec with the given password
        PBEKeySpec keySpec = new PBEKeySpec(password);
        // Get a SecretKeyFactory for PBEWithSHAAndTwofish
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBEWithSHAAndTwofish-CBC");
        // Create our key
        SecretKey key = keyFactory.generateSecret(keySpec);
        // Now create a parameter spec for our salt and iterations
        PBEParameterSpec paramSpec = new PBEParameterSpec(salt, ITERATIONS);
        // Create a cipher and initialize it for encrypting
        Cipher cipher = Cipher.getInstance("PBEWithSHAAndTwofish-CBC");
        cipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);
        byte[] ciphertext = cipher.doFinal(plaintext.getBytes());
        BASE64Encoder encoder = new BASE64Encoder();
        String saltString = encoder.encode(salt);
        String ciphertextString = encoder.encode(ciphertext);
        return saltString + ciphertextString;
    }
}
