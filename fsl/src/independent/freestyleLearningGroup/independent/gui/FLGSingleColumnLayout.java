/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.gui;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.LayoutManager2;

public class FLGSingleColumnLayout implements LayoutManager2 {
    protected int spacing;
    protected int minHeight = 0;

    public FLGSingleColumnLayout(int spacing) {
        this(spacing, 0);
    }

    public FLGSingleColumnLayout(int spacing, int minHeight) {
        this.spacing = spacing;
        this.minHeight = minHeight;
    }

    public void layoutContainer(Container target) {
        Insets insets = target.getInsets();
        Dimension target_size = target.getSize();
        Component kid;
        int nkids = target.getComponentCount();
        int maxWidth = target.getSize().width - insets.left - insets.right;
        int x = insets.left;
        int y = insets.top;
        for (int i = 0; i < nkids; i++) {
            kid = target.getComponent(i);
            if (!kid.isVisible()) continue;
            int height = kid.getPreferredSize().height;
            if (minHeight > height) height = minHeight;
            kid.setBounds(x, y, maxWidth, height);
            y += height + spacing;
        }
    }

    public Dimension preferredLayoutSize(Container target) {
        Dimension d = layoutSize(target, 1);
        return d;
    }

    public Dimension minimumLayoutSize(Container target) {
        Dimension d = layoutSize(target, 2);
        return d;
    }

    public Dimension maximumLayoutSize(Container target) {
        Dimension d = layoutSize(target, 3);
        return d;
    }

    private Dimension layoutSize(Container target, int sizetype) {
        int nkids = target.getComponentCount();
        Dimension size = new Dimension(0, 0);
        Insets insets = target.getInsets();
        int num_visible_kids = 0;
        for (int i = 0; i < nkids; i++) {
            Component kid = target.getComponent(i);
            Dimension d;
            if (!kid.isVisible()) continue;
            num_visible_kids++;
            if (sizetype == 1) d = kid.getPreferredSize();
            else if (sizetype == 2) d = kid.getMinimumSize();
            else
                d = kid.getMaximumSize();
            if (d.height < minHeight) d.height = minHeight;
            size.height += d.height;
        }
        int maxWidth = target.getSize().width - insets.left - insets.right;
        size.width = maxWidth;
        size.height += insets.top + insets.bottom;
        if (num_visible_kids > 1) size.height += (num_visible_kids - 1) * spacing;
        return size;
    }

    public void addLayoutComponent(String constraint, Component comp) { }

    public void addLayoutComponent(Component comp, Object constraint) { }

    public void removeLayoutComponent(Component comp) { }

    public void invalidateLayout(Container target) { }

    public float getLayoutAlignmentX(Container target) { return 0.5f; }

    public float getLayoutAlignmentY(Container target) { return 0.5f; }
}
