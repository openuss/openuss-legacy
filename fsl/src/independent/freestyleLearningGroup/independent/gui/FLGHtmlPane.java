/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.gui;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.*;
import javax.swing.event.*;
import javax.swing.text.*;
import javax.swing.text.html.*;
import javax.swing.undo.*;

import freestyleLearningGroup.independent.util.*;

public class FLGHtmlPane extends JTextPane implements HyperlinkListener {
    private boolean modifiedByUserInput;
    // for identifying any change of the document by direct user input
    private FLGHtmlPaneDocumentListener documentListener;
    private FLGHtmlPaneUndoableEditListener undoableEditListener;
    private File previousFile;
    private JPopupMenu popupMenu;
    private JMenuItem popupItem_google;
    private JMenuItem popupItem_wikipedia;
    private FLGUndoManager undoManager;
    private boolean wasEnabled; // for the hyperlink listener
    private Vector inputTagTextComponents;
    private String id; // can be used to distinguish several htmlPanes
    private boolean suppressHyperlinks;
    private boolean supportWebSearches;
    private String searchUrlPredix_google;
    private String searchUrlPredix_wikipedia;
    private FLGInternationalization internationalization;
    private String googleText_prefix;
    private String googleText_suffix;
    private String wikpediaText_prefix;
    private String wikpediaText_suffix;
    
    public FLGHtmlPane() {
        internationalization = new FLGInternationalization("freestyleLearningGroup.independent.gui.internationalization",
            getClass().getClassLoader());
        setContentType("text/html");
        inputTagTextComponents = new Vector();
        setEditorKit(new FLGHtmlPaneEditorKit());
        ((HTMLDocument)getDocument()).setPreservesUnknownTags(false);
        setDefaultStyleSheet();
        documentListener = new FLGHtmlPaneDocumentListener();
        undoableEditListener = new FLGHtmlPaneUndoableEditListener();
        undoManager = new FLGUndoManager();
        addHyperlinkListener(this);
        // WORKAROUND: INPUT-TAG-Components have problems with loosing the focus
        final JComponent c = this;
        
        // Init WebSearches state
        supportWebSearches = false;    
        String hostLanguage = java.util.Locale.getDefault().getLanguage();
        searchUrlPredix_google = "http://www.google.de/search?hl=" + hostLanguage + "&q=";
        searchUrlPredix_wikipedia = "http://" + hostLanguage + ".wikipedia.org/wiki/";
        googleText_prefix = internationalization.getString("google.searchPrefix.text");
        googleText_suffix = internationalization.getString("google.searchSuffix.text");
        wikpediaText_prefix = internationalization.getString("wikipedia.searchPrefix.text");
        wikpediaText_suffix = internationalization.getString("wikipedia.searchSuffix.text");       
        
        // prepare popup menu
        popupMenu = new JPopupMenu();
        popupItem_google = new JMenuItem();
        popupItem_google.setIcon(new ImageIcon(getClass().getClassLoader().getResource(
            "freestyleLearningGroup/independent/gui/images/icon_google.gif")));
        popupItem_google.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String searchString = FLGUtilities.replaceInString(getSelectedText(), " ", "+", true);
                FLGPlatformSpecifics.startExternalApplication(searchUrlPredix_google + searchString);
            }
        });
        popupMenu.add(popupItem_google);
        popupItem_wikipedia = new JMenuItem();
        popupItem_wikipedia.setIcon(new ImageIcon(getClass().getClassLoader().getResource(
            "freestyleLearningGroup/independent/gui/images/icon_wikipedia.jpg")));
        popupItem_wikipedia.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String searchString = FLGUtilities.replaceInString(getSelectedText(), " ", "_", true);
                FLGPlatformSpecifics.startExternalApplication(searchUrlPredix_wikipedia + searchString);
            }
        });
        popupMenu.add(popupItem_wikipedia);         
        addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent e) {
                if (supportWebSearches && e.isPopupTrigger()) {
                    if (FLGHtmlPane.this.getSelectedText() != null) {
                        updatePopupMenu();
                        popupMenu.show((JComponent)e.getSource(), e.getX(), e.getY());
                    }
                }
            }
            public void mouseClicked(MouseEvent e) {
                setRequestFocusEnabled(true);
                requestFocus();
            }
        });
    }
    
    public static void main(String[] args) {
        JFrame f = new JFrame("Test");
        f.setSize(800,600);
        f.setLocation(200,200);
        f.getContentPane().setLayout(new BorderLayout());
        
        final FLGHtmlPane p = new FLGHtmlPane();
        final JTextPane pane = new JTextPane();
//        pane.setText("<html><body>Hallo <b>Test</b> für Mausklicks");
        pane.setEditable(false);
        pane.setEnabled(true);
        pane.setContentType("text/html");
        
        try {
            URL url = new File("C:\\test.html").toURL();
            System.out.println("showing " + url);
            pane.setPage("" + url);
        }
        catch(Exception e) {};
        
        JButton reloadButton = new JButton("Reload");
        reloadButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    URL url = new File("C:\\test.html").toURL();
                    System.out.println("showing " + url);
                    pane.setPage("" + url);
                }
                catch(Exception ex) {};
            }
        });
        f.getContentPane().add(new JScrollPane(pane), BorderLayout.CENTER);
        f.getContentPane().add(reloadButton, BorderLayout.SOUTH);
        
        f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        f.setVisible(true);
    }
    
    public void setPage_superVersion(String urlString) {
        try {
            super.setPage(urlString);
        }
        catch(Exception e) {
            setPage(urlString);
        }
    }
    
    public void setPage(String urlString) {
        try {
            URL contentUrl = new URL(urlString);
            InputStream is = contentUrl.openStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String line = "";
            StringBuffer sb = new StringBuffer();
            while ((line = br.readLine()) != null) {
                sb.append(line);
            }
            setText(new String(sb));
        }
        catch(Exception e) {
            System.out.println(e);
        }
    }
    
    
    protected void updatePopupMenu() { 
        popupItem_google.setText(googleText_prefix + FLGHtmlPane.this.getSelectedText() + googleText_suffix);
        popupItem_wikipedia.setText(wikpediaText_prefix + FLGHtmlPane.this.getSelectedText() + wikpediaText_suffix);
    }
    
    public void setSupportWebSearches(boolean supported) {
        supportWebSearches = supported;
    }
    
    public void setId(String id) {
        this.id = id;
    }
    
    public String getId() {
        return id;
    }
    
    public boolean isModifiedByUserInput() {
        return modifiedByUserInput;
    }
    
    public void setModifiedByUserInput(boolean modifiedByUserInput) {
        this.modifiedByUserInput = modifiedByUserInput;
    }
    
    public FLGUndoManager getUndoManager() {
        return undoManager;
    }
    
    public Dimension getPreferredSize() {
        Dimension preferredSize = super.getPreferredSize();
        Container ancestor = getParent();
        while (!((ancestor instanceof Window) || (ancestor instanceof JViewport)))
            ancestor = ancestor.getParent();
        if (ancestor instanceof JViewport) {
            int ancestorWidth = ancestor.getWidth();
            if (ancestorWidth < preferredSize.width) {
                preferredSize.width = Math.max(ancestorWidth, getMinimumSize().width);
            }
        }
        return preferredSize;
    }
    
    public void loadFile(File file, boolean reloadIfAlreadyLoaded) {
        if (file != null && ((previousFile == null || !file.equals(previousFile)) || reloadIfAlreadyLoaded)) {
            try {
                ((HTMLDocument)getDocument()).setBase(file.toURL());
                StringBuffer buffer = new StringBuffer();
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String string = "";
                while (string != null) {
                    string = reader.readLine();
                    buffer.append(string);
                }
                setText(buffer.toString());
                previousFile = file;
            }
            catch (Exception e) { }
        }
    }
    
    public void setText(String htmlText) {
        cleanDocument();
        getDocument().removeDocumentListener(documentListener);
        getDocument().removeUndoableEditListener(undoableEditListener);
        undoManager.discardAllEdits();
        super.setText(suppressHyperlinks
        ? removeHyperlinks(htmlText)
        : htmlText);
        getDocument().addDocumentListener(documentListener);
        getDocument().addUndoableEditListener(undoableEditListener);
        setCaretPosition(1);
        repaint();
        modifiedByUserInput = false;
        previousFile = null;
    }
    
    public void addStyleSheetRules(String[] rules) {
        StyleSheet styleSheet = ((HTMLDocument)getDocument()).getStyleSheet();
        for (int i = 0; i < rules.length; i++) styleSheet.addRule(rules[i]);
    }
    
    public FLGHtmlPaneInputTagTextComponent[] getInputTagTextComponents() {
        return (FLGHtmlPaneInputTagTextComponent[]) inputTagTextComponents.toArray(
        new FLGHtmlPaneInputTagTextComponent[] { });
    }
    
    public void hyperlinkUpdate(HyperlinkEvent e) {
        if (e.getEventType() == HyperlinkEvent.EventType.ENTERED) {
            wasEnabled = isEnabled();
            setEnabled(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        }
        if (e.getEventType() == HyperlinkEvent.EventType.EXITED) {
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            setEnabled(wasEnabled);
        }
    }
    
    public void setBase(File base) {
        HTMLDocument doc = (HTMLDocument)getDocument();
        try {
            doc.setBase(base.toURL());
        }
        catch (Exception e) { System.out.println(e); }
    }
    
    public void setBase(URL base) {
        HTMLDocument doc = (HTMLDocument)getDocument();
        try {
            doc.setBase(base);
        }
        catch (Exception e) { System.out.println(e); }
    }
    
    public URL getBase() {
        HTMLDocument doc = (HTMLDocument)getDocument();
        return doc.getBase();
    }
    
    void addInputTagTextComponent(FLGHtmlPaneInputTagTextComponent inputTagTextComponent) {
        inputTagTextComponents.add(inputTagTextComponent);
    }
    
    private void cleanDocument() {
        inputTagTextComponents = new Vector();
        URL base = ((HTMLDocument)getDocument()).getBase();
        StyleSheet styleSheet = ((HTMLDocument)getDocument()).getStyleSheet();
        HTMLDocument newDocument = new HTMLDocument();
        newDocument.getStyleSheet().addStyleSheet(styleSheet);
        newDocument.setBase(base);
//        setDocument(newDocument);
    }
    
//    public void setDocument(Document doc) {
//        Document old = model;
//        
//        /*
//         * aquire a read lock on the old model to prevent notification of
//         * mutations while we disconnecting the old model.
//         */
//        try {
//            if (old instanceof AbstractDocument) {
//                ((AbstractDocument)old).readLock();
//            }
//            if (accessibleContext != null) {
//                model.removeDocumentListener(
//                ((AccessibleJTextComponent)accessibleContext));
//            }
//            if (inputMethodRequestsHandler != null) {
//                model.removeDocumentListener((DocumentListener)inputMethodRequestsHandler);
//            }
//            model = doc;
//            
//            // Set the document's run direction property to match the
//            // component's ComponentOrientation property.
//            Boolean runDir = getComponentOrientation().isLeftToRight()
//            ? TextAttribute.RUN_DIRECTION_LTR
//            : TextAttribute.RUN_DIRECTION_RTL;
//            doc.putProperty( TextAttribute.RUN_DIRECTION, runDir );
//            
//            firePropertyChange("document", old, doc);
//        } finally {
//            if (old instanceof AbstractDocument) {
//                ((AbstractDocument)old).readUnlock();
//            }
//        }
//        
//        revalidate();
//        repaint();
//        if (accessibleContext != null) {
//            model.addDocumentListener(
//            ((AccessibleJTextComponent)accessibleContext));
//        }
//        if (inputMethodRequestsHandler != null) {
//            model.addDocumentListener((DocumentListener)inputMethodRequestsHandler);
//        }
//    }
    
    
    public void setDefaultStyleSheet() {
        StyleSheet styleSheet = ((HTMLDocument)getDocument()).getStyleSheet();
        URL styleSheetURL = getClass().getResource("defaultStyleSheet.css");
        if (styleSheetURL != null) {
            styleSheet.importStyleSheet(styleSheetURL);
        }
    }
    
    public void setStyleSheet(URL styleSheetURL) {
        StyleSheet styleSheet = ((HTMLDocument)getDocument()).getStyleSheet();
        if (styleSheetURL != null) {
            styleSheet.importStyleSheet(styleSheetURL);
        }
        else System.out.println("FLGHtmlPane.setStyleSheet(): invalid URL!");
    }
    
    public class FLGHtmlPaneInputTagTextComponent extends JTextField {
        String id;
        
        public FLGHtmlPaneInputTagTextComponent(String id) {
            this.id = id;
            addInputTagTextComponent(this);
            // WORKAROUND: INPUT-TAG-Components have problems with loosing the focus
            addMouseListener(
            new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    setRequestFocusEnabled(true);
                    requestFocus();
                    setRequestFocusEnabled(false);
                }
            });
        }
        
        public String getId() {
            return id;
        }
        
        public void updateUI() {
            super.updateUI();
            Font font = (Font)UIManager.get("FLGHtmlPaneInputTagTextComponent.Font");
            if (font != null) {
                setFont(font);
                FontMetrics fontMetrics = getFontMetrics(font);
                setAlignmentY((float)(fontMetrics.getAscent()) / (fontMetrics.getHeight() + fontMetrics.getLeading()));
            }
        }
    }
    
    
    class ComplexEditMarker extends AbstractUndoableEdit {
    }
    
    
    public class FLGUndoManager extends UndoManager {
        public void startComplexEdit() {
            addEdit(new ComplexEditMarker());
        }
        
        public void endComplexEdit() {
            addEdit(new ComplexEditMarker());
        }
        
        public void undo() {
            if (editToBeUndone() instanceof ComplexEditMarker) {
                super.undo(); // remove the marker
                while (!(editToBeUndone() instanceof ComplexEditMarker)) super.undo();
                super.undo(); // remove the marker
            }
            else {
                super.undo();
            }
        }
        
        public void redo() {
            if (editToBeRedone() instanceof ComplexEditMarker) {
                super.redo(); // remove the marker
                while (!(editToBeRedone() instanceof ComplexEditMarker)) super.redo();
                super.redo(); // remove the marker
            }
            else {
                super.redo();
            }
        }
    }
    
    
    class FLGHtmlPaneUndoableEditListener implements UndoableEditListener {
        public void undoableEditHappened(UndoableEditEvent e) {
            undoManager.addEdit(e.getEdit());
        }
    }
    
    
    class FLGHtmlPaneDocumentListener implements DocumentListener {
        public void insertUpdate(DocumentEvent e) {
            modifiedByUserInput = true;
        }
        
        public void removeUpdate(DocumentEvent e) {
            modifiedByUserInput = true;
        }
        
        public void changedUpdate(DocumentEvent e) {
            // changing the style sheet results in an event, but this should not mean that the element is modified
            // In this case the toString() method results in "[]"
            if (e.toString().length() > 2) modifiedByUserInput = true;
        }
    }
    
    
    class FLGHtmlPaneEditorKit extends HTMLEditorKit {
        FLGHtmlPaneHtmlFactory htmlFactory;
        
        public FLGHtmlPaneEditorKit() {
            htmlFactory = new FLGHtmlPaneHtmlFactory();
        }
        
        public ViewFactory getViewFactory() {
            return htmlFactory;
        }
    }
    
    
    class FLGHtmlPaneHtmlFactory extends HTMLEditorKit.HTMLFactory {
        public View create(Element elem) {
            Object o = elem.getAttributes().getAttribute(StyleConstants.NameAttribute);
            if (o instanceof HTML.Tag) {
                HTML.Tag kind = (HTML.Tag) o;
                if (kind == HTML.Tag.INPUT) {
                    return new FLGHtmlPaneFormView(elem);
                }
            }
            return super.create(elem);
        }
    }
    
    
    class FLGHtmlPaneFormView extends FormView {
        private boolean isInputText = false;
        
        public FLGHtmlPaneFormView(Element elem) {
            super(elem);
        }
        
        protected Component createComponent() {
            isInputText = false;
            AttributeSet attr = getElement().getAttributes();
            HTML.Tag t = (HTML.Tag) attr.getAttribute(StyleConstants.NameAttribute);
            Object model = attr.getAttribute(StyleConstants.ModelAttribute);
            if (t == HTML.Tag.INPUT) {
                String type = (String)attr.getAttribute(HTML.Attribute.TYPE);
                String id = (String)attr.getAttribute(HTML.Attribute.ID);
                if (type.equals("text")) {
                    isInputText = true;
                    int size = HTML.getIntegerAttributeValue(attr, HTML.Attribute.SIZE, -1);
                    FLGHtmlPaneInputTagTextComponent field;
                    field = new FLGHtmlPaneInputTagTextComponent(id);
                    if (size > 0) {
                        field.setColumns(size);
                    }
                    else {
                        field.setColumns(20);
                    }
                    if (model != null) {
                        field.setDocument((Document)model);
                    }
                    String value = (String)attr.getAttribute(HTML.Attribute.VALUE);
                    if (value != null) {
                        field.setText(value);
                    }
                    return field;
                }
            }
            return super.createComponent();
        }
        
        // adjust the width and height of the JTextField
        public float getMaximumSpan(int axis) {
            if (!isInputText) return super.getMaximumSpan(axis);
            else {
                switch (axis) {
                    case View.X_AXIS:
                        super.getMaximumSpan(axis);
                        return getPreferredSpan(axis);
                    case View.Y_AXIS:
                        super.getMaximumSpan(axis);
                        return getPreferredSpan(axis);
                }
                return super.getMaximumSpan(axis);
            }
        }
    }
    /**
     * @return Returns the suppressHyperlinks.
     */
    public boolean isSuppressHyperlinks() {
        return suppressHyperlinks;
    }
    
    /**
     * @param suppressHyperlinks The suppressHyperlinks to set.
     */
    public void setSuppressHyperlinks(boolean suppressHyperlinks) {
        this.suppressHyperlinks = suppressHyperlinks;
        setText(getText());
    }
    
    private String removeHyperlinks(String text) {
        Pattern pattern = Pattern.compile("<a[^>]*>|</a>");
        return pattern.matcher(text).replaceAll("");
    }
}