/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.gui;

import java.awt.Color;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.awt.image.ColorModel;
import java.awt.image.FilteredImageSource;
import java.awt.image.ImageConsumer;
import java.awt.image.ImageProducer;
import java.awt.image.RGBImageFilter;
import java.net.URL;

import javax.swing.JPanel;

public class FLGImageUtility {
    private static FLGGrayFilter GRAY_FILTER = new FLGGrayFilter();

    public static Image loadImageAndWait(URL imageURL) {
        Image image = Toolkit.getDefaultToolkit().getImage(imageURL);
        return waitUntilImageIsLoaded(image);
    }

    public static Image createAntiAliasedImage(Image originalImage, int targetWidth, int targetHeight) {
        Image resultImage = originalImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH);
        waitUntilImageIsLoaded(resultImage);
        return resultImage;
    }

    public static Image createGrayImage(Image image) {
        ImageProducer producer = new FilteredImageSource(image.getSource(), GRAY_FILTER);
        return createImageAndWait(producer);
    }

    public static Image createColorImage(Image image, Color targetColor) {
        ImageProducer producer = new FilteredImageSource(image.getSource(), new FLGColorFilter(targetColor));
        return createImageAndWait(producer);
    }

    public static Image createImageWithDifferentBrightness(Image image, double brightnessFactor) {
        FLGBrightnessFilter filter = new FLGBrightnessFilter(brightnessFactor);
        ImageProducer producer = new FilteredImageSource(image.getSource(), filter);
        return createImageAndWait(producer);
    }

    public static Image createImageAndWait(ImageProducer producer) {
        Image producedImage = Toolkit.getDefaultToolkit().createImage(producer);
        waitUntilImageIsLoaded(producedImage);
        FLGImageConsumer consumer = new FLGImageConsumer(producer);
        // producer.addConsumer(consumer);
        producer.startProduction(consumer);
        int timeOutCounter = 200;
        while (!(consumer.isFinished() || (timeOutCounter-- == 0))) {
            try {
                Thread.sleep(2);
            }
            catch (Exception e) { }
        }
        return producedImage;
    }

    private static Image waitUntilImageIsLoaded(Image image) {
        MediaTracker mt = new MediaTracker(new JPanel());
        mt.addImage(image, 0);
        try {
            mt.waitForID(0);
        }
        catch (Exception e) { }
        return image;
    }

    static class FLGGrayFilter extends RGBImageFilter {
        public int filterRGB(int x, int y, int rgb) {
            int alpha = (rgb >> 24) & 0xff;
            int red = (int)(((rgb >> 16) & 0xff));
            int green = (int)(((rgb >> 8) & 0xff));
            int blue = (int)((rgb & 0xff));
            int gray = (red + green + blue) / 3;
            red = gray;
            green = gray;
            blue = gray;
            red = Math.min((int)(red * 1.5), 255);
            green = Math.min((int)(green * 1.5), 255);
            blue = Math.min((int)(blue * 1.5), 255);
            return ((alpha & 0xFF) << 24) | ((red & 0xFF) << 16) | ((green & 0xFF) << 8) | ((blue & 0xFF) << 0);
        }
    }


    static class FLGColorFilter extends RGBImageFilter {
        Color targetColor;

        public FLGColorFilter(Color targetColor) {
            this.targetColor = targetColor;
        }

        public int filterRGB(int x, int y, int rgb) {
            if (targetColor != null) {
                int alpha = (rgb >> 24) & 0xff;
                int red = Math.min(targetColor.getRed(), 255);
                int green = Math.min(targetColor.getGreen(), 255);
                int blue = Math.min(targetColor.getBlue(), 255);
                return ((alpha & 0xFF) << 24) | ((red & 0xFF) << 16) | ((green & 0xFF) << 8) | ((blue & 0xFF) << 0);
            }
            else
                return rgb;
        }
    }


    static class FLGBrightnessFilter extends RGBImageFilter {
        double factor;

        public FLGBrightnessFilter(double factor) {
            this.factor = factor;
        }

        public int filterRGB(int x, int y, int rgb) {
            int alpha = (rgb >> 24) & 0xff;
            int red = (int)(((rgb >> 16) & 0xff));
            int green = (int)(((rgb >> 8) & 0xff));
            int blue = (int)((rgb & 0xff));
            red = Math.min((int)(red * factor), 255);
            green = Math.min((int)(green * factor), 255);
            blue = Math.min((int)(blue * factor), 255);
            return ((alpha & 0xFF) << 24) | ((red & 0xFF) << 16) | ((green & 0xFF) << 8) | ((blue & 0xFF) << 0);
        }
    }


    static class FLGImageConsumer implements ImageConsumer {
        private boolean finished = false;
        private ImageProducer producer;

        public FLGImageConsumer(ImageProducer producer) {
            this.producer = producer;
        }

        public boolean isFinished() {
            return finished;
        }

        public void setColorModel(ColorModel model) { }

        public void setHints(int hintflags) { }

        public void setProperties(java.util.Hashtable props) { }

        public void imageComplete(int status) {
            if (status == ImageConsumer.STATICIMAGEDONE) {
                producer.removeConsumer(this);
            }
            else {
                System.out.println("Error: " + status);
            }
            finished = true;
        }

        public void setDimensions(int width, int height) { }

        public void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize) {
        }

        public void setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize) {
        }
    }
}
