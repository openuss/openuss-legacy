/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.gui;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.LayoutManager;

public class FLGEqualDistanceColumnLayout implements LayoutManager {
    public static final int TOP = 0;
    public static final int BOTTOM = 1;
    public static final int CENTER = 2;
    public static final int LEFT = 0;
    public static final int RIGHT = 1;
    private int verticalAlignment = CENTER;
    private int horizontalAlignment = CENTER; // in the case of only one component
    private boolean centered = false;

    public FLGEqualDistanceColumnLayout() {
    }

    public FLGEqualDistanceColumnLayout(boolean centered) {
        this.centered = true;
    }

    public FLGEqualDistanceColumnLayout(int verticalAlignment) {
        this.verticalAlignment = verticalAlignment;
    }

    public FLGEqualDistanceColumnLayout(int verticalAlignment, int horizontalAlignment) {
        this.verticalAlignment = verticalAlignment;
        this.horizontalAlignment = horizontalAlignment;
    }

    public void layoutContainer(Container target) {
        Insets insets = target.getInsets();
        Dimension target_size = target.getSize();
        Component child;
        int nChildren = target.getComponentCount();
        int visibleHeight = target_size.height - insets.top - insets.bottom;
        int totalPrefWidth = 0;
        int numVisibleChildren = 0;
        for (int i = 0; i < nChildren; i++) {
            child = target.getComponent(i);
            if (!child.isVisible()) continue;
            numVisibleChildren++;
            Dimension pref = child.getPreferredSize();
            totalPrefWidth += pref.width;
        }
        int availEmptySpace = target_size.width - insets.left - insets.right - totalPrefWidth;
        if (availEmptySpace < 0) availEmptySpace = 0;
        int distance = 0;
        if (numVisibleChildren > 1)
            if (centered) distance = availEmptySpace / (numVisibleChildren + 1);
            else
                distance = availEmptySpace / (numVisibleChildren - 1);
        int x = insets.left;
        int y = insets.top;
        if (centered) x = x + distance;
        if (numVisibleChildren == 1) {
            if (horizontalAlignment == CENTER) x += availEmptySpace / 2;
            if (horizontalAlignment == RIGHT) x += availEmptySpace;
        }
        for (int i = 0; i < nChildren; i++) {
            child = target.getComponent(i);
            if (!child.isVisible()) continue;
            Dimension pref = child.getPreferredSize();
            if (verticalAlignment == TOP) child.setBounds(x, y, pref.width, pref.height);
            if (verticalAlignment == BOTTOM)
                child.setBounds(x, y + (int)Math.max(visibleHeight - pref.height, 0), pref.width, pref.height);
            if (verticalAlignment == CENTER)
                child.setBounds(x, y + (int)Math.max((visibleHeight - pref.height) / 2, 0), pref.width, pref.height);
            x += distance + pref.width;
        }
    }

    public Dimension preferredLayoutSize(Container target) {
        Component child;
        int nChildren = target.getComponentCount();
        Insets insets = target.getInsets();
        int maxHeight = 0;
        int totalWidth = 0;
        for (int i = 0; i < nChildren; i++) {
            child = target.getComponent(i);
            if (!child.isVisible()) continue;
            Dimension pref = child.getPreferredSize();
            if (pref.height > maxHeight) maxHeight = pref.height;
            totalWidth += pref.width;
        }
        return new Dimension(totalWidth + insets.left + insets.right, maxHeight + insets.top + insets.bottom);
    }

    public Dimension minimumLayoutSize(Container target) {
        return preferredLayoutSize(target);
    }

    public Dimension maximumLayoutSize(Container target) {
        return preferredLayoutSize(target);
    }

    public void addLayoutComponent(String constraint, Component comp) { }

    public void addLayoutComponent(Component comp, Object constraint) { }

    public void removeLayoutComponent(Component comp) { }

    public void invalidateLayout(Container target) { }

    public float getLayoutAlignmentX(Container target) { return 0.5f; }

    public float getLayoutAlignmentY(Container target) { return 0.5f; }
}
