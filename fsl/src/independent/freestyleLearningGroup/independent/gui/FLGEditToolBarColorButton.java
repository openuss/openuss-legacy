/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.gui;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JColorChooser;

import freestyleLearningGroup.independent.util.FLGInternationalization;

public class FLGEditToolBarColorButton extends FLGEditToolBarButton {
    protected FLGInternationalization internationalization;
    protected static Color mouseOverColor;
    protected Image image;
    protected boolean colorChangingAllowed;

    protected FLGEditToolBarColorButton() {
    }

    public FLGEditToolBarColorButton(Image image, Color color) {
        this(image, color, null, null);
    }

    public FLGEditToolBarColorButton(Image image, Color color, String toolTipText, ActionListener actionListener) {
        super(image, toolTipText, actionListener);
        internationalization = new FLGInternationalization("freestyleLearningGroup.independent.gui.internationalization",
            getClass().getClassLoader());
        addMouseListener(new FLGEditToolBarColorButton_MouseAdapter());
        this.image = image;
        this.colorChangingAllowed = true;
        setColor(color);
    }

    public void setColor(Color color) {
        mouseOverColor = color;
        setImage(image);
    }

    public Color getColor() {
        return mouseOverColor;
    }

    public void setEditable(boolean editingAllowed) {
        colorChangingAllowed = editingAllowed;
    }

    public void setImage(Image image) {
        image_normal = FLGImageUtility.createAntiAliasedImage(image, imageWidth, imageHeight);
        image_rollover = FLGImageUtility.createAntiAliasedImage(FLGImageUtility.createColorImage(image, mouseOverColor),
            imageWidth, imageHeight);
        image_pressed = FLGImageUtility.createAntiAliasedImage(FLGImageUtility.createImageWithDifferentBrightness(image_rollover, 0.75),
            imageWidth, imageHeight);
        image_disabled = FLGImageUtility.createAntiAliasedImage(FLGImageUtility.createGrayImage(image),
            imageWidth, imageHeight);
    }

    protected String getHexStringFromColor(Color color) {
        String highlightFontColorRedString = Integer.toHexString((int)color.getRed());
        if (highlightFontColorRedString.length() < 2) highlightFontColorRedString = "0" + highlightFontColorRedString;
        String highlightFontColorGreenString = Integer.toHexString((int)color.getGreen());
        if (highlightFontColorGreenString.length() < 2)
            highlightFontColorGreenString = "0" + highlightFontColorGreenString;
        String highlightFontColorBlueString = Integer.toHexString((int)color.getBlue());
        if (highlightFontColorBlueString.length() < 2)
            highlightFontColorBlueString = "0" + highlightFontColorBlueString;
        String highlightFontColorString = highlightFontColorRedString + highlightFontColorGreenString +
            highlightFontColorBlueString;
        return highlightFontColorString;
    }

    public FLGEditToolBarButton copy(String toolTipText, ActionListener actionListener) {
        FLGEditToolBarColorButton button = new FLGEditToolBarColorButton();
        FLGEditToolBarColorButton.mouseOverColor = mouseOverColor;
        button.image = image;
        button.image_normal = image_normal;
        button.image_disabled = image_disabled;
        button.image_pressed = image_pressed;
        button.image_rollover = image_rollover;
        button.button_normal = button_normal;
        button.button_pressed = button_pressed;
        button.button_disabled = button_disabled;
        button.button_rollover = button_rollover;
        button.buttonWidth = buttonWidth;
        button.buttonHeight = buttonHeight;
        button.imageWidth = imageWidth;
        button.imageHeight = imageHeight;
        button.initAllButImages();
        if (toolTipText != null) button.setToolTipText(toolTipText);
        button.addMouseListener(new FLGEditToolBarColorButton_MouseAdapter());
        button.addActionListener(actionListener);
        return button;
    }

    class FLGEditToolBarColorButton_MouseAdapter extends MouseAdapter {
        public void mousePressed(MouseEvent e) {
            if (colorChangingAllowed && e.getClickCount() > 1) {
                (new Thread(
                    new Runnable() {
                        public void run() {
                            showColorChooserDialog();
                        }
                    })).start();
            }
        }

        private void showColorChooserDialog() {
            JColorChooser colorChooser = new JColorChooser();
            Color newColor = JColorChooser.showDialog(null, internationalization.getString("button.colorChooser.title"), mouseOverColor);
            if (newColor != null) {
                setColor(newColor);
            }
        }
    }
}
