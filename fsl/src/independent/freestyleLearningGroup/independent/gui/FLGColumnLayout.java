/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.gui;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.LayoutManager2;

public class FLGColumnLayout implements LayoutManager2 {
    private static final int MAX_NO_COLS = 100;
    private static final int MAX_NO_ROWS = 100;
    private static final int MAX_NO_CHILDS = 1000;
    public static final String LEFT = "left";
    public static final String LEFTEND = "leftend";
    public static final String CENTER = "center";
    public static final String CENTEREND = "centerend";
    public static final String RIGHT = "right";
    public static final String RIGHTEND = "rightend";
    protected int horizontalSpacing;
    protected int verticalSpacing;
    private int[] childAlignment = new int[MAX_NO_CHILDS];
    private boolean[] childIsEOL = new boolean[MAX_NO_CHILDS];
    private int[] colsWidth = new int[MAX_NO_COLS];
    private int[] rowsHeight = new int[MAX_NO_ROWS];
    private int noCols = 0, noRows = 0;
    private int noComponents = 0;

    public FLGColumnLayout(int horizontalSpacing, int verticalSpacing) {
        this.horizontalSpacing = horizontalSpacing;
        this.verticalSpacing = verticalSpacing;
    }

    public FLGColumnLayout() { this(5, 5); }

    public void layoutContainer(Container target) {
        Insets insets = target.getInsets();
        Component kid;
        int nkids = target.getComponentCount();
        // clear the arrays
        for (int t = 0; t < MAX_NO_ROWS; t++) rowsHeight[t] = 0;
        for (int t = 0; t < MAX_NO_COLS; t++) colsWidth[t] = 0;
        // calculate the number of columns, the column width and the row height
        noCols = 0;
        noRows = 0;
        int noColsInThisRow = 0;
        for (int i = 0; i < nkids; i++) {
            kid = target.getComponent(i);
            if (!kid.isVisible()) continue;
            colsWidth[noColsInThisRow] = Math.max(colsWidth[noColsInThisRow], kid.getPreferredSize().width);
            rowsHeight[noRows] = Math.max(rowsHeight[noRows], kid.getPreferredSize().height);
            if (childIsEOL[i]) {
                noCols = Math.max(noCols, noColsInThisRow + 1);
                noColsInThisRow = 0;
                noRows++;
            }
            else
                noColsInThisRow++;
        }
        // do the layout
        int xStart = insets.left;
        int x0 = insets.left;
        int y0 = insets.top;
        int x, y;
        int col = 0;
        int row = 0;
        for (int i = 0; i < nkids; i++) {
            x = 0;
            y = 0;
            kid = target.getComponent(i);
            if (!kid.isVisible()) continue;
            Dimension pref = kid.getPreferredSize();
            y = y0;
            switch (childAlignment[i]) {
                case 1: // left
                    x = x0;
                    break;
                case 2: // center
                    x = x0 + ((colsWidth[col] - pref.width) / 2);
                    break;
                case 3: // right
                    x = x0 + colsWidth[col] - pref.width;
                    break;
            }
            kid.setBounds(x, y, pref.width, pref.height);
            // next line?
            if (childIsEOL[i]) {
                y0 = y0 + rowsHeight[row] + verticalSpacing;
                x0 = xStart;
                col = 0;
                row++;
            }
            else {
                x0 = x0 + colsWidth[col] + horizontalSpacing;
                col++;
            }
        }
    }

    public void addLayoutComponent(Component comp, Object constraint) {
        String str = (String)constraint;
        childIsEOL[noComponents] = true;
        childAlignment[noComponents] = 1;
        childIsEOL[noComponents] = str.endsWith("end");
        if (str.startsWith("left")) childAlignment[noComponents] = 1;
        if (str.startsWith("center")) childAlignment[noComponents] = 2;
        if (str.startsWith("right")) childAlignment[noComponents] = 3;
        noComponents++;
    }

    public void addLayoutComponent(String constraint, Component comp) { }

    public Dimension preferredLayoutSize(Container target) {
        Dimension d = layoutSize(target, 1);
        return d;
    }

    public Dimension minimumLayoutSize(Container target) {
        Dimension d = layoutSize(target, 2);
        return d;
    }

    public Dimension maximumLayoutSize(Container target) {
        Dimension d = layoutSize(target, 3);
        return d;
    }

    private Dimension layoutSize(Container target, int sizetype) {
        Insets insets = target.getInsets();
        Component kid;
        int nkids = target.getComponentCount();
        // clear the arrays
        for (int t = 0; t < MAX_NO_ROWS; t++) rowsHeight[t] = 0;
        for (int t = 0; t < MAX_NO_COLS; t++) colsWidth[t] = 0;
        // calculate the number of columns, the column width and the row height
        noCols = 0;
        noRows = 0;
        int noColsInThisRow = 0;
        for (int i = 0; i < nkids; i++) {
            kid = target.getComponent(i);
            if (!kid.isVisible()) continue;
            Dimension kidPrefSize;
            if (sizetype == 1) kidPrefSize = kid.getPreferredSize();
            else if (sizetype == 2) kidPrefSize = kid.getMinimumSize();
            else
                kidPrefSize = kid.getMaximumSize();
            colsWidth[noColsInThisRow] = Math.max(colsWidth[noColsInThisRow], kidPrefSize.width);
            rowsHeight[noRows] = Math.max(rowsHeight[noRows], kidPrefSize.height);
            if (childIsEOL[i]) {
                noCols = Math.max(noCols, noColsInThisRow + 1);
                noColsInThisRow = 0;
                noRows++;
            }
            else
                noColsInThisRow++;
        }
        int width = 0, height = 0;
        for (int i = 0; i < noCols; i++) width += colsWidth[i];
        for (int i = 0; i < noRows; i++) height += rowsHeight[i];
        width += horizontalSpacing * (noCols - 1) + insets.left + insets.right;
        height += verticalSpacing * (noRows - 1) + insets.top + insets.bottom;
        return (new Dimension(width, height));
    }

    public void removeLayoutComponent(Component comp) { }

    public void invalidateLayout(Container target) { }

    public float getLayoutAlignmentX(Container target) { return 0.5f; }

    public float getLayoutAlignmentY(Container target) { return 0.5f; }
}
