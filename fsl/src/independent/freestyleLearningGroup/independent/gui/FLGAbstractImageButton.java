/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.gui;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Vector;

import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.JButton;

public class FLGAbstractImageButton extends AbstractButton implements PropertyChangeListener {
    protected Image button_normal;
    protected Image button_pressed;
    protected Image button_rollover;
    protected Image button_disabled;
    protected Image image_normal;
    protected Image image_pressed;
    protected Image image_rollover;
    protected Image image_disabled;
    protected int buttonWidth;
    protected int buttonHeight;
    protected int imageWidth;
    protected int imageHeight;
    private Dimension preferredSize;
    private boolean rollover;
    private boolean pressed;
    private String actionCommand;
    private Vector actionListeners;
    protected Action m_action;
    
    public FLGAbstractImageButton() {
        model = (new JButton()).getModel();
    }

    protected Image createButtonImage(String filename) {
        return FLGImageUtility.createAntiAliasedImage(loadImage(filename), buttonWidth, buttonHeight);
    }

    protected void init(Image image) {
        image_normal = FLGImageUtility.createAntiAliasedImage(image, imageWidth, imageHeight);
        image_pressed = FLGImageUtility.createAntiAliasedImage(FLGImageUtility.createImageWithDifferentBrightness(image, 0.75),
            imageWidth, imageHeight);
        image_rollover = FLGImageUtility.createAntiAliasedImage(FLGImageUtility.createImageWithDifferentBrightness(image, 1.5),
            imageWidth, imageHeight);
        image_disabled = FLGImageUtility.createAntiAliasedImage(FLGImageUtility.createGrayImage(image),
            imageWidth, imageHeight);
        initAllButImages();
    }

    protected void removeAllActionListeners() {
        actionListeners.removeAllElements();
    }

    protected void initAllButImages() {
        preferredSize = new Dimension(buttonWidth, buttonHeight);
        actionListeners = new Vector();
        // We need a listener for our actions
        addActionListener(
            new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (m_action != null)
                        m_action.actionPerformed(e);
                }
            });
        setRequestFocusEnabled(false);
        this.addMouseListener(
            new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    if (isEnabled()) {
                        pressed = true;
                        repaint();
                    }
                }
                public void mouseReleased(MouseEvent e) {
                    if (isEnabled()) {
                        fireActionEvent();
                        pressed = false;
                        repaint();
                    }
                }
                public void mouseEntered(MouseEvent e) {
                    if (isEnabled()) {
                        rollover = true;
                        repaint();
                    }
                }
                public void mouseExited(MouseEvent e) {
                    if (isEnabled()) {
                        rollover = false;
                        repaint();
                    }
                }
            });
    }

    public void addActionListener(ActionListener listener) {
        actionListeners.add(listener);
    }

    public void removeActionListener(ActionListener listener) {
        actionListeners.remove(listener);
    }

    public void setActionCommand(String actionCommand) {
        this.actionCommand = actionCommand;
    }

    public String getActionCommand() {
        return actionCommand;
    }

    public Dimension getPreferredSize() {
        return preferredSize;
    }

    private void fireActionEvent() {
        ActionEvent event = new ActionEvent(this, 0, getActionCommand());
        for (int i = 0; i < actionListeners.size(); i++) {
            ActionListener listener = (ActionListener)actionListeners.get(i);
            listener.actionPerformed(event);
        }
    }

    public void paint(Graphics g) {
        super.paint(g);
        if (pressed) {
            g.drawImage(button_pressed, 0, 0, this);
            g.drawImage(image_pressed, (buttonWidth - imageWidth) / 2 + 1, (buttonHeight - imageHeight) / 2 + 1, this);
        }
        else if (rollover) {
            g.drawImage(button_rollover, 0, 0, this);
            g.drawImage(image_rollover, (buttonWidth - imageWidth) / 2, (buttonHeight - imageHeight) / 2, this);
        }
        else if (!isEnabled()) {
            g.drawImage(button_disabled, 0, 0, this);
            g.drawImage(image_disabled, (buttonWidth - imageWidth) / 2, (buttonHeight - imageHeight) / 2, this);
        }
        else {
            g.drawImage(button_normal, 0, 0, this);
            g.drawImage(image_normal, (buttonWidth - imageWidth) / 2, (buttonHeight - imageHeight) / 2, this);
        }
    }

    protected Image loadImage(String imageFileName) {
        return FLGImageUtility.loadImageAndWait(getClass().getResource(imageFileName));
    }

    public void setEnabled(boolean enabled) {
        if (!enabled) {
            this.rollover = false;
            this.pressed = false;
        }
        super.setEnabled(enabled);
    }

    public void setImage(Image image) {
        image_normal = FLGImageUtility.createAntiAliasedImage(image, imageWidth, imageHeight);
        image_pressed = FLGImageUtility.createAntiAliasedImage(FLGImageUtility.createImageWithDifferentBrightness(image, 0.75),
            imageWidth, imageHeight);
        image_rollover = FLGImageUtility.createAntiAliasedImage(FLGImageUtility.createImageWithDifferentBrightness(image, 1.5),
            imageWidth, imageHeight);
        image_disabled = FLGImageUtility.createAntiAliasedImage(FLGImageUtility.createGrayImage(image),
            imageWidth, imageHeight);
    }

    /**
     * Returns the action of this object. If there is none, <code>null</code> will be returned.
     * @return the action of this object or <code>null</code> if there is none.
     */
    public Action getAction() {
        return m_action;
    }

    /**
     * Sets the action of this object. If there is an old one, its reference
     * will be overwritten and it will be deregistered as a property change listener.
     * @param action the action that will be set.
     */
    public void setAction(Action action) {
        // First we check if we have an old action. If that is true we have to
        // derigister this object as a PropertyChangeListener
        if (m_action != null)
            m_action.removePropertyChangeListener(this);
        // Now we store the given action as a member and register this object as
        // a PropertyChangeListener (but only if the given action isn't a null
        // value).
        m_action = action;
        if (action != null)
            m_action.addPropertyChangeListener(this);
        // Enable/Disable button according to the action's state
        setEnabled(action.isEnabled());
    }

    /**
     * This method will handle action events that occur. It must be public as a side effect.
     * @param evt the fired event
     */
    public void propertyChange(PropertyChangeEvent evt) {
        // If the property change was fired by our action (which we may have) and
        // the change's property is the "enabling" property, we will set the
        // corresponding property of this object as stated in the event's boolean
        // value.
        if (m_action != null && evt.getSource().equals(m_action) && evt.getPropertyName().equals("enabled"))
            setEnabled(((Boolean)evt.getNewValue()).booleanValue());
    }
}
