/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.gui;

import java.awt.Color;
import java.awt.Font;
import java.net.URL;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

public class FLGImageProgressDialog extends FLGImageDialog {
    private JProgressBar progressBar;
    private int minValue;
    private int maxValue;
    private int startValue;
    private int progressValue;
    private int targetValue;
    private String displayText;
    private JLabel displayLabel;
    private Color foregroundColor;
    private Color backgroundColor;
    private Thread updateThread;
    
    public FLGImageProgressDialog(String title, int minValue, int maxValue, int startValue, URL imageURL,
    Color backgroundColor, Color foregroundColor, String displayText) {
        this(title, minValue, maxValue, startValue, imageURL, backgroundColor, foregroundColor);
        displayLabel.setText(displayText);
        displayLabel.setBounds(18, 197, displayLabel.getPreferredSize().width, displayLabel.getPreferredSize().height);
    }
    
    public FLGImageProgressDialog(String title, int minValue, int maxValue, int startValue, URL imageURL,
    Color backgroundColor, Color foregroundColor) {
        super(title, imageURL);
        this.minValue = minValue;
        this.maxValue = maxValue;
        this.foregroundColor = foregroundColor;
        this.backgroundColor = backgroundColor;
        this.startValue = startValue;
        buildDependentUI();
    }
    
    public void setDisplayText(String displayText) {
        displayLabel.setText(displayText);
        displayLabel.setBounds(18, 197, displayLabel.getPreferredSize().width, displayLabel.getPreferredSize().height);
    }
    
    public void buildDependentUI() {
        int pos_x = 18;
        int pos_y = 190;
        int width = image.getWidth(this) - 2 * pos_x;
        int height = 5;
        progressBar = new JProgressBar(minValue, maxValue);
        try {
            String presentLAF = UIManager.getLookAndFeel().getClass().getName();
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            SwingUtilities.updateComponentTreeUI(progressBar);
            UIManager.setLookAndFeel(presentLAF);
        }
        catch(Exception e) {
            System.out.println(e);
        }
        progressBar.setForeground(foregroundColor);
        progressBar.setBackground(backgroundColor);
        progressBar.setOpaque(true);
        progressBar.setBorder(BorderFactory.createLineBorder(backgroundColor, 0));
        progressBar.setBorderPainted(false);
        progressBar.setValue(startValue);
        progressBar.setBounds(pos_x, pos_y, width, height);
        layeredPane.add(progressBar, new Integer(2));
        displayLabel = new JLabel();
        displayLabel.setOpaque(false);
        displayLabel.setFont(new Font("SansSerif", Font.BOLD, 12));
        displayLabel.setForeground((Color)UIManager.get("FSLColorBlue"));
        layeredPane.add(displayLabel, new Integer(2));
    }
    
    public void dispose() {
        try {
            updateThread.join(5000);
        }
        catch(Exception e) {
        }
        super.dispose();
    }
    
    public void setDiscreteBarValue(int value) {
        progressBar.setValue(value);
        if (value == progressBar.getMaximum())
            dispose();
    }
    
    public void setBarValue(int value) {
        if (value > targetValue) {
            targetValue = value;
            final int presentValue = progressBar.getValue();
            updateThread = new Thread() {
                public void run() {
                    for (int i = presentValue; i <= targetValue; i++) {
                        final int step = i;
                        try {
                            SwingUtilities.invokeAndWait(new Runnable() {
                                public void run() {
                                    progressBar.setValue(step);
                                }
                            });                        
                            Thread.sleep(1);
                        }
                        catch(Exception e) {
                            System.out.println(e.getMessage());
                        }
                    }
                    //                    if (targetValue == progressBar.getMaximum())
                    //                        dispose();
                }
            };
            updateThread.start();
        }
    }
    
    /** 
     * Carsten Fiedler, 28.11.2006
     * Sets indeterminate.
     * @param <code>boolean</code> value
     */
    public void setIndeterminate(boolean value) {
    	progressBar.setIndeterminate(value);
    }
    
    private JProgressBar getProgressBar() {
        return progressBar;
    }
    
    
    public int getValue() {
        return progressBar.getValue();
    }
}

