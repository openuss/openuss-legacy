/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.gui;

import java.awt.*;
import javax.swing.*;

// NOCH GUT DOKUMENTIEREN
public class FLGTopToBottomLayout implements LayoutManager {
    protected int horizontalSpacing = 5;
    protected int verticalSpacing = 5;

    public FLGTopToBottomLayout(int verticalSpacing) {
        this(verticalSpacing, verticalSpacing);
    }

    public FLGTopToBottomLayout(int horizontalSpacing, int verticalSpacing) {
        this.horizontalSpacing = horizontalSpacing;
        this.verticalSpacing = verticalSpacing;
    }

    public void layoutContainer(Container target) {
        Insets insets = target.getInsets();
        Dimension target_size = target.getSize();
        Component child;
        int nChildren = target.getComponentCount();
        int x = insets.left;
        int y = insets.top;
        // Set bounds for each visible child
        for (int i = 0; i < nChildren; i++) {
            child = target.getComponent(i);
            if (!child.isVisible()) continue;
            Dimension pref = child.getPreferredSize();
            child.setBounds(x, y, pref.width, pref.height);
            // x position stays the same in vertical toolbar;
            // y has to be moved by the height of the current
            // child plus the vertical spacing.
            int next_y = y + pref.height + verticalSpacing;
            y = next_y;
        }
    }

    public Dimension preferredLayoutSize(Container target) {
        int totalPrefHeight = 0;
        int maxWidth = 0;
        Component child;
        int nChildren = target.getComponentCount();
        Insets insets = target.getInsets();
        // Set the width of the widest child as the maximum,
        // i.e. the preferred width. Calculate the total
        // height of all children plus spacing.
        for (int i = 0; i < nChildren; i++) {
            child = target.getComponent(i);
            if (!child.isVisible()) continue;
            Dimension pref = child.getPreferredSize();
            if (pref.width > maxWidth) maxWidth = pref.width;
            totalPrefHeight = totalPrefHeight + pref.height + verticalSpacing;
        }
        // Inset positions have to be added as well, the last added 
        // vertical spacing has to be subtracted since no child follows.
        Dimension dim = new Dimension(maxWidth + insets.left + insets.right,
             totalPrefHeight - verticalSpacing + insets.top + insets.bottom);
        return dim;
    }

    public Dimension minimumLayoutSize(Container target) {
        return preferredLayoutSize(target);
    }

    public Dimension maximumLayoutSize(Container target) {
        return preferredLayoutSize(target);
    }

    public void addLayoutComponent(String constraint, Component comp) { }

    public void addLayoutComponent(Component comp, Object constraint) { }

    public void removeLayoutComponent(Component comp) { }

    public void invalidateLayout(Container target) { }

    public float getLayoutAlignmentX(Container target) { return 0.5f; }

    public float getLayoutAlignmentY(Container target) { return 0.5f; }
}
