/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.gui;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;

import javax.swing.*;
import javax.swing.text.*;
import javax.swing.text.html.*;

import freestyleLearningGroup.independent.gui.documents.FLGDigitDocument;
import freestyleLearningGroup.independent.util.FLGFileUtility;
import freestyleLearningGroup.independent.util.FLGInternationalization;

public class FLGHtmlPaneEditButtonsFactory {
    public static final Color DEFAULT_FONT_HIGHLIGHT_COLOR = Color.red;
    public static final Color DEFAULT_FONT_COLOR = Color.black;
    // with this buffer the images of a toolbar Button must only be created once
    private static Hashtable buttonsBuffer = new Hashtable();

    public static interface FLGFileCreator {
        public File createFile(String fileExtension);
    }

    public static interface FLGLinkEditor {
        // hrefAttributeValue: if null then it is a new link
        // return value: the new href-Attribute-Value or null if the link should be removed
        public String linkSelectedToEdit(String hrefAttributeValue);
    }

    /**
     * @param <code>FLGFileCreator</code> imageFileCreator
     * @param <code>FLGLinkEditor</code> linkEditor
     * @return <code>JComponent[]</code> edit toolbar
     */
    public static JComponent[] createDefaultHtmlPaneEditComponents(FLGFileCreator imageFileCreator, FLGLinkEditor linkEditor) {
        FLGInternationalization internationalization =
            new FLGInternationalization("freestyleLearningGroup.independent.gui.internationalization",
            FLGHtmlPaneEditButtonsFactory.class.getClassLoader());
        String highlightFontColorRedString = Integer.toHexString((int)DEFAULT_FONT_HIGHLIGHT_COLOR.getRed());
        if (highlightFontColorRedString.length() < 2) highlightFontColorRedString = "0" + highlightFontColorRedString;
        String highlightFontColorGreenString = Integer.toHexString((int)DEFAULT_FONT_HIGHLIGHT_COLOR.getGreen());
        if (highlightFontColorGreenString.length() < 2) highlightFontColorGreenString = "0" + highlightFontColorGreenString;
        String highlightFontColorBlueString = Integer.toHexString((int)DEFAULT_FONT_HIGHLIGHT_COLOR.getBlue());
        if (highlightFontColorBlueString.length() < 2) highlightFontColorBlueString = "0" + highlightFontColorBlueString;
        String highlightFontColorString = highlightFontColorRedString + highlightFontColorGreenString +
            highlightFontColorBlueString;
        JComponent[] components = new JComponent[20];
        int componentsIndex = 0;
        components[componentsIndex++] = createButton("editToolBarButtonUndo.gif",
            new UndoAction(), internationalization.getString("button.undo.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonRedo.gif",
            new RedoAction(), internationalization.getString("button.redo.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonCut.gif",
            new StyledEditorKit.CutAction(), internationalization.getString("button.cut.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonCopy.gif",
            new CopyAction(), internationalization.getString("button.copy.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonPaste.gif",
            new StyledEditorKit.PasteAction(), internationalization.getString("button.paste.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonTextBold.gif",
            new StyledEditorKit.BoldAction(), internationalization.getString("button.bold.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonTextItalic.gif",
            new StyledEditorKit.ItalicAction(), internationalization.getString("button.italic.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonTextUnderline.gif",
            new StyledEditorKit.UnderlineAction(), internationalization.getString("button.underline.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonTextLeft.gif",
            new AlignmentAction("left-justify", StyleConstants.ALIGN_LEFT),
            internationalization.getString("button.alignLeft.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonTextCenter.gif",
            new AlignmentAction("center-justify", StyleConstants.ALIGN_CENTER),
            internationalization.getString("button.alignCenter.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonTextRight.gif",
            new AlignmentAction("right-justify", StyleConstants.ALIGN_RIGHT),
            internationalization.getString("button.alignRight.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonTextLow.gif",
            new InsertTagAroundSelectionAction("sub", "<sub>", "</sub>", HTML.Tag.SUB),
            internationalization.getString("button.subscript.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonTextHigh.gif",
            new InsertTagAroundSelectionAction("sup", "<sup>", "</sup>", HTML.Tag.SUP),
            internationalization.getString("button.superscript.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonTextEmph.gif",
            new InsertTagAroundSelectionAction("em", "<em>", "</em>", HTML.Tag.EM),
            internationalization.getString("button.mark.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonTextUnEmph.gif",
            new RemoveEmTagAction(), internationalization.getString("button.unmark.toolTipText"));
        components[componentsIndex++] = createFontColorButton("editToolBarButtonTextColor.gif", DEFAULT_FONT_HIGHLIGHT_COLOR,
            new InsertTagAroundSelectionAction("font", "<font color=" + highlightFontColorString + ">", "</font>", HTML.Tag.FONT),
            internationalization.getString("button.fontColor.toolTipText"));
        FLGEditToolBarColorButton defaultFontColorButton =
            createColorButton("editToolBarButtonTextUnColor.gif", DEFAULT_FONT_COLOR,
            new RemoveTagAction("font"), internationalization.getString("button.fontUnColor.toolTipText"));
        defaultFontColorButton.setEditable(false);
        components[componentsIndex++] = defaultFontColorButton;
        components[componentsIndex++] = createButton("editToolBarButtonInsertImage.gif",
            new InsertImgTagAction(imageFileCreator), internationalization.getString("button.image.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonInsertTable.gif",
            new InsertTableTagAction(), internationalization.getString("button.table.toolTipText"));
        components[componentsIndex++] = createButton("editToolBarButtonInsertLink.gif",
            new InsertATagAction(linkEditor), internationalization.getString("button.link.toolTipText"));
        return components;
    }

    // the localFileNames must be unique for the buffer to work properly
    private static FLGEditToolBarButton createButton(String localFileName, ActionListener actionListener, String toolTipText) {
        FLGEditToolBarButton bufferedButton = (FLGEditToolBarButton)buttonsBuffer.get(localFileName);
        if (bufferedButton != null) {
            return bufferedButton.copy(toolTipText, actionListener);
        }
        FLGEditToolBarButton button = new FLGEditToolBarButton(FLGImageUtility.loadImageAndWait(FLGHtmlPaneEditButtonsFactory.class.getClassLoader().getResource("freestyleLearningGroup/independent/gui/images/" +
            localFileName)), toolTipText, actionListener);
        buttonsBuffer.put(localFileName, button);
        return button;
    }

    private static FLGEditToolBarColorButton createColorButton(String localFileName, Color color,
        ActionListener actionListener, String toolTipText) {
            FLGEditToolBarColorButton bufferedButton = (FLGEditToolBarColorButton)buttonsBuffer.get(localFileName);
            if (bufferedButton != null) {
                return (FLGEditToolBarColorButton)bufferedButton.copy(toolTipText, actionListener);
            }
            FLGEditToolBarColorButton button = new
                FLGEditToolBarColorButton(FLGImageUtility.loadImageAndWait(FLGHtmlPaneEditButtonsFactory.class.getClassLoader().getResource("freestyleLearningGroup/independent/gui/images/" +
                localFileName)), color, toolTipText, actionListener);
            buttonsBuffer.put(localFileName, button);
            return button;
    }

    private static FLGEditToolBarHtmlFontColorButton
        createFontColorButton(String localFileName, Color color, ActionListener actionListener, String toolTipText) {
/*
            FLGEditToolBarHtmlFontColorButton bufferedButton =
                (FLGEditToolBarHtmlFontColorButton)buttonsBuffer.get(localFileName);
            if (bufferedButton != null) {
                return (FLGEditToolBarHtmlFontColorButton)bufferedButton.copy(toolTipText, actionListener);
            }
*/

            FLGEditToolBarHtmlFontColorButton button =
                new FLGEditToolBarHtmlFontColorButton(FLGImageUtility.loadImageAndWait(FLGHtmlPaneEditButtonsFactory.class.getClassLoader().getResource("freestyleLearningGroup/independent/gui/images/" +
                localFileName)), color, toolTipText, actionListener);

/*
            buttonsBuffer.put(localFileName, button);
*/

            return button;
    }

    static class UndoAction extends HTMLEditorKit.StyledTextAction {
        public UndoAction() {
            super("undo");
        }

        public void actionPerformed(ActionEvent e) {
            JTextPane editor = (JTextPane)getEditor(e);
            if (editor != null && editor instanceof FLGHtmlPane) {
                if (((FLGHtmlPane)editor).getUndoManager().canUndo())
                    ((FLGHtmlPane)editor).getUndoManager().undo();
            }
        }
    }


    static class RedoAction extends HTMLEditorKit.StyledTextAction {
        public RedoAction() {
            super("redo");
        }

        public void actionPerformed(ActionEvent e) {
            JTextPane editor = (JTextPane)getEditor(e);
            if (editor != null && editor instanceof FLGHtmlPane) {
                if (((FLGHtmlPane)editor).getUndoManager().canRedo())
                    ((FLGHtmlPane)editor).getUndoManager().redo();
            }
        }
    }


    static class InsertTableTagAction extends HTMLEditorKit.StyledTextAction implements FLGDialogInputVerifier {
        private FLGInternationalization internationalization;
        private JPanel dialogComponent;
        private JTextField textField_rows;
        private JTextField textField_columns;

        public InsertTableTagAction() {
            super("table");
            internationalization = new FLGInternationalization("freestyleLearningGroup.independent.gui.internationalization",
                getClass().getClassLoader());
            dialogComponent = new JPanel(new FLGColumnLayout());
            dialogComponent.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
            textField_rows = new JTextField(20);
            textField_rows.setDocument(new FLGDigitDocument());
            dialogComponent.add(new JLabel(internationalization.getString("label.rowCount.title")), FLGColumnLayout.LEFT);
            dialogComponent.add(textField_rows, FLGColumnLayout.LEFTEND);
            textField_columns = new JTextField(20);
            textField_columns.setDocument(new FLGDigitDocument());
            dialogComponent.add(new JLabel(internationalization.getString("label.columnCount.title")), FLGColumnLayout.LEFT);
            dialogComponent.add(textField_columns, FLGColumnLayout.LEFTEND);
        }

        public String verifyInput() {
            String resultString = "";
            if (textField_rows.getText() == null || textField_rows.getText().length() == 0 ||
                Integer.parseInt(textField_rows.getText()) < 1)
                    resultString += internationalization.getString("label.rowCount.title") + ": " +
                        internationalization.getString("text.valueMustBeGreaterThanZero") + "\n";
            if (textField_columns.getText() == null || textField_columns.getText().length() == 0 ||
                Integer.parseInt(textField_columns.getText()) < 1)
                    resultString += internationalization.getString("label.columnCount.title") + ": " +
                        internationalization.getString("text.valueMustBeGreaterThanZero") + "\n";
            if (resultString.length() > 0) return resultString;
            else
                return null;
        }

        public void actionPerformed(ActionEvent e) {
            JTextPane editor = (JTextPane)getEditor(e);
            if (editor != null) {
                int returnValue = FLGOptionPane.showConfirmDialog(this, dialogComponent, internationalization.getString("dialog.insertTable.title"),
                    FLGOptionPane.OK_CANCEL_OPTION, FLGOptionPane.PLAIN_MESSAGE);
                if (returnValue == FLGOptionPane.OK_OPTION) {
                    int rows = Integer.parseInt(textField_rows.getText());
                    int columns = Integer.parseInt(textField_columns.getText());
                    String html = "<table border=1 align=\"center\">";
                    for (int row = 0; row < rows; row++) {
                        html += "<tr>";
                        for (int column = 0; column < columns; column++) {
                            html += "<td><p>&nbsp;</p></td>";
                        }
                        html += "</tr>";
                    }
                    html += "</table><p>";
                    ActionEvent newEvent = new ActionEvent(editor, e.getID(), e.getActionCommand(), e.getModifiers());
                    new HTMLEditorKit.InsertHTMLTextAction("insert-table", html, HTML.Tag.TD, HTML.Tag.TABLE, HTML.Tag.BODY,
                        HTML.Tag.TABLE).actionPerformed(newEvent);
                }
            }
        }
    }


    static class InsertImgTagAction extends HTMLEditorKit.StyledTextAction {
        private FLGHtmlPaneEditButtonsFactory.FLGFileCreator imageFileCreator;

        public InsertImgTagAction(FLGHtmlPaneEditButtonsFactory.FLGFileCreator imageFileCreator) {
            super("img");
            this.imageFileCreator = imageFileCreator;
        }

        public void actionPerformed(ActionEvent e) {
            if (getEditor(e) != null && getEditor(e)instanceof FLGHtmlPane) {
                FLGHtmlPane editor = (FLGHtmlPane)getEditor(e);
                int p0 = Math.min(editor.getCaret().getDot(), editor.getCaret().getMark());
                FLGMediaFileChooser mediaFileChooser = new FLGMediaFileChooser(FLGMediaFileChooser.PICTURE);
                if (mediaFileChooser.showDialog()) {
                    File selectedFile = mediaFileChooser.getSelectedFile();
                    if (selectedFile.exists()) {
                        try {
                            Image theImage = FLGImageUtility.loadImageAndWait(selectedFile.toURL());
                            if (theImage != null) {
                                File destinationFile = imageFileCreator.createFile(mediaFileChooser.getFileExtension());
                                FLGFileUtility.copyFile(selectedFile, destinationFile);

/*
                                ImageIcon imageIcon = new ImageIcon(theImage);
                                int imageHeight = imageIcon.getIconHeight();
                                int imageWidth = imageIcon.getIconWidth();
                                String imgTag = "<img src=\"" + destinationFile.getName() + "\" height=\"" + imageHeight +
                                    "\" width=\"" + imageWidth + "\">";
*/

                                String imgTag = "<img src=\"" + destinationFile.getName() + "\">";
                                HTMLEditorKit editorKit = (HTMLEditorKit)editor.getEditorKit();
                                HTMLDocument doc = (HTMLDocument)editor.getDocument();
                                editor.getUndoManager().startComplexEdit();
                                doc.insertString(p0, "a", null);
                                editorKit.insertHTML(doc, p0 + 1, imgTag, 0, 0, HTML.Tag.IMG);
                                doc.remove(p0, 1);
                                editor.getUndoManager().endComplexEdit();
                            }
                        }
                        catch (Exception ex) { System.out.println(ex); }
                    }
                }
            }
        }
    }
    
    
    public static class InsertATagAction extends HTMLEditorKit.StyledTextAction {
        private FLGHtmlPaneEditButtonsFactory.FLGLinkEditor linkEditor;

        public InsertATagAction(FLGHtmlPaneEditButtonsFactory.FLGLinkEditor linkEditor) {
            super("link");
            this.linkEditor = linkEditor;
        }

        public void actionPerformed(ActionEvent e) {
            FLGHtmlPane editor = (FLGHtmlPane)getEditor(e);
            if (editor != null && editor instanceof FLGHtmlPane) {
                String oldHRefAttributeValue = FLGHtmlUtilities.getAttributeValueOfTagInSelection(HTML.Attribute.HREF,
                    HTML.Tag.A, editor);
                String newHrefAttributeValue = null;
                if (oldHRefAttributeValue != null) {
                    newHrefAttributeValue = linkEditor.linkSelectedToEdit(oldHRefAttributeValue);
                }
                else {
                    int p0 = Math.min(editor.getCaret().getDot(), editor.getCaret().getMark());
                    int p1 = Math.max(editor.getCaret().getDot(), editor.getCaret().getMark());
                    if (p0 < p1 && !FLGHtmlUtilities.isTagInSelection("a", editor)) {
                        newHrefAttributeValue = linkEditor.linkSelectedToEdit(null);
                    }
                }
                if (!(newHrefAttributeValue != null && oldHRefAttributeValue != null &&
                    newHrefAttributeValue.equals(oldHRefAttributeValue)))
                        setSelectedATagHrefAttributeValue(e, editor, newHrefAttributeValue);
            }
        }

        public void setSelectedATagHrefAttributeValue(ActionEvent e, FLGHtmlPane editor, String hrefAttributeValue) {
            int p0 = Math.min(editor.getCaret().getDot(), editor.getCaret().getMark());
            int p1 = Math.max(editor.getCaret().getDot(), editor.getCaret().getMark());
            int tagStartOffset = 0;
            int tagEndOffset = 0;
            HTMLDocument myDocument = (HTMLDocument)editor.getDocument();
            HTMLDocument.Iterator aTagIterator = myDocument.getIterator(HTML.Tag.A);
            boolean aTagExisting = false;
            if (aTagIterator != null) {
                while (aTagIterator.isValid() && !aTagExisting) {
                    if (aTagIterator.getStartOffset() <= p0 && p1 <= aTagIterator.getEndOffset()) {
                        tagStartOffset = aTagIterator.getStartOffset();
                        tagEndOffset = aTagIterator.getEndOffset();
                        aTagExisting = true;
                    }
                    else
                        aTagIterator.next();
                }
            }
            if (aTagExisting) {
                // remove the a Tag first
                editor.setSelectionStart(tagStartOffset);
                editor.setSelectionEnd(tagEndOffset);
                String selectedText = FLGHtmlUtilities.getSelectedHTMLText(editor);
                String textWithoutATag = FLGHtmlUtilities.removeTag("a", null, selectedText);
                editor.getUndoManager().startComplexEdit();
                editor.cut();
                ActionEvent editorActionEvent = new ActionEvent(editor, e.getID(), e.getActionCommand());
                new HTMLEditorKit.InsertHTMLTextAction("removeTag", "<br>" + "@" + textWithoutATag + "@", HTML.Tag.P,
                    HTML.Tag.BR).actionPerformed(editorActionEvent);
                try {
                    editor.getDocument().remove(tagStartOffset, 2);
                    editor.getDocument().remove(tagEndOffset, 1);
                }
                catch (Exception ex) {
                    System.out.println(ex);
                }
                editor.setSelectionStart(tagStartOffset);
                editor.setSelectionEnd(tagEndOffset);
                if (hrefAttributeValue != null) {
                    ActionEvent newEvent = new ActionEvent(editor, e.getID(), e.getActionCommand(), e.getModifiers());
                    new InsertTagAroundSelectionAction("a", "<a href=\"" + hrefAttributeValue + "\">", "</a>",
                        HTML.Tag.A).actionPerformed(newEvent);
                }
                editor.getUndoManager().endComplexEdit();
            }
            else {
                if (hrefAttributeValue != null) {
                    ActionEvent newEvent = new ActionEvent(editor, e.getID(), e.getActionCommand(), e.getModifiers());
                    new InsertTagAroundSelectionAction("a", "<a href=\"" + hrefAttributeValue + "\">", "</a>",
                        HTML.Tag.A).actionPerformed(newEvent);
                }
            }
        }
    }


    static class RemoveEmTagAction extends HTMLEditorKit.StyledTextAction {
        public RemoveEmTagAction() {
            super("removeEmTag");
        }

        public void actionPerformed(ActionEvent e) {
            FLGHtmlPane editor = (FLGHtmlPane)getEditor(e);
            if (editor != null && editor instanceof FLGHtmlPane) {
                String selectedText = FLGHtmlUtilities.getSelectedHTMLText(editor);
                // no p-tags allowed
                if (selectedText != null && !FLGHtmlUtilities.isAnyTagInText(
                    new String[] { "table", "p" }, selectedText)) {
                        int p0 = Math.min(editor.getCaret().getDot(), editor.getCaret().getMark());
                        int p1 = Math.max(editor.getCaret().getDot(), editor.getCaret().getMark());
                        editor.getUndoManager().startComplexEdit();
                        editor.cut();
                        selectedText = FLGHtmlUtilities.removeTag("em", null, selectedText);
                        // SPECIAL TRICK
                        // To insert a text (here selectedText) in a html document without causing
                        // an unwanted insertion of line
                        // breaks before and after the text to insert
                        // use these two methods. First the text is inserted with an explicit <br>
                        // at the beginning. Then the <br> tag
                        // is removed ("doc.remove(p0, 1)")
                        // another trick: because a space at the beginning and at the end will be
                        // ignored we just add the
                        // character "@" which will be removed later
                        new HTMLEditorKit.InsertHTMLTextAction("removeEmTag", "<br>" + "@" + selectedText + "@", HTML.Tag.P,
                            HTML.Tag.BR).actionPerformed(e);
                        try {
                            editor.getDocument().remove(p0, 2);
                            editor.getDocument().remove(p1, 1);
                        }
                        catch (Exception ex) { System.out.println(ex); }
                        editor.getUndoManager().endComplexEdit();
                }
            }
        }
    }


    static class RemoveTagAction extends HTMLEditorKit.StyledTextAction {
        private String tagName;

        public RemoveTagAction(String tagName) {
            super("removeTag");
            this.tagName = tagName;
        }

        public void actionPerformed(ActionEvent e) {
            FLGHtmlPane editor = (FLGHtmlPane)getEditor(e);
            if (editor != null && editor instanceof FLGHtmlPane) {
                String selectedText = FLGHtmlUtilities.getSelectedHTMLText(editor);
                // no p-tags allowed
                if (selectedText != null && !FLGHtmlUtilities.isAnyTagInText(
                    new String[] { "table", "p" }, selectedText)) {
                        int p0 = Math.min(editor.getCaret().getDot(), editor.getCaret().getMark());
                        int p1 = Math.max(editor.getCaret().getDot(), editor.getCaret().getMark());
                        editor.getUndoManager().startComplexEdit();
                        editor.cut();
                        selectedText = FLGHtmlUtilities.removeTag(tagName, null, selectedText);
                        new HTMLEditorKit.InsertHTMLTextAction("removeTag", "<br>" + "@" + selectedText + "@", HTML.Tag.P,
                            HTML.Tag.BR).actionPerformed(e);
                        try {
                            editor.getDocument().remove(p0, 2);
                            editor.getDocument().remove(p1, 1);
                        }
                        catch (Exception ex) { System.out.println(ex); }
                        editor.getUndoManager().endComplexEdit();
                }
            }
        }
    }


    static class InsertTagAroundSelectionAction extends HTMLEditorKit.StyledTextAction {
        private String actionName;
        private String startTagString;
        private String endTagString;
        private HTML.Tag tag;

        public InsertTagAroundSelectionAction(String actionName, String startTagString, String endTagString, HTML.Tag tag) {
            super(actionName);
            this.actionName = actionName;
            this.startTagString = startTagString;
            this.endTagString = endTagString;
            this.tag = tag;
        }

        public void actionPerformed(ActionEvent e) {
            System.out.println("\nInsertTagAroundSelectionAction.actionPerformed()");
            FLGHtmlPane editor = (FLGHtmlPane)getEditor(e);
            if (editor != null && editor instanceof FLGHtmlPane) {
                String selectedText = FLGHtmlUtilities.getSelectedHTMLText(editor);
                System.out.println("selectedText = " + selectedText);
                if (FLGHtmlUtilities.isAnyTagInText(
                    new String[] { actionName }, selectedText)) {
                        System.out.println("tag in text");
                        new RemoveTagAction(actionName).actionPerformed(e);
                }
                else if (selectedText != null && !FLGHtmlUtilities.isAnyTagInText(
                    new String[] { "table", "p" }, selectedText)) {
                        int p0 = Math.min(editor.getCaret().getDot(), editor.getCaret().getMark());
                        editor.getUndoManager().startComplexEdit();
                        editor.cut();
                        // because a leading space will be ignored we just start with the
                        // character "@" which will be removed later
                        System.out.println("actionName = " + actionName);
                        System.out.println("startTagString = " + startTagString);
                        System.out.println("selectedText = " + selectedText);
                        System.out.println("endTagString = " + endTagString);
                        new HTMLEditorKit.InsertHTMLTextAction(actionName, startTagString + "@" + selectedText + endTagString,
                            HTML.Tag.P, tag).actionPerformed(e);
                        try {
                            System.out.println("\tremove");
                            editor.getDocument().remove(p0, 1);
                            System.out.println("\tdone.");
                        }
                        catch (Exception ex) {
                            System.out.println(ex);
                        }
                        editor.getUndoManager().endComplexEdit();
                        System.out.println("done.");
                }
            }
        }
    }


    // WORKAROUND #2
    // The normal AlignmentAction does not work when the html paragraph has already an alignment attribute.
    // So one has to remove any alignment tag before setting the new one.
    static class AlignmentAction extends HTMLEditorKit.StyledTextAction {
        private int a;

        public AlignmentAction(String nm, int a) {
            super(nm);
            this.a = a;
        }

        public void actionPerformed(ActionEvent e) {
            JTextPane editor = (JTextPane)getEditor(e);
            if (editor != null && editor instanceof FLGHtmlPane) {
                AttributeSet originalAttributes = editor.getParagraphAttributes();
                MutableAttributeSet newAttributes = new SimpleAttributeSet();
                Enumeration enumeration = originalAttributes.getAttributeNames();
                while (enumeration.hasMoreElements()) {
                    Object attributeName = enumeration.nextElement();
                    if (!attributeName.toString().equals("align") && !attributeName.toString().equals("text-align")) {
                        newAttributes.addAttribute(attributeName, originalAttributes.getAttribute(attributeName));
                    }
                }
                StyleConstants.setAlignment(newAttributes, a);
                editor.setParagraphAttributes(newAttributes, true);
            }
        }
    }


    /** Extension of the standard CopyAction Finds selected image-tags and copies resources */
    static class CopyAction extends HTMLEditorKit.StyledTextAction {
        private StyledEditorKit.CopyAction defaultCopyAction;

        public CopyAction() {
            super("copy");
            defaultCopyAction = new StyledEditorKit.CopyAction();
        }

        public void actionPerformed(ActionEvent e) {
            FLGHtmlPane editor = (FLGHtmlPane)getEditor(e);
            if (editor != null && editor instanceof FLGHtmlPane) {
                String selectedText = FLGHtmlUtilities.getSelectedHTMLText(editor);
                if (selectedText != null) {
                    Object[] imageResources = FLGHtmlUtilities.getImageTagResources(selectedText);
                    for (int i = 0; i < imageResources.length; i++) {
                        FLGUIUtilities.trace(this, imageResources[i].toString());
                    }
                }
            }
            defaultCopyAction.actionPerformed(e);
        }
    }
}
