/* Generated by Freestyle Learning Group */

// MUSS NOCH VERNUENFTIG DOKUMENTIERT WERDEN
// DER CODE SOLLTE EBENFALLS NOCH UEBERARBEITET WERDEN

package freestyleLearningGroup.independent.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;

public class FLGTextButton3D extends JButton {
    private static int END_WIDTH = 17;
    private static int MID_WIDTH = 10;
    private static int HEIGHT = 30;
    private String text;
    private static Image im_normal_left;
    private static Image im_normal_middle;
    private static Image im_normal_right;
    private static Image im_pressed_left;
    private static Image im_pressed_middle;
    private static Image im_pressed_right;
    private Image im_normal;
    private Image im_normalHighlight;
    private Image im_pressed;
    private Image im_disabled;
    private int buttonWidth = -1;
    private boolean mustCreateButtonImages = true;
    private Font font;
    private Color backgroundColor;

    public FLGTextButton3D(String text, Color backgroundColor) {
        this.backgroundColor = backgroundColor;
        font = new Font("Helvetica", Font.BOLD, 16);
        if (im_normal_left == null) loadImages();
        this.text = text;
        setFocusPainted(false);
        setBorderPainted(false);
    }

    public FLGTextButton3D(String text) {
        this(text, new JPanel().getBackground());
    }

    public void setText(String text) {
        this.text = text;
        mustCreateButtonImages = true;
        repaint();
    }

    public Dimension getPreferredSize() {
        int textWidth = getFontMetrics(font).stringWidth(text);
        int noMidPieces = textWidth / MID_WIDTH;
        return new Dimension(2 * END_WIDTH + noMidPieces * MID_WIDTH, HEIGHT);
    }
    
    public void updateUI() {
        super.updateUI();
        mustCreateButtonImages = true;
        repaint();
    }

    public boolean isOpaque() { return false; }

    public void paint(Graphics g) {
        super.paint(g);
        if (getSize().getWidth() != buttonWidth) {
            mustCreateButtonImages = true;
            buttonWidth = (int)getSize().getWidth();
        }
        if (mustCreateButtonImages) createButtonImages();
    }

    public void setEnabled(boolean enabled) {
        if (enabled == false) getModel().setRollover(false);
        super.setEnabled(enabled);
    }

    private void loadImages() {
        im_normal_left = FLGImageUtility.createAntiAliasedImage(loadImage("textButton3D_normalLeft.gif"), END_WIDTH, HEIGHT);
        im_normal_middle = FLGImageUtility.createAntiAliasedImage(loadImage("textButton3D_normalCenter.gif"), MID_WIDTH, HEIGHT);
        im_normal_right = FLGImageUtility.createAntiAliasedImage(loadImage("textButton3D_normalRight.gif"), END_WIDTH, HEIGHT);
        im_pressed_left = FLGImageUtility.createAntiAliasedImage(loadImage("textButton3D_pressedLeft.gif"), END_WIDTH, HEIGHT);
        im_pressed_middle = FLGImageUtility.createAntiAliasedImage(loadImage("textButton3D_pressedCenter.gif"), MID_WIDTH, HEIGHT);
        im_pressed_right = FLGImageUtility.createAntiAliasedImage(loadImage("textButton3D_pressedRight.gif"), END_WIDTH, HEIGHT);
    }

    private Image loadImage(String imageFileName) {
        return FLGImageUtility.loadImageAndWait(FLGTextButton3D.class.getClassLoader().getResource("freestyleLearningGroup/independent/gui/images/" +
            imageFileName));
    }

    private void createButtonImages() {
        im_normal = createButtonImage(new Color(230, 230, 238), false);
        im_normalHighlight = createButtonImage(Color.white, false);
        im_pressed = createButtonImage(new Color(230, 230, 238), true);
        im_disabled = createButtonImage(new Color(124, 123, 137), false);
        setIcon(new ImageIcon(im_normal));
        setRolloverIcon(new ImageIcon(im_normalHighlight));
        setPressedIcon(new ImageIcon(im_pressed));
        setDisabledIcon(new ImageIcon(im_disabled));
    }

    private Image createButtonImage(Color labelColor, boolean pressed) {
        mustCreateButtonImages = false;
        int textWidth, textHeight, textAscent;
        Image img;
        img = createImage((int)getSize().getWidth(), HEIGHT);
        Graphics2D g_img = (Graphics2D)img.getGraphics();
        g_img.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        g_img.setColor(backgroundColor);
        g_img.fillRect(0, 0, img.getWidth(this), img.getHeight(this));
        g_img.setFont(font);
        textWidth = g_img.getFontMetrics().stringWidth(text);
        textHeight = g_img.getFontMetrics().getHeight();
        textAscent = g_img.getFontMetrics().getAscent();
        if (pressed) {
            g_img.drawImage(im_pressed_left, 0, 0, this);
            int xPos = END_WIDTH;
            while (xPos < img.getWidth(this) - END_WIDTH) {
                g_img.drawImage(im_pressed_middle, xPos, 0, this);
                xPos += MID_WIDTH;
            }
            g_img.drawImage(im_pressed_right, img.getWidth(this) - END_WIDTH, 0, this);
        }
        else {
            g_img.drawImage(im_normal_left, 0, 0, this);
            int xPos = END_WIDTH;
            while (xPos < img.getWidth(this) - END_WIDTH) {
                g_img.drawImage(im_normal_middle, xPos, 0, this);
                xPos += MID_WIDTH;
            }
            g_img.drawImage(im_normal_right, img.getWidth(this) - END_WIDTH, 0, this);
        }
        if (pressed) {
            g_img.setColor(labelColor);
            g_img.drawString(text, (img.getWidth(this) - textWidth) / 2 + 1, (HEIGHT - textHeight) / 2 + textAscent + 1);
        }
        else {
            g_img.setColor(labelColor);
            g_img.drawString(text, (img.getWidth(this) - textWidth) / 2, (HEIGHT - textHeight) / 2 + textAscent);
        }
        return img;
    }
    
}
