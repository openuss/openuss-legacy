/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.gui;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.text.html.HTML;
import javax.swing.text.html.HTMLEditorKit;

public class FLGEditToolBarHtmlFontColorButton extends FLGEditToolBarColorButton {
    protected FLGEditToolBarHtmlFontColorButton() {
    }

    public FLGEditToolBarHtmlFontColorButton(Image image, Color color) {
        this(image, color, null, null);
    }

    public FLGEditToolBarHtmlFontColorButton(Image image, Color color, String toolTipText, ActionListener actionListener) {
        super(image, color, toolTipText, actionListener);
    }

    public void setColor(Color newColor) {
        mouseOverColor = newColor;
        setImage(image);
        removeAllActionListeners();
        addActionListener(new InsertFontTagAroundSelectionAction(newColor));
    }

    class InsertFontTagAroundSelectionAction extends HTMLEditorKit.StyledTextAction {
        private String actionName;
        private String startTagString;
        private String endTagString;
        private HTML.Tag tag;

        public InsertFontTagAroundSelectionAction(Color fontColor) {
            super("font");
            this.actionName = "font";
            this.startTagString = "<font color=" + getHexStringFromColor(fontColor) + ">";
            this.endTagString = "</font>";
            this.tag = HTML.Tag.FONT;
        }

        public void actionPerformed(ActionEvent e) {
            // set new font tag in selection
            FLGHtmlPane editor = (FLGHtmlPane)getEditor(e);
            if (editor != null && editor instanceof FLGHtmlPane) {
                int selectionStart = editor.getSelectionStart();
                int selectionEnd = editor.getSelectionEnd();
                String selectedText = FLGHtmlUtilities.getSelectedHTMLText(editor);
                if (selectedText != null && !FLGHtmlUtilities.isAnyTagInText(
                    new String[] { "table", "p" }, selectedText)) {
                        // remomve present font tags
                        int p0 = Math.min(editor.getCaret().getDot(), editor.getCaret().getMark());
                        int p1 = Math.max(editor.getCaret().getDot(), editor.getCaret().getMark());
                        editor.getUndoManager().startComplexEdit();
                        editor.cut();
                        selectedText = FLGHtmlUtilities.removeTag("font", null, selectedText);
                        new HTMLEditorKit.InsertHTMLTextAction("removeFontTag", "<br>" + "@" + selectedText + "@", HTML.Tag.P,
                            HTML.Tag.BR).actionPerformed(e);
                        try {
                            editor.getDocument().remove(p0, 2);
                            editor.getDocument().remove(p1, 1);
                        }
                        catch (Exception ex) { System.out.println(ex); }
                        editor.getUndoManager().endComplexEdit();
                        // insert font tag
                        editor.select(selectionStart, selectionEnd);
                        p0 = Math.min(editor.getCaret().getDot(), editor.getCaret().getMark());
                        editor.getUndoManager().startComplexEdit();
                        editor.cut();
                        new HTMLEditorKit.InsertHTMLTextAction(actionName, startTagString + "@" + selectedText + endTagString,
                            HTML.Tag.P, tag).actionPerformed(e);
                        try {
                            editor.getDocument().remove(p0, 1);
                        }
                        catch (Exception ex) { System.out.println(ex); }
                        editor.getUndoManager().endComplexEdit();
                }
            }
        }
    }
}
