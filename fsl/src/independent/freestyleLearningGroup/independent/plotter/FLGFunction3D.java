/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.plotter;

import java.io.Serializable;

/**
 * Eine <code>FLGFunction3D</code> repr&auml;sentiert eine Funktion im dreidimensionalen Raum für
 * einen spezifizierten Wertebereich.<p> Diese Klasse ist abstrakt und kann nicht benutzt werden
 * ohne daß die abstrakte <code>calculate</code> Methode implementiert wird.<p> F&uuml;r eine 3D-Funktion sind immer <i>x</i>
 * und <i>z</i> die Parameter und <i>y</i> das Ergebnis der Berechnung.<p> <b>Beispiel</b>: Erzeugt eine Funktion,
 * die eine Ebene erzeugt, da das Ergebnis <code>x + z</code> ist. <p> <pre>
 *	FLGFunction3D function = new FLGFunction3D(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY,
 *																							Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) {
 *			public double calculate(double x, double z) {
 *				return x+z;
 *			}
 *		};
 *  </pre> </p>
 * @see	#calculate(double x, double z)
 * @see	FLGFunctionGroup3D
 * @see	FLGPlotter3D
 */
public abstract class FLGFunction3D implements Serializable {
    private double minX, maxX, minZ, maxZ;
    private String name;

    /**
     * Erzeugt eine <code>FLGFunction3D</code> mit dem spezifizierten Wertebereich.
     * Per Konvention ist das Ergebnis <i>y</i>, daher müssen <i>x</i> und <i>z</i> bestimmt werden.
     * @param	minX	Untergrenze f&uuml; <i>x</i>.
     * @param	maxX	Obergrenze f&uuml; <i>x</i>.
     * @param	minZ	Untergrenze f&uuml; <i>z</i>.
     * @param	maxZ	Obergrenze f&uuml; <i>z</i>.
     */
    public FLGFunction3D(double minX, double maxX, double minZ, double maxZ) {
        this.minX = minX;
        this.maxX = maxX;
        this.minZ = minZ;
        this.maxZ = maxZ;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    /**
     * Liefert die Untergrenze des Wertebereichs für <i>x</i>.
     * @return	minX.
     */
    public double getMinX() { return minX; }

    /**
     * Liefert die Obergrenze des Wertebereichs für <i>x</i>.
     * @return	maxX.
     */
    public double getMaxX() { return maxX; }

    /**
     * Liefert die Untergrenze des Wertebereichs für <i>z</i>.
     * @return	minZ.
     */
    public double getMinZ() { return minZ; }

    /**
     * Liefert die Obergrenze des Wertebereichs für <i>z</i>.
     * @return	maxZ.
     */
    public double getMaxZ() { return maxZ; }

    /**
     * Setzt den minimalen x-Wert.
     * @param	x der neue minimale x-Wert.
     */
    public void setMinX(double x) { minX = x; }

    /**
     * Setzt den maximalen x-Wert.
     * @param	x der neue maximale x-Wert.
     */
    public void setMaxX(double x) { maxX = x; }

    /**
     * Setzt den minimalen z-Wert.
     * @param	z der neue minimale z-Wert.
     */
    public void setMinZ(double z) { minZ = z; }

    /**
     * Setzt den maximalen z-Wert.
     * @param	z der neue maximale x-Wert.
     */
    public void setMaxZ(double z) { maxZ = z; }

    /**
     * Liefert den <i>y</i> Wert der Funktion für die spezifizierten <i>x</i> und <i>z</i> Werte.
     * @param	x	der x-Wert.
     * @param	z	der z-Wert.
     * @return	das Ergebnis.
     */
    public abstract double calculate(double x, double z);

    /**
     * Prüft, ob die spezifizierten Werte innerhalb oder ausserhalb des Wertebereiches dieser
     * <code>FLGFuntion3D</code> liegen.
     * @param	x,&nbsp;z	zu pr&uuml;fendee Werte.
     * @return	<code>true</code> bzw. <code>false</code> wenn der spezifizierte Wert innerhalb
     * bzw. ausserhalb des Wertebereiches liegt.
     */
    public boolean contains(double x, double z) {
        return (minX <= x) && (x <= maxX) && (minZ <= z) && (z <= maxZ);
    }
}
