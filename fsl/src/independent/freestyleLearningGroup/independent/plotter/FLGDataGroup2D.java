/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.plotter;

import java.util.Vector;

/**
 * <code>FLGDataGroup2D</code> repräsentiert eine Gruppe von <code>FLGData2D</code> Objekten. <p>
 * <b>Beispiel</b>: Erzeugt ein Datengruppe, die drei verschiedene <code>FLGData2D</code>-Objekte enth&auml;lt. <p><pre>
 *		FLGDataGroup2D data = new FLGDataGroup2D();
 *		
 *		data.add(new FLGData2D("Alex", 25, java.awt.Color.green));
 *		data.add(new FLGData2D("Andrea", 32, java.awt.Color.red));
 *		data.add(new FLGData2D("Daniel", 23));
 *		
 *		log(data.getMaxValue());
 *		log(data.getMinValue());
 * </pre><p>
 * @see	FLGData2D
 * @see FLGBarChart2D
 */
public class FLGDataGroup2D {
    private Vector data = new Vector();
    private double minValue = Double.POSITIVE_INFINITY;
    private double maxValue = Double.NEGATIVE_INFINITY;

    /**
     * Erzeugt eine leere <code>FLGDataGroup2D</code>, bei der der maximale Wert mit <code>Double.NEGATIVE_INFINITY</code> und
     * der minimale Wert mit <code>Double.POSITIVE_INFINITY</code> belegt sind.
     */
    public FLGDataGroup2D() {
    }

    /**
     * Liefert den minimalen Wert der Datengruppe. Sind noch keine Daten in der Gruppe wird
     * <code>Double.POSITIVE_INFINITY</code> geliefert.
     * @return	kleinstes <i>y</i>.
     * @return	Minimum.
     */
    public double getMinValue() { return minValue; }

    /**
     * Liefert den maximalen Wert der Datengruppe. Sind noch keine Daten in der Gruppe wird
     * <code>Double.POSITIVE_INFINITY</code> geliefert.
     * @return	kleinstes <i>y</i>.
     * @return	Maximum.
     */
    public double getMaxValue() { return maxValue; }

    /**
     * F&uuml;gt der Datengruppe ein Element hinzu. Der maximale und der minimale Wert dieser
     * Datengruppe werden automatisch angepasst wenn notwendig.
     * @param	aData	das neue Datum.
     */
    public void add(FLGData2D aData) {
        data.addElement(aData);
        // Aus init() Methode kopiert, damit getMax und getMin immer die
        // korrekten Werte liefern, AS.
        if (aData.getValue() > maxValue) {
            maxValue = aData.getValue();
            // Ist dies die erste Funktion, soll noch nicht das offset
            // hinzugefügt werden: passiert beim min-Vergleich.
            if (minValue < Double.POSITIVE_INFINITY) {
                // Durch die Verwendung von double Zahlen sinnvoll, damit z.B
                // wiklich 100 Obergrenze ist und nicht 99.99999
                double offs = (maxValue - minValue) * 0.000001;
                maxValue += offs;
                minValue -= offs;
            }
        }
        if (aData.getValue() < minValue) {
            minValue = aData.getValue();
            // Durch die Verwendung von double Zahlen sinnvoll, damit z.B
            // wiklich 100 Obergrenze ist und nicht 99.99999
            double offs = (maxValue - minValue) * 0.000001;
            maxValue += offs;
            minValue -= offs;
        }
    }

    /**
     * Liefert das Datum an der spezifizierten Position.
     * @return FLGData2D an Position <code>no</code>.
     * @param	no	die Position.
     */
    public FLGData2D get(int no) {
        return (FLGData2D)data.elementAt(no);
    }

    /**
     * Liefert die Anzahl der Elemente der Datengruppe.
     * @return	Anzahl der Elemente.
     */
    public int size() { return data.size(); }

	/*
	 * Initialisiert die FLGDataGroup2D. Hat die Datengruppe noch keine
	 * Elemente, werden der maximale Wert mit <code>Double.NEGATIVE_INFINITY</code>
	 * und der minimale Wert mit <code>Double.POSITIVE_INFINITY</code> belegt.
	 * Enth&auml;lt die Datengruppe eins oder mehrere Elemente werden die
	 * maximalen und minimalen Werte aus ihnen berechnet.
	 * @deprecated	Die <code>init()</code> Methode ist nur vorhanden um
	 * die Lauffähigkeit vorhandener Programme zu gew&auml;hrleisten. Neue
	 * Programme sollten diese Methode nicht mehr verwenden.
	
	public void init() {
		// initial values for minValue and maxValue
		minValue = Double.POSITIVE_INFINITY;
		maxValue = Double.NEGATIVE_INFINITY;
		
		// calculate minValue and maxValue
		for (int d = 0; d < data.size(); d++) {
			FLGData2D aData = (FLGData2D) data.elementAt(d);
			if (aData.getValue() < minValue)	minValue = aData.getValue();
			if (aData.getValue() > maxValue)	maxValue = aData.getValue();
		}
		
		// Durch die Verwendung von double Zahlen sinnvoll, damit z.B
		// wiklich 100 Obergrenze ist und nicht 99.99999
		double offs = (maxValue - minValue) * 0.000001;
		maxValue += offs;
		minValue -= offs;
	}
	*/
}
