/* Generated by Freestyle Learning Group */

package freestyleLearningGroup.independent.plotter;

import java.io.Serializable;
import java.util.Vector;

/**
 * <code>FLGFunctionGroup2D</code> repr&auml;sentiert eine Gruppe von <code>FLGFunction2D</code>
 * Objekten. Für die gesamte Funktionsgruppe wird ein Wertebereich (= sp&auml;terer
 * Zeichenbereich) festgelegt.<p> <b>Beispiel</b>: Erzeugt eine
 * Funktionengruppe, die die Sinus- und Cosinus-Funktion enth&auml;lt. Der Zeichenbereich soll von
 * minus 2pi bis 2pi gehen. <p> <pre>
 *  FLGFunction2D functionA = new FLGFunction2D(Double.NEGATIVE_INFINITY,
 *                                            Double.POSITIVE_INFINITY,
 *                                            "Sinus") {
 *    public double calculate(double x) {
 *      return Math.sin(x);
 *    }
 *  };
 *  functionA.setColor(Color.red);
 *
 *  FLGFunction2D functionB = new FLGFunction2D(Double.NEGATIVE_INFINITY,
 *                                            Double.POSITIVE_INFINITY,
 *                                            "Cosinus") {
 *    public double calculate(double x) {
 *      return Math.cos(x);
 *    }
 *  };
 *  functionB.setColor(Color.blue);
 *
 *  FLGFunctionGroup2D functionGroup = new FLGFunctionGroup2D(-6.29, 6.29);
 *  functionGroup.addFunction(functionA);
 *  functionGroup.addFunction(functionB);
 *  </pre> </p>
 * @see	FLGFunction2D
 * @see	FLGPlotter2D
 */
public class FLGFunctionGroup2D implements Serializable {
    private static final int RES = 10000;
    private double minX, maxX;
    private double minY = Double.POSITIVE_INFINITY;
    private double maxY = Double.NEGATIVE_INFINITY;
    private Vector functions = new Vector();
    private boolean calcMinMaxY = true;
    //
    // Konstruktoren
    //

    /**
     * Erzeugt eine leere Funktionengruppe mit dem spezifizierten Wertebereich.
     * @param	minX,&nbsp;maxX	die Unter- und Obergrenze.
     */
    public FLGFunctionGroup2D(double minX, double maxX) {
        setBounds(minX, maxX);
    }

    /**
     * Setzt den Wertebereich der Funktionengruppe.
     * @param	minX,&nbsp;maxX	die Unter- und Obergrenze.
     */
    public void setBounds(double minX, double maxX) {
        this.minX = minX;
        this.maxX = maxX;
    }

    /**
     * Liefert die Untergrenze dieser Funktiongruppe.
     * @return minimales <i>x</i>.
     */
    public double getMinX() { return minX; }

    /**
     * Liefert die Obergrenze dieser Funktiongruppe.
     * @return maximales <i>x</i>.
     */
    public double getMaxX() { return maxX; }

    /**
     * Liefert den annähernd kleinsten <i>y</i>-Wert dieser Funktionengruppe. Sind noch keine
     * Funktionen in der Gruppe wird <code>Double.POSITIVE_INFINITY</code> geliefert.
     * @return	kleinstes <i>y</i>.
     */
    public double getMinY() { return minY; }

    /**
     * Liefert den annähernd gr&ouml;ssten <i>y</i>-Wert dieser Funktionengruppe. Sind noch keine
     * Funktionen in der Gruppe wird <code>Double.NEGATIVE_INFINITY</code> geliefert.
     * @return	gr&ouml;sstes <i>y</i>.
     */
    public double getMaxY() { return maxY; }

    /**
     * Setzt den minimalen y-Wert der Funktionsgruppe.
     * @param	y der neue minimale y-Wert.
     */
    public void setMinY(double y) { minY = y; }

    /**
     * Setzt den maximalen y-Wert der Funktionsgruppe.
     * @param	y der neue maximale y-Wert.
     */
    public void setMaxY(double y) { maxY = y; }

    /**
     * Setzt den minimalen x-Wert der Funktionsgruppe.
     * @param	x der neue minimale x-Wert.
     */
    public void setMinX(double x) { minX = x; }

    /**
     * Setzt den maximalen x-Wert der Funktionsgruppe.
     * @param	x der neue maximale x-Wert.
     */
    public void setMaxX(double x) { maxX = x; }

    /**
     * Liefert die Anzahl der Funktionen in dieser Funktionengruppe.
     * @return	die Anzahl der Funktionen.
     */
    public int getNoFunctions() { return functions.size(); }

    /**
     * Grenzen der Y-Achse automatisch ermitteln?
     * @param	b true, falls sie automatisch ermittelt werden sollen
     */
    public void setAutoCalculateYBounds(boolean b) {
        calcMinMaxY = b;
    }

    /**
     * Fügt die spezifizierte Funktion der Funktionengruppe hinzu.
     * @param	function	die hinzuzuf&uuml;gende <code>FLGFunction2D</code>.
     */
    public void addFunction(FLGFunction2D function) {
        functions.addElement(function);
        if (calcMinMaxY) {
            // calculate minY and maxY
            double fctX, fctY;
            boolean changedMaxY = false;
            boolean changedMinY = false;
            for (int x = 0; x < (RES + 1); x++) {
                fctX = minX + ((double)x * (maxX - minX)) / (double)RES;
                if (function.contains(fctX)) {
                    fctY = function.calculate(fctX);
                    if (fctY > maxY) {
                        maxY = fctY;
                        changedMaxY = true;
                    }
                    if (fctY < minY) {
                        minY = fctY;
                        changedMinY = true;
                    }
                }
            }
            double offs = (maxY - minY) * 0.000001;
            if (changedMaxY) maxY += offs;
            if (changedMinY) minY -= offs;
        }
    }

    public void removeFunction(int index) {
        if (index >= 0 && index < functions.size())
            functions.removeElementAt(index);
    }

    /**
     * Liefert die Funktion der Funktionengruppe, die an der spezifizierten Stelle steht.
     * @param	ind	der Index der Funktion.
     */
    public FLGFunction2D getFunction(int ind) {
        if (ind >= 0 && ind < functions.size())
            return (FLGFunction2D)functions.elementAt(ind);
        return null;
    }

    /**
     * Entfernt die Funktion der Funktionengruppe, die an der spezifizierten Stelle steht.
     * @param	ind	der Index der Funktion.
     */
    public void remFunction(int ind) {
        if (ind >= 0 && ind < functions.size())
            functions.removeElementAt(ind);
    }
}
