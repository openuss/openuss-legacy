package org.openuss.business.extension.formula.mathml.in;

import org.openuss.openformula.mathml.in.java_cup.runtime.*;


parser code  {: 
    public void syntax_error(Symbol symbol) {
    }

    public void unrecovered_syntax_error(Symbol symbol) throws Exception {
        throw new RuntimeException("Fehler in Zeile "+symbol.left+", Spalte "+symbol.right);
    }
  
    public void report_error(String message, Object info) {
    }
   
    public void report_fatal_error(String message, Object info) {
    }
  
:};


/* Initial, General */
terminal MATHHEADER_OPEN;
terminal MATHHEADER_CLOSE;
terminal GT; 

/* Token Elements */
terminal OPERATOR_OPEN;
terminal OPERATOR_CLOSE;
terminal NUMBER_OPEN;
terminal NUMBER_CLOSE;
terminal IDENTIFIER_OPEN;
terminal IDENTIFIER_CLOSE;
//terminal STRING_OPEN;
//terminal STRING_CLOSE;
terminal SPACE_OPENCLOSE;

/* General Layout Schemata */
terminal ROW_OPEN;
terminal ROW_CLOSE;
terminal FRACTION_OPEN;
terminal FRACTION_CLOSE;
terminal SQUAREROOT_OPEN;
terminal SQUAREROOT_CLOSE;
terminal ROOT_OPEN;
terminal ROOT_CLOSE;
terminal FENCE_OPEN;
terminal FENCE_CLOSE;

/* Script and Limit Schemata */
terminal SUBSCRIPT_OPEN;
terminal SUBSCRIPT_CLOSE;
terminal SUPERSCRIPT_OPEN;
terminal SUPERSCRIPT_CLOSE;
terminal SUBSUPERSCRIPT_OPEN;
terminal SUBSUPERSCRIPT_CLOSE;
terminal OVERSCRIPT_OPEN;
terminal OVERSCRIPT_CLOSE;
terminal UNDERSCRIPT_OPEN;
terminal UNDERSCRIPT_CLOSE;
terminal UNDEROVERSCRIPT_OPEN;
terminal UNDEROVERSCRIPT_CLOSE;

/* Tables and Matrices */
terminal TABLEORMATRIX_OPEN;
terminal TABLEORMATRIX_CLOSE;
terminal MATRIXROW_OPEN;
terminal MATRIXROW_CLOSE;
terminal MATRIXELEMENT_OPEN;
terminal MATRIXELEMENT_CLOSE;

/* string variants */
terminal APARAMETER;
terminal ENCLOSED_STRING;

/* Fences */

/* Number Elements */  
terminal FLOATING_POINT_LITERAL;
terminal UNICODECHAR;

/* Intern */
terminal CURSOR;
terminal MBR;

non terminal base;
non terminal row;
non terminal statements;
non terminal astatement;

non terminal tokenElements;
non terminal generalLayoutSchemata;
non terminal scriptAndLimitSchemata;

non terminal tablesAndMatrices;
non terminal matrixLines;
non terminal matrixLine;
non terminal matrixElements;
non terminal matrixElement;

non terminal intern;

start with base;

base ::= 
	MATHHEADER_OPEN:a  				// <math>
	MATHHEADER_CLOSE 				// </math>
	{: RESULT = new MathHeader((Symbol)a); :}
	|
	MATHHEADER_OPEN:a  				// <math>
	row:b						// <row> ... </row>
	MATHHEADER_CLOSE 				// </math>
	{: RESULT = new MathHeader((Symbol)a, (InterpreterBasis)b); :}
	
;

row ::= 	
	ROW_OPEN:a 					// <row>
	ROW_CLOSE	 				// </row>
	{: RESULT = new Row((Symbol)a); :}
	|
	ROW_OPEN:a 					// <row>
	statements:b					// statements
	ROW_CLOSE	 				// </row>
	{: RESULT = new Row((Symbol)a, (Statements)b); :}
;	

statements ::=
	astatement:a
	{: RESULT = new Statements((AStatement)a); :}
	|
	astatement:a	
	statements:b
	{: RESULT = new Statements((AStatement)a, (Statements)b); :}	
;	

astatement ::=
	tokenElements:a
	{: RESULT = new AStatement((Statement)a); :}
	|
	generalLayoutSchemata:a
	{: RESULT = new AStatement((Statement)a); :}	
	|
	scriptAndLimitSchemata:a
	{: RESULT = new AStatement((Statement)a); :}	
	|
	tablesAndMatrices:a
	{: RESULT = new AStatement((Statement)a); :}		
	|
	intern:a
	{: RESULT = new AStatement((Statement)a); :}			
;

tokenElements ::=
	OPERATOR_OPEN					// <mo>	
	UNICODECHAR:a					// Char Literal
	OPERATOR_CLOSE					// </mo>
	{: RESULT = new InsertCharSymbol((String)a, aleft, aright); :}
	|
	IDENTIFIER_OPEN					// <mi>	
	UNICODECHAR:a					// Char Literal
	IDENTIFIER_CLOSE				// </mi>
	{: RESULT = new InsertCharSymbol((String)a, aleft, aright); :}
	|
	NUMBER_OPEN					// <mn>
	FLOATING_POINT_LITERAL:a			// Number, handling like a string
	NUMBER_CLOSE					// </mn>
	{: RESULT = new InsertString((String)a, aleft, aright); :}
	|
	ENCLOSED_STRING:a				// <ms> String </ms>
	{: RESULT = new InsertString((String)a, aleft, aright); :}
	|
	SPACE_OPENCLOSE:a				// <mspace/>
	{: RESULT = new InsertString(" ", aleft, aright); :}	
;

generalLayoutSchemata::=
	FRACTION_OPEN					// <mfrac>
	row:main					// Row - Nenner
	row:base					// Row - Zähler
	FRACTION_CLOSE					// </mfrac>
	{: RESULT = new InsertFraction((Row)main,(Row)base); :}
	|
	SQUAREROOT_OPEN					// <msqrt>
	row:main					// Row - Basis
	SQUAREROOT_CLOSE				// </msqrt>
	{: RESULT = new InsertSquareRoot((Row)main); :}
	|
	ROOT_OPEN					// <mroot>
	row:main					// Row - Basis
	row:base					// Row - Zähler
	ROOT_CLOSE					// </mroot>
	{: RESULT = new InsertSquareRoot((Row)main,(Row)base); :}	
	|
	FENCE_OPEN APARAMETER:open APARAMETER:close GT  // <mfence Parameter1 Parameter2 >
	row:main					// Row - Inhalt
	FENCE_CLOSE					// </mfence>
	{: RESULT = new InsertFence((String)open, (String)close, (Row)main);  :}
	|
	MBR
	{: RESULT = new InsertCarriageReturn(); :}	
;

scriptAndLimitSchemata::=
	SUBSCRIPT_OPEN					// <msub>
	row:main					// Row - Normal
	row:sub						// Row - Subscript
	SUBSCRIPT_CLOSE					// </msub>
	{: RESULT = new InsertSubSuperscript((Row)main, (Row)sub, true);  :}
	|
	SUPERSCRIPT_OPEN				// <msup>
	row:main					// Row - Normal
	row:sup						// Row - Superscript	
	SUPERSCRIPT_CLOSE				// </msup>
	{: RESULT = new InsertSubSuperscript((Row)main, (Row)sup, false);  :}
	|
	SUBSUPERSCRIPT_OPEN				// <msubsup>
	row:main					// Row - Normal
	row:sub						// Row - Subscript	
	row:sup						// Row - Superscript	
	SUBSUPERSCRIPT_CLOSE				// <msubsup>
	{: RESULT = new InsertSubSuperscript((Row)main, (Row)sub, (Row)sup);  :}
	|
	// Hierüber wird das Summenzeichen, das Integralzeichen und das Produktzeichen gehandhabt
	// Unterschied: Basis hat keine Row
	UNDEROVERSCRIPT_OPEN				// <munderover>
		OPERATOR_OPEN				// 	<mo>	
		UNICODECHAR:a				// 	Char Literal
		OPERATOR_CLOSE				// 	</mo>
	row:bottom					// Row - bottom
	row:top						// Row - top
	UNDEROVERSCRIPT_CLOSE				// </munderover>	
	{: RESULT = new InsertSummIntegralSign((String)a, (Row)bottom, (Row)top);  :}
	|
	// Variante 1 zu <mover> - Dient zur Darstellung von Zeichen wie z.B. Tilde über
	// Buchstaben. Verwendet keine Rows. Für <mi>.
	OVERSCRIPT_OPEN					// <mover>	
	IDENTIFIER_OPEN					// <mi>	
	UNICODECHAR:letter				// Char Literal
	IDENTIFIER_CLOSE				// </m>		
	OPERATOR_OPEN					// <mo>	
	UNICODECHAR:type				// Char Literal
	OPERATOR_CLOSE					// </mo>
	OVERSCRIPT_CLOSE				// </mover>		
	{: RESULT = new InsertIndicatedLetter((String)letter, (String)type); :}
	|	
	// Variante 2 zu <mover> - Dient zur Darstellung von Zeichen wie z.B. Tilde über
	// Operatoren. Verwendet keine Rows. Für <mo>.
	OVERSCRIPT_OPEN					// <mover>	
	OPERATOR_OPEN					// <mo>	
	UNICODECHAR:letter				// Char Literal
	OPERATOR_CLOSE					// </mo>		
	OPERATOR_OPEN					// <mo>	
	UNICODECHAR:type				// Char Literal
	OPERATOR_CLOSE					// </mo>
	OVERSCRIPT_CLOSE				// </mover>		
	{: RESULT = new InsertIndicatedLetter((String)letter, (String)type); :}
	|
	// Variante 3 zu <mover> - Dient zur Darstellung von Zeichen wie z.B. Tilde über
	// Operatoren. Verwendet keine Rows. Für <mn>. Ungewöhnlich, aber was solls...
	OVERSCRIPT_OPEN					// <mover>	
	NUMBER_OPEN					// <mn>	
	FLOATING_POINT_LITERAL:letter			// Char Literal
	NUMBER_CLOSE					// </mn>		
	OPERATOR_OPEN					// <mo>	
	UNICODECHAR:type				// Char Literal
	OPERATOR_CLOSE					// </mo>
	OVERSCRIPT_CLOSE				// </mover>		
	{: RESULT = new InsertIndicatedLetter((String)letter, (String)type); :}
	|
	// Hauptversion - zur Zeit noch ungenutzt
	OVERSCRIPT_OPEN					// <mover>
	row:main					// Row: Basis
	row:over					// Row: Text über Basis
	OVERSCRIPT_CLOSE				// </mover>
	{: RESULT = new InsertUnderOver((Row)main, null, (Row)over);  :}
	|
	UNDERSCRIPT_OPEN				// <munder>
	row:main					// Row: Basis
	row:under					// Row: Text unter Basis
	UNDERSCRIPT_CLOSE				// </mover>
	{: RESULT = new InsertUnderOver((Row)main, (Row)under, null);  :}
	|
	UNDEROVERSCRIPT_OPEN				// <munderover>
	row:main					// Row: Basis
	row:under					// Row: Text unter Basis
	row:over					// Row: Text über Basis	
	UNDEROVERSCRIPT_CLOSE				// </munderover>
	{: RESULT = new InsertUnderOver((Row)main, (Row)under, (Row)over);  :}	
;	

tablesAndMatrices::=
	TABLEORMATRIX_OPEN				// <mtable>
	matrixLines:matrix				// Linien
	TABLEORMATRIX_CLOSE				// </mtable>	
	{: RESULT = new InsertMatrix((MatrixLines)matrix);  :}
;

matrixLines::=
	matrixLine:thisone				// Eine Linie
	matrixLines:next				// Weitere Linie
	{: RESULT = new MatrixLines((MatrixLine)thisone, (MatrixLines)next);  :}
	|
	matrixLine:thisone				// Letzte Linie
	{: RESULT = new MatrixLines((MatrixLine)thisone);  :}	
;

matrixLine::=
	MATRIXROW_OPEN					// <mtr>
	matrixElements:elements				// Elemente in den Spalten
	MATRIXROW_CLOSE					// </mtr>
	{: RESULT = new MatrixLine((MatrixElements)elements);  :}
;

matrixElements::=
	matrixElement:thisone				// ein Element
	matrixElements:next				// weitere Elemente
	{: RESULT = new MatrixElements((MatrixElement)thisone, (MatrixElements)next);  :}	
	|
	matrixElement:thisone				// das letzte Element
	{: RESULT = new MatrixElements((MatrixElement)thisone);  :}
;

matrixElement::=
	MATRIXELEMENT_OPEN				// <mtd>
	row:element					// eine Spalte
	MATRIXELEMENT_CLOSE				// </mtd>
	{: RESULT = new MatrixElement((Row)element);  :}
;

intern::=
	CURSOR						// <cursor/>
	{: RESULT = new InsertCursor();  :}
;


